<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Briefs on Anaminus.Blog</title><link>https://anaminus.github.io/blog/briefs/</link><description>Recent content in Briefs on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Wed, 24 Sep 2025 20:41:47 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/briefs/index.xml" rel="self" type="application/rss+xml"/><item><title>Fearless git</title><link>https://anaminus.github.io/blog/briefs/202509242041/</link><pubDate>Wed, 24 Sep 2025 20:41:47 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202509242041/</guid><content:encoded>&lt;p&gt;Git is great for fearlessly making changes to &lt;em&gt;anything&lt;/em&gt;.&lt;/p&gt;</content:encoded></item><item><title>Arrow emoji</title><link>https://anaminus.github.io/blog/briefs/202509122111/</link><pubDate>Fri, 12 Sep 2025 21:11:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202509122111/</guid><content:encoded>&lt;p&gt;Can we make ARROW POINTING UPWARD THEN CURVING LEFTWARD a meme so that the
Unicode Consortium will add it as an emoji?&lt;/p&gt;</content:encoded></item><item><title>Gondola</title><link>https://anaminus.github.io/blog/briefs/202509111207/</link><pubDate>Thu, 11 Sep 2025 12:05:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202509111207/</guid><content:encoded>&lt;p&gt;AI is a gondola lift to the top of Mount Stupid.&lt;/p&gt;</content:encoded></item><item><title>.nojekyll</title><link>https://anaminus.github.io/blog/briefs/202508211648/</link><pubDate>Thu, 21 Aug 2025 16:48:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508211648/</guid><content:encoded>&lt;p&gt;If you don&amp;rsquo;t use Jekyll for GitHub Pages, be sure to disable it by adding a
&lt;code&gt;.nojekyll&lt;/code&gt; file to the root of the deployed branch. Doing this cut my build
time in half.&lt;/p&gt;</content:encoded></item><item><title>Contrast ratios</title><link>https://anaminus.github.io/blog/briefs/202508180236/</link><pubDate>Mon, 18 Aug 2025 02:36:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508180236/</guid><content:encoded>&lt;p&gt;Minimally compliant contrast ratios. Good for preventing afterimages.&lt;/p&gt;
&lt;div class="swatches"&gt;
	&lt;div class="dark r456 small"&gt;Ratio: 4.56 (AA)&lt;br&gt;BG: #000000&lt;br&gt;FG: #757575&lt;/div&gt;
	&lt;div class="dark r701 small"&gt;Ratio: 7.01 (AAA)&lt;br&gt;BG: #000000&lt;br&gt;FG: #959595&lt;/div&gt;
	&lt;div class="dark r304 large"&gt;Ratio: 3.04 (AA)&lt;br&gt;BG: #000000&lt;br&gt;FG: #5A5A5A&lt;/div&gt;
	&lt;div class="dark r456 large"&gt;Ratio: 4.56 (AAA)&lt;br&gt;BG: #000000&lt;br&gt;FG: #757575&lt;/div&gt;
	&lt;div class="dark r701 large"&gt;Ratio: 7.01 (AAA+)&lt;br&gt;BG: #000000&lt;br&gt;FG: #959595&lt;/div&gt;
	&lt;div class="dark r700 small"&gt;Ratio: 7.00 (AAA)&lt;br&gt;BG: #595959&lt;br&gt;FG: #FFFFFF&lt;/div&gt;
	&lt;div class="dark r700 large"&gt;Ratio: 7.00 (AAA+)&lt;br&gt;BG: #595959&lt;br&gt;FG: #FFFFFF&lt;/div&gt;
	&lt;div class="dark r454 small"&gt;Ratio: 4.54 (AA)&lt;br&gt;BG: #767676&lt;br&gt;FG: #FFFFFF&lt;/div&gt;
	&lt;div class="dark r454 large"&gt;Ratio: 4.54 (AAA)&lt;br&gt;BG: #767676&lt;br&gt;FG: #FFFFFF&lt;/div&gt;
	&lt;div class="dark r303 large"&gt;Ratio: 3.03 (AA)&lt;br&gt;BG: #949494&lt;br&gt;FG: #FFFFFF&lt;/div&gt;
	&lt;div class="light r304 large"&gt;Ratio: 3.04 (AA)&lt;br&gt;BG: #5A5A5A&lt;br&gt;FG: #000000&lt;/div&gt;
	&lt;div class="light r456 small"&gt;Ratio: 4.56 (AA)&lt;br&gt;BG: #757575&lt;br&gt;FG: #000000&lt;/div&gt;
	&lt;div class="light r456 large"&gt;Ratio: 4.56 (AAA)&lt;br&gt;BG: #757575&lt;br&gt;FG: #000000&lt;/div&gt;
	&lt;div class="light r701 small"&gt;Ratio: 7.01 (AAA)&lt;br&gt;BG: #959595&lt;br&gt;FG: #000000&lt;/div&gt;
	&lt;div class="light r701 large"&gt;Ratio: 7.01 (AAA+)&lt;br&gt;BG: #959595&lt;br&gt;FG: #000000&lt;/div&gt;
	&lt;div class="light r700 small"&gt;Ratio: 7.00 (AAA)&lt;br&gt;BG: #FFFFFF&lt;br&gt;FG: #595959&lt;/div&gt;
	&lt;div class="light r700 large"&gt;Ratio: 7.00 (AAA+)&lt;br&gt;BG: #FFFFFF&lt;br&gt;FG: #595959&lt;/div&gt;
	&lt;div class="light r454 small"&gt;Ratio: 4.54 (AA)&lt;br&gt;BG: #FFFFFF&lt;br&gt;FG: #767676&lt;/div&gt;
	&lt;div class="light r454 large"&gt;Ratio: 4.54 (AAA)&lt;br&gt;BG: #FFFFFF&lt;br&gt;FG: #767676&lt;/div&gt;
	&lt;div class="light r303 large"&gt;Ratio: 3.03 (AA)&lt;br&gt;BG: #FFFFFF&lt;br&gt;FG: #949494&lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title>Slice swap</title><link>https://anaminus.github.io/blog/briefs/202508142233/</link><pubDate>Thu, 14 Aug 2025 22:33:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508142233/</guid><content:encoded>&lt;p&gt;Swapping two parts of a slice in-place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// ABCDE|FGH&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// EDCBA|FGH&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// EDCBA|HGF&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// FGH|ABCDE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Proportional bitmap fonts</title><link>https://anaminus.github.io/blog/briefs/202508121522/</link><pubDate>Tue, 12 Aug 2025 15:22:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508121522/</guid><content:encoded>&lt;p&gt;Here&amp;rsquo;s a method for producing proportional bitmap fonts. The red component
defines the drawable area for each glyph. Green defines the actual appearance.
Blue defines the origin and spacing. Blank glyphs are skipped.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202508121522/00.png" width="1287" height="726" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Layers are used to define groups of characters, allowing any part of the unicode
codespace to be specified. A layer name with a single code point defines a
sequential group. Ligatures are possible by defining a layer name with more than
one code point.&lt;/p&gt;
&lt;p&gt;Text is rendered by placing the left-most blue pixel of a glyph over the
right-most blue pixel of the previous glyph. Using a baseline instead of
boundaries for glyph placement allows glyphs to be spaced arbitrarily, and even
drawn over each other.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202508121522/01.png" width="1026" height="776" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Futuristic</title><link>https://anaminus.github.io/blog/briefs/202508071546/</link><pubDate>Thu, 07 Aug 2025 15:46:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508071546/</guid><content:encoded>&lt;p&gt;There was a time when &amp;ldquo;The year is 2025&amp;rdquo; would have felt futuristic.&lt;/p&gt;</content:encoded></item><item><title>Terms of Service</title><link>https://anaminus.github.io/blog/briefs/202508071544/</link><pubDate>Thu, 07 Aug 2025 15:44:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508071544/</guid><content:encoded>&lt;p&gt;The year is 2025. There is still no benchmark for displaying differences in
Terms of Service. Users everywhere are still expected to memorize the whole
thing and then comb through looking for changes.&lt;/p&gt;</content:encoded></item><item><title>Same length</title><link>https://anaminus.github.io/blog/briefs/202503042052/</link><pubDate>Tue, 04 Mar 2025 20:52:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202503042052/</guid><content:encoded>&lt;p&gt;Today I am thankful that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argument&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constant&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;relative&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;variable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all have the same number of letters.&lt;/p&gt;</content:encoded></item><item><title>Banana stickers</title><link>https://anaminus.github.io/blog/briefs/202412071838/</link><pubDate>Sat, 07 Dec 2024 18:38:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202412071838/</guid><content:encoded>&lt;p&gt;You can just take the stickers off the bananas all at once.&lt;/p&gt;</content:encoded></item><item><title>Engine documentation</title><link>https://anaminus.github.io/blog/briefs/202409131800/</link><pubDate>Fri, 13 Sep 2024 18:00:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202409131800/</guid><content:encoded>&lt;p&gt;Happy spooky friday! The API reference now has engine documentation included
directly for classes and enums.
&lt;a href="https://robloxapi.github.io/ref/"&gt;https://robloxapi.github.io/ref/&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202409131800/00.jpg" width="987" height="1107" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Type documentation</title><link>https://anaminus.github.io/blog/briefs/202407241540/</link><pubDate>Wed, 24 Jul 2024 15:40:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202407241540/</guid><content:encoded>&lt;p&gt;👀&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202407241540/00.jpg" width="961" height="700" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Search for all values</title><link>https://anaminus.github.io/blog/briefs/202405150045/</link><pubDate>Wed, 15 May 2024 00:45:09 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202405150045/</guid><content:encoded>&lt;p&gt;Improved syntax: to display all values of a field, just use the field name
without specifying a value.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202405150045/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>List selector</title><link>https://anaminus.github.io/blog/briefs/202405132239/</link><pubDate>Mon, 13 May 2024 22:39:58 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202405132239/</guid><content:encoded>&lt;p&gt;I implemented a &amp;ldquo;list&amp;rdquo; selector and it&amp;rsquo;s kind of overpowered.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202405132239/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Search engine grammar</title><link>https://anaminus.github.io/blog/briefs/202405081353/</link><pubDate>Wed, 08 May 2024 13:53:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202405081353/</guid><content:encoded>&lt;p&gt;Search engine grammar is coming along.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202405081353/00.jpg" width="1005" height="636" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Updates feed</title><link>https://anaminus.github.io/blog/briefs/202405021947/</link><pubDate>Thu, 02 May 2024 19:47:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202405021947/</guid><content:encoded>&lt;p&gt;Added RSS feed for API updates:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://robloxapi.github.io/ref/updates/index.xml"&gt;https://robloxapi.github.io/ref/updates/index.xml&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>API reference is live</title><link>https://anaminus.github.io/blog/briefs/202404292126/</link><pubDate>Mon, 29 Apr 2024 21:26:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404292126/</guid><content:encoded>&lt;p&gt;The new Roblox API Reference is live.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://robloxapi.github.io/ref/"&gt;https://robloxapi.github.io/ref/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Missing separator</title><link>https://anaminus.github.io/blog/briefs/202404272309/</link><pubDate>Sat, 27 Apr 2024 23:09:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404272309/</guid><content:encoded>&lt;p&gt;The changes shown in this image hint at how parameters are named internally in
Roblox&amp;rsquo;s engine. It&amp;rsquo;s clear that someone missed a separator when adding the
&amp;ldquo;plugin&amp;rdquo; parameter.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404272309/00.png" width="514" height="327" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Mobile layout panels</title><link>https://anaminus.github.io/blog/briefs/202404261503/</link><pubDate>Fri, 26 Apr 2024 15:03:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404261503/</guid><content:encoded>&lt;p&gt;Have panels for a mobile layout now, implemented with no javascript.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202404261503/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Premature ads</title><link>https://anaminus.github.io/blog/briefs/202404242216/</link><pubDate>Wed, 24 Apr 2024 22:16:02 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404242216/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;You absolutely should not run ads for a game that is first-day-public. You
need to publicly softlaunch for at least 10 (maybe 14?) days first or you&amp;rsquo;re
going to run afoul of the security system.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/MrChickenRocket/status/1783331200175890922"&gt;@MrChickenRocket, 3:04 AM · Apr 25, 2024&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where would I learn this information that isn&amp;rsquo;t an impromptu tweet from someone
I happen to follow replying to someone else I happen to follow that I happen to
see incidentally?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Newly &amp;ldquo;first time public&amp;rdquo; places are subject to a bunch of security and
filtering because of exploiters. The exact details are not published by roblox
for .. reasons? I guess, but I&amp;rsquo;ve watched multiple game launches step on that
garden rake of not being able to have people join.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/MrChickenRocket/status/1783363574192320705"&gt;@MrChickenRocket, 5:13 AM · Apr 25, 2024&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</content:encoded></item><item><title>Reference statistics</title><link>https://anaminus.github.io/blog/briefs/202404191747/</link><pubDate>Fri, 19 Apr 2024 17:47:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404191747/</guid><content:encoded>&lt;p&gt;Decided to indulge a bit with a page of API statistics.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://robloxapi.github.io/ref/stats.html"&gt;https://robloxapi.github.io/ref/stats.html&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404191747/00.jpg" width="983" height="1107" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Sibling classes</title><link>https://anaminus.github.io/blog/briefs/202404181341/</link><pubDate>Thu, 18 Apr 2024 13:41:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404181341/</guid><content:encoded>&lt;p&gt;Sibling classes. Obvious in retrospect, and very easy to implement.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202404181341/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Search update</title><link>https://anaminus.github.io/blog/briefs/202404171643/</link><pubDate>Wed, 17 Apr 2024 16:43:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404171643/</guid><content:encoded>&lt;p&gt;Basic search now working.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://robloxapi.github.io/ref/?q=ffc"&gt;https://robloxapi.github.io/ref/?q=ffc&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Query engine</title><link>https://anaminus.github.io/blog/briefs/202404151423/</link><pubDate>Mon, 15 Apr 2024 14:23:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404151423/</guid><content:encoded>&lt;p&gt;Implemented a query engine that can search for API items through just about any
aspect. As expected, it&amp;rsquo;s quite fast.&lt;/p&gt;
&lt;p&gt;For now, the plan is to use only the fuzzy matcher. After I replace the old
website, I can work on writing a parser than can utilize the entire engine.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404151423/00.jpg" width="960" height="655" loading="lazy"&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404151423/01.png" width="765" height="487" loading="lazy"&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404151423/02.png" width="670" height="423" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;The query syntax is made up. Here&amp;rsquo;s the current plan:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Expressions

	foo bar : expressions foo and bar
	foo &amp;amp;&amp;amp; bar : foo and bar
	foo, bar : foo or bar
	foo || bar : foo or bar
	!foo : negation of foo
	(foo) : expression grouping

Simple

	foo : fuzzy match name to foo
	&amp;#34;foo&amp;#34; : name exactly equal to foo
	/foo/ : match name to regexp foo
	* : always match

Compound

	foo. : match primary name to foo (e.g. class name)
	.bar : match secondary name to bar (e.g. property name)
	foo.bar : match primary name to foo and secondary name to bar

Fields

	is:foo : of type &amp;#34;foo&amp;#34; (class, function, etc)
	tag:foo : has tag &amp;#34;foo&amp;#34;
	has:foo : has field &amp;#34;foo&amp;#34;
	removed:yes : is removed
	superclasses:N : number of superclasses (class)
	subclasses:N : number of subclasses (class)
	members:N : number of members (class)
	superclass:foo : superclass foo (class)
	subclass:foo : superclass foo (class)
	memcat:foo : MemoryCategory foo (class)
	threadsafety:foo : ThreadSafety foo (member)
	security:foo : Security foo (member)
	cansave:yes : CanSave (property)
	canload:yes : CanLoad (property)
	readsecurity:foo : ReadSecurity foo (property)
	writesecurity:foo : WriteSecurity foo (property)
	valuetypecat:foo : ValueType.Category foo (property)
	valuetypename:foo : ValueType.Name foo (property)
	category:foo : Category foo (property)
	default:foo : Default foo (property)
	returns:N : number of returns (function)
	parameters:N : number of parameters (function)
	returntypecat:foo : return.Type.Category foo (function)
	returntypename:foo : return.Type.Name foo (function)
	returntypeopt:yes : return.Type.Optional (function)
	paramtypecat:foo : parameter.Type.Category foo (function)
	paramtypename:foo : parameter.Type.Name foo (function)
	paramtypeopt:yes : parameter.Type.Optional (function)
	paramname:foo : parameter.Name foo (function)
	paramdefault:foo : parameter.Default foo (function)
	enumitems:N : number of enum items (enum)
	itemvalue:foo : enum item value foo (enumitem)
	legacynames:N : number of legacy names (enumitem)
	legacyname:foo : legacy name foo (enumitem)
	typecat:foo : type category foo (type)

String

	security:foo : fuzzy match
	security:&amp;#34;foo&amp;#34; : exact match
	security:/foo/ : regex match
	security:* : always match

Numeric

	members:N : field equal to N
	!members:N : field not equal to N
	members:&amp;lt;N : field less than N
	members:&amp;lt;=N : field less than or equal to N
	members:&amp;gt;N : field greater than N
	members:&amp;gt;=N : field greater than or equal to N

Boolean

	removed:no : match false
	removed:n : match false
	removed:0 : match false
	removed:false : match false
	removed:f : match false
	removed:yes : match true
	removed:y : match true
	removed:1 : match true
	removed:true : match true
	removed:t : match true

Meta

	$types : list entity types
	$tags : list entity tags
	$securities : list security field values
	$threadsafeties : list threadsafety field values
	$typecats : list type categories

Results

	limit:50 : set result limit to 50 (default)
	limit:0 : set no result limit
	order:foo : sort ascending by field foo
	order:&amp;lt;foo : sort ascending
	order:&amp;gt;foo : sort descending
	order:score : sort descending by score (default)
	order:name : sort ascending by name
	go:docs : Redirect to CreatorHub page of 1st result
	go:git : Redirect to creator-docs repo page of 1st result
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Database schema</title><link>https://anaminus.github.io/blog/briefs/202404131747/</link><pubDate>Sat, 13 Apr 2024 17:47:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404131747/</guid><content:encoded>&lt;p&gt;Organizing database rows by type.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404131747/00.png" width="1200" height="740" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Static website database</title><link>https://anaminus.github.io/blog/briefs/202404101839/</link><pubDate>Wed, 10 Apr 2024 18:39:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404101839/</guid><content:encoded>&lt;p&gt;Working out how to do searches on a static website. This hinges on the
assumption that testing 21k+ entries is surprisingly fast.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404101839/00.png" width="1200" height="737" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Fun fact: The size of this table is 3490.2x500505 pixels.&lt;/p&gt;</content:encoded></item><item><title>Reference settings</title><link>https://anaminus.github.io/blog/briefs/202404092341/</link><pubDate>Tue, 09 Apr 2024 23:41:42 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404092341/</guid><content:encoded>&lt;p&gt;Got settings up and running.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404092341/00.png" width="306" height="553" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Reference icons</title><link>https://anaminus.github.io/blog/briefs/202404022311/</link><pubDate>Tue, 02 Apr 2024 23:11:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404022311/</guid><content:encoded>&lt;p&gt;Icons!&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404022311/00.jpg" width="1200" height="704" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Updates page</title><link>https://anaminus.github.io/blog/briefs/202403231142/</link><pubDate>Sat, 23 Mar 2024 11:42:50 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202403231142/</guid><content:encoded>&lt;p&gt;Slowly plugging along on the new website. The updates page is more usable now.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://robloxapi.github.io/ref/updates.html"&gt;https://robloxapi.github.io/ref/updates.html&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>CSS filtering</title><link>https://anaminus.github.io/blog/briefs/202403200545/</link><pubDate>Wed, 20 Mar 2024 05:45:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202403200545/</guid><content:encoded>&lt;p&gt;Pure CSS filtering and counting.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202403200545/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>CSS menu panels</title><link>https://anaminus.github.io/blog/briefs/202403121521/</link><pubDate>Tue, 12 Mar 2024 15:21:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202403121521/</guid><content:encoded>&lt;p&gt;Multiple menu panels with just CSS.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gist.github.com/Anaminus/5ef8086ba5260c480e2b7a895d55ce5a"&gt;https://gist.github.com/Anaminus/5ef8086ba5260c480e2b7a895d55ce5a&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202403121521/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Reference rewrite</title><link>https://anaminus.github.io/blog/briefs/202403061607/</link><pubDate>Wed, 06 Mar 2024 16:07:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202403061607/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;ve been working on a complete rewrite of the Roblox API Reference, which is
why it hasn&amp;rsquo;t been updating. Until it&amp;rsquo;s finished, the new website can be
previewed here, for now:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://robloxapi.github.io/ref-temp/"&gt;https://robloxapi.github.io/ref-temp/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Features a simpler architecture, use of full API dumps, creator-docs
integration. Focusing on feature parity with the current site for now, though.&lt;/p&gt;</content:encoded></item><item><title>API dump woes</title><link>https://anaminus.github.io/blog/briefs/202402191024/</link><pubDate>Mon, 19 Feb 2024 10:24:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202402191024/</guid><content:encoded>&lt;p&gt;To whoever did this, I just want you to know that I am very annoyed by your
decision.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202402191024/00.png" width="808" height="615" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Buffer efficiency</title><link>https://anaminus.github.io/blog/briefs/202402161108/</link><pubDate>Fri, 16 Feb 2024 11:08:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202402161108/</guid><content:encoded>&lt;p&gt;Is passing a buffer directly to MessagingService/DataStore actually better?
Mandatory compression means that a size check is required, which means double
encoding. Also does base64, which has worse size overhead than base85 via Luau.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202402161108/00.png" width="505" height="765" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;For specialized data, the developer will be able achieve higher info density way
better than general compression ever could. I&amp;rsquo;d argue that the compression step
should be skipped entirely.&lt;/p&gt;</content:encoded></item><item><title>Debugging</title><link>https://anaminus.github.io/blog/briefs/202312111913/</link><pubDate>Mon, 11 Dec 2023 19:13:50 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202312111913/</guid><content:encoded>&lt;p&gt;Notoriously unstable debugger: That assignment didn&amp;rsquo;t change this variable.&lt;/p&gt;
&lt;p&gt;Me: Must be a compiler bug.&lt;/p&gt;</content:encoded></item><item><title>Light mode</title><link>https://anaminus.github.io/blog/briefs/202312061524/</link><pubDate>Wed, 06 Dec 2023 15:24:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202312061524/</guid><content:encoded>&lt;p&gt;I hereby give you permission to not unconditionally hate light mode. Go ahead.
Be indifferent.&lt;/p&gt;</content:encoded></item><item><title>Longevity</title><link>https://anaminus.github.io/blog/briefs/202312010635/</link><pubDate>Fri, 01 Dec 2023 06:35:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202312010635/</guid><content:encoded>&lt;p&gt;17 years on the platform is not enough for #Roblox&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202312010635/00.png" width="282" height="131" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>DataStore keys</title><link>https://anaminus.github.io/blog/briefs/202311220936/</link><pubDate>Wed, 22 Nov 2023 09:36:38 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311220936/</guid><content:encoded>&lt;p&gt;Boring Facts: DataStore keys are binary-safe. They have a size limit of 50
bytes, not characters. That&amp;rsquo;s 400 full bits to work with.&lt;/p&gt;</content:encoded></item><item><title>Wiping</title><link>https://anaminus.github.io/blog/briefs/202311191654/</link><pubDate>Sun, 19 Nov 2023 16:54:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311191654/</guid><content:encoded>&lt;p&gt;Why are humans like this?&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202311191654/00.png" width="520" height="520" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Entropy</title><link>https://anaminus.github.io/blog/briefs/202311110031/</link><pubDate>Sat, 11 Nov 2023 00:31:02 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311110031/</guid><content:encoded>&lt;p&gt;Entropy is the entire universe telling you to rewrite your front end.&lt;/p&gt;</content:encoded></item><item><title>Rewinding</title><link>https://anaminus.github.io/blog/briefs/202311101534/</link><pubDate>Fri, 10 Nov 2023 15:34:24 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311101534/</guid><content:encoded>&lt;p&gt;This is fine. I&amp;rsquo;m okay with the events that are unfolding currently.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202311101534/00.png" width="923" height="629" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;&amp;ldquo;Fixed&amp;rdquo; it. There&amp;rsquo;s some rewind logic that stops new builds from being displayed
until Roblox says they&amp;rsquo;re live. It seems to malfunction when a build hash
appears more than once in the deploy history. Fixed by disabling rewind, so
diffs can now be enjoyed before they go live.&lt;/p&gt;</content:encoded></item><item><title>Creator docs</title><link>https://anaminus.github.io/blog/briefs/202311080005/</link><pubDate>Wed, 08 Nov 2023 00:05:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311080005/</guid><content:encoded>&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202311080005/00.jpg" width="882" height="756" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Magic software</title><link>https://anaminus.github.io/blog/briefs/202310172342/</link><pubDate>Tue, 17 Oct 2023 23:42:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202310172342/</guid><content:encoded>&lt;p&gt;Magic in software is just a lack of documentation. A design is fine if we know
why we&amp;rsquo;re using it and the reasons are justified.&lt;/p&gt;</content:encoded></item><item><title>Glass</title><link>https://anaminus.github.io/blog/briefs/202309301803/</link><pubDate>Sat, 30 Sep 2023 18:03:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309301803/</guid><content:encoded>&lt;p&gt;Glass is being fun lately.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202309301803/00.jpg" width="1130" height="700" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>LiveBind plugin</title><link>https://anaminus.github.io/blog/briefs/202309301431/</link><pubDate>Sat, 30 Sep 2023 14:31:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309301431/</guid><content:encoded>&lt;p&gt;LiveBind: A quick and dirty plugin to make tag bindings to aid with development.
As an example, a binding that fills in terrain based on parts is included.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/plugins/LiveBind"&gt;https://github.com/Anaminus/roblox-library/tree/master/plugins/LiveBind&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202309301431/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Rotating and tilting</title><link>https://anaminus.github.io/blog/briefs/202309252224/</link><pubDate>Mon, 25 Sep 2023 22:24:07 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309252224/</guid><content:encoded>&lt;p&gt;In Roblox Studio, Ctrl+R &amp;ldquo;rotates&amp;rdquo; around the normal of the focused surface.
Ctrl+T uses the axis that is nearest aligned to the camera&amp;rsquo;s local X axis, so
that it &amp;ldquo;tilts&amp;rdquo; towards the camera.&lt;/p&gt;</content:encoded></item><item><title>RunService</title><link>https://anaminus.github.io/blog/briefs/202309240949/</link><pubDate>Sun, 24 Sep 2023 09:49:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309240949/</guid><content:encoded>&lt;p&gt;If you need to simulate something, such as an assembly, you can call
RunService:Run() and :Stop() from the command bar. It even respects undo/redo.
Keep in mind that the whole place is simulated.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202309240949/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Best UI</title><link>https://anaminus.github.io/blog/briefs/202309222313/</link><pubDate>Fri, 22 Sep 2023 23:13:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309222313/</guid><content:encoded>&lt;p&gt;Roblox Studio&amp;rsquo;s interface should be more like Blender&amp;rsquo;s.&lt;/p&gt;</content:encoded></item><item><title>Library performance</title><link>https://anaminus.github.io/blog/briefs/202309222309/</link><pubDate>Fri, 22 Sep 2023 23:09:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309222309/</guid><content:encoded>&lt;p&gt;Comparisons of performance between libraries are completely meaningless. The
most optimal choice between two libraries is neither.&lt;/p&gt;
&lt;p&gt;Consider the following question: is it being used on the hot path?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No: Then performance doesn&amp;rsquo;t matter.&lt;/li&gt;
&lt;li&gt;Yes: Then it will be optimized away.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>FAQs</title><link>https://anaminus.github.io/blog/briefs/202309191930/</link><pubDate>Tue, 19 Sep 2023 19:30:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309191930/</guid><content:encoded>&lt;p&gt;Preemptive FAQs are not FAQs.&lt;/p&gt;</content:encoded></item><item><title>Real houses</title><link>https://anaminus.github.io/blog/briefs/202309191037/</link><pubDate>Tue, 19 Sep 2023 10:37:42 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309191037/</guid><content:encoded>&lt;p&gt;Latest obsession: building houses realistically. Most of it will be abstracted
away in an actual build, but doing it this way informs the layout of the house.
For example, the stairway in this image isn&amp;rsquo;t ideal, because its headroom
conflicts with the roof (1.5-story house).&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202309191037/00.jpg" width="1200" height="640" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Remote signals</title><link>https://anaminus.github.io/blog/briefs/202309160943/</link><pubDate>Sat, 16 Sep 2023 09:43:37 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309160943/</guid><content:encoded>&lt;p&gt;Remotes effectively break the Signal pattern, so the only thing you should be
doing with them is :Connect()ing exactly one listener.&lt;/p&gt;</content:encoded></item><item><title>Language benchmarks</title><link>https://anaminus.github.io/blog/briefs/202309150855/</link><pubDate>Fri, 15 Sep 2023 08:55:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309150855/</guid><content:encoded>&lt;p&gt;If a language benchmark requires sacrificing readability to achieve performance,
then it isn&amp;rsquo;t an accurate measurement of the language.&lt;/p&gt;</content:encoded></item><item><title>Luau coverage</title><link>https://anaminus.github.io/blog/briefs/202308231135/</link><pubDate>Wed, 23 Aug 2023 11:35:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202308231135/</guid><content:encoded>&lt;p&gt;Wrote a script to display &lt;code&gt;luau --coverage&lt;/code&gt; in a readable format.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202308231135/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>TaskPolyfill</title><link>https://anaminus.github.io/blog/briefs/202308191529/</link><pubDate>Sat, 19 Aug 2023 15:29:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202308191529/</guid><content:encoded>&lt;p&gt;Polyfill for Roblox&amp;rsquo;s task library. Useful for standalone Luau.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/TaskPolyfill"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/TaskPolyfill&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Plugin management</title><link>https://anaminus.github.io/blog/briefs/202308040858/</link><pubDate>Fri, 04 Aug 2023 08:58:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202308040858/</guid><content:encoded>&lt;p&gt;Fun idea: A protocol that programs can implement to allow their plugins to be
managed by the system&amp;rsquo;s package manager.&lt;/p&gt;</content:encoded></item><item><title>Testing testing</title><link>https://anaminus.github.io/blog/briefs/202307301039/</link><pubDate>Sun, 30 Jul 2023 10:39:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307301039/</guid><content:encoded>&lt;p&gt;What tests the testing framework?&lt;/p&gt;</content:encoded></item><item><title>Metatable types</title><link>https://anaminus.github.io/blog/briefs/202307282028/</link><pubDate>Fri, 28 Jul 2023 20:28:25 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307282028/</guid><content:encoded>&lt;p&gt;Luau:&lt;/p&gt;
&lt;p&gt;&amp;gt; Barges into output&lt;/p&gt;
&lt;p&gt;&amp;gt; &lt;code&gt;'Type { @metatable Foo, { } }' could not be converted into 'Foo'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&amp;gt; Refuses to elaborate further&lt;/p&gt;
&lt;p&gt;&amp;gt; Leaves&lt;/p&gt;</content:encoded></item><item><title>Cartesian product</title><link>https://anaminus.github.io/blog/briefs/202307261558/</link><pubDate>Wed, 26 Jul 2023 15:58:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307261558/</guid><content:encoded>&lt;p&gt;What is the name of the thing I am doing here?&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202307261558/00.png" width="406" height="254" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Best answer: Cartesian product&lt;/p&gt;</content:encoded></item><item><title>Tests n benchmarks</title><link>https://anaminus.github.io/blog/briefs/202307252210/</link><pubDate>Tue, 25 Jul 2023 22:10:40 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307252210/</guid><content:encoded>&lt;p&gt;thinkin bout tests n benchmarks&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202307252210/00.png" width="798" height="711" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Scope library</title><link>https://anaminus.github.io/blog/briefs/202307221951/</link><pubDate>Sat, 22 Jul 2023 19:51:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307221951/</guid><content:encoded>&lt;p&gt;Experimental library for lifetime management and value scoping.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/Scope"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/Scope&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Git exclude</title><link>https://anaminus.github.io/blog/briefs/202307211026/</link><pubDate>Fri, 21 Jul 2023 10:26:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307211026/</guid><content:encoded>&lt;p&gt;&lt;code&gt;.git/info/exclude&lt;/code&gt; lets you gitignore things locally without modifying a
.gitignore that exists remotely.&lt;/p&gt;</content:encoded></item><item><title>Connect serial</title><link>https://anaminus.github.io/blog/briefs/202307181212/</link><pubDate>Tue, 18 Jul 2023 12:12:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307181212/</guid><content:encoded>&lt;p&gt;Function to connect a listener to a signal serially. task.cancel continues to be
MVP.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202307181212/00.png" width="862" height="497" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Downtime</title><link>https://anaminus.github.io/blog/briefs/202307172114/</link><pubDate>Mon, 17 Jul 2023 21:14:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307172114/</guid><content:encoded>&lt;p&gt;If downtime is inevitable, then it might as well be on schedule.&lt;/p&gt;</content:encoded></item><item><title>ModuleReflector</title><link>https://anaminus.github.io/blog/briefs/202307141235/</link><pubDate>Fri, 14 Jul 2023 12:35:13 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307141235/</guid><content:encoded>&lt;p&gt;Here&amp;rsquo;s a module for requiring modules without caching, and monitoring Source
changes. A key difference from other implementations is that loadstring isn&amp;rsquo;t
used. The killer feature is that breakpoints can be synced between copy and
original, so debugging is possible.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/ModuleReflector"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/ModuleReflector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, plugins can&amp;rsquo;t access the DebuggerManager, so the debugging method
has to be invoked through the command bar. Fortunately, plugins and the command
bar share the same &lt;code&gt;_G&lt;/code&gt; table, so a plugin can expose it that way.&lt;/p&gt;</content:encoded></item><item><title>Button movement</title><link>https://anaminus.github.io/blog/briefs/202307090034/</link><pubDate>Sun, 09 Jul 2023 00:34:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307090034/</guid><content:encoded>&lt;p&gt;Have GuiButtons always passed mouse movement inputs or am I crazy? They sink
mouse button inputs just fine.&lt;/p&gt;
&lt;p&gt;Can&amp;rsquo;t even use GetGuiObjectsAtPosition to enforce sinking because plugin GUIs
aren&amp;rsquo;t a descendant of any BasePlayerGui. This is fun.&lt;/p&gt;</content:encoded></item><item><title>Destroying</title><link>https://anaminus.github.io/blog/briefs/202307090002/</link><pubDate>Sun, 09 Jul 2023 00:02:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307090002/</guid><content:encoded>&lt;p&gt;Boring Facts: If Destroying is used to add a child to the destroyed instance,
that child wont be destroyed.&lt;/p&gt;</content:encoded></item><item><title>Telemetry</title><link>https://anaminus.github.io/blog/briefs/202307070906/</link><pubDate>Fri, 07 Jul 2023 09:06:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307070906/</guid><content:encoded>&lt;p&gt;&amp;ldquo;According to our analytics, no one was using the setting to opt out of
telemetry, so we decided to remove it.&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Input handling</title><link>https://anaminus.github.io/blog/briefs/202306282139/</link><pubDate>Wed, 28 Jun 2023 21:39:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306282139/</guid><content:encoded>&lt;p&gt;Certain input types have to be handled in certain ways. Key repetitions must be
handled by monitoring the key&amp;rsquo;s InputObject, while mouse wheel input is best
handled by getting it from a source, because an emission from a source doesn&amp;rsquo;t
always correspond to a property change.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306282139/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Input position</title><link>https://anaminus.github.io/blog/briefs/202306272259/</link><pubDate>Tue, 27 Jun 2023 22:59:22 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306272259/</guid><content:encoded>&lt;p&gt;Boring Facts: The Position of a Keyboard InputObject will update with the
position of the mouse while the key is held down. This includes the mouse wheel.&lt;/p&gt;
&lt;p&gt;Correction: Only some keys do this, including the arrow keys, Return, Backspace,
and Delete.&lt;/p&gt;
&lt;p&gt;Further correction: this is caused by key repetition. Generally, a keyboard
object will update with the position of the mouse. However, certain keys that
repeat will switch to the End state, then immediately back to the Begin state,
and repeat again while the key is held down.&lt;/p&gt;</content:encoded></item><item><title>Keyboard InputObjects</title><link>https://anaminus.github.io/blog/briefs/202306272255/</link><pubDate>Tue, 27 Jun 2023 22:55:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306272255/</guid><content:encoded>&lt;p&gt;Boring Facts: Keyboard InputObjects are reused per KeyCode, but only while the
current source (e.g. UserInputService or a GUI) is in focus.&lt;/p&gt;</content:encoded></item><item><title>Input visualizer</title><link>https://anaminus.github.io/blog/briefs/202306272253/</link><pubDate>Tue, 27 Jun 2023 22:53:12 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306272253/</guid><content:encoded>&lt;p&gt;Widget to visualize how InputObjects are produced. Whenever a new object is
made, it is added to the list, then monitored for changes. Each
Source+UserInputType+KeyCode combination produces its own object. Sources used
are the Input signals from UserInputService and a Frame GUI.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306272253/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Track the mouse</title><link>https://anaminus.github.io/blog/briefs/202306271227/</link><pubDate>Tue, 27 Jun 2023 12:27:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306271227/</guid><content:encoded>&lt;p&gt;A unique advantage of ScrollingFrames over a custom implementation is that the
scrollbar can track the mouse across the entire screen, not just the viewport.&lt;/p&gt;
&lt;p&gt;Correction: This isn&amp;rsquo;t unique: the behavior applies to InputObjects, but only
while a mouse button is held down.&lt;/p&gt;</content:encoded></item><item><title>StudioStyleGuideColor</title><link>https://anaminus.github.io/blog/briefs/202306262146/</link><pubDate>Mon, 26 Jun 2023 21:46:24 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306262146/</guid><content:encoded>&lt;p&gt;Fusion widget to help narrow down what StudioStyleGuideColor a studio element is
using.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306262146/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Lattice</title><link>https://anaminus.github.io/blog/briefs/202306241601/</link><pubDate>Sat, 24 Jun 2023 16:01:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306241601/</guid><content:encoded>&lt;p&gt;A port of my &amp;ldquo;lattice&amp;rdquo; container GUI to Fusion. Takes a grid of columns and rows
defined as constant pixels or fractional values, and turns them into static
UDim2s. Has options for padding, margins, and a visualizer for debugging.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306241601/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>If-expressions</title><link>https://anaminus.github.io/blog/briefs/202306240035/</link><pubDate>Sat, 24 Jun 2023 00:35:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306240035/</guid><content:encoded>&lt;p&gt;&lt;em&gt;furiously begins authoring the &amp;ldquo;If-Expressions Considered Harmful&amp;rdquo; paper&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Dusty reference</title><link>https://anaminus.github.io/blog/briefs/202306240026/</link><pubDate>Sat, 24 Jun 2023 00:26:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306240026/</guid><content:encoded>&lt;p&gt;The Roblox API Reference hasn&amp;rsquo;t been updating since the start of June, but it
should now be working normally again.
&lt;a href="https://robloxapi.github.io/ref/updates.html"&gt;https://robloxapi.github.io/ref/updates.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Definitely kicked up some dust trying to fix it. Can&amp;rsquo;t wait to rewrite it.&lt;/p&gt;</content:encoded></item><item><title>Hand-holding</title><link>https://anaminus.github.io/blog/briefs/202306201618/</link><pubDate>Tue, 20 Jun 2023 16:18:54 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306201618/</guid><content:encoded>&lt;p&gt;Game: depicts hand-holding&lt;/p&gt;
&lt;p&gt;Roblox: this game is rated 17+&lt;/p&gt;</content:encoded></item><item><title>Radio silence</title><link>https://anaminus.github.io/blog/briefs/202306130845/</link><pubDate>Tue, 13 Jun 2023 08:45:38 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306130845/</guid><content:encoded>&lt;p&gt;Operation Radio Silence to Improve Chances of Securing my Discord Username was a
resounding success.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202306130845/00.png" width="311" height="274" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Arrow</title><link>https://anaminus.github.io/blog/briefs/202305232027/</link><pubDate>Tue, 23 May 2023 20:27:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305232027/</guid><content:encoded>&lt;p&gt;The &lt;code&gt;-&amp;gt;&lt;/code&gt; operator is unergonomic to type and almost always looks like shit but
new languages will always find an excuse to include it because teehee it&amp;rsquo;s an
arrow.&lt;/p&gt;</content:encoded></item><item><title>🗿</title><link>https://anaminus.github.io/blog/briefs/202305201058/</link><pubDate>Sat, 20 May 2023 10:58:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305201058/</guid><content:encoded>&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202305201058/00.jpg" width="1200" height="675" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Child indexing</title><link>https://anaminus.github.io/blog/briefs/202305190907/</link><pubDate>Fri, 19 May 2023 09:07:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305190907/</guid><content:encoded>&lt;p&gt;stop [clap] using [clap] child [clap] indexing&lt;/p&gt;
&lt;p&gt;The entire problem is that the operation isn’t forward compatible. Either we
can’t index children, or Roblox can’t add new class members.&lt;/p&gt;</content:encoded></item><item><title>KVM switches</title><link>https://anaminus.github.io/blog/briefs/202305081614/</link><pubDate>Mon, 08 May 2023 16:14:39 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305081614/</guid><content:encoded>&lt;p&gt;At this point, I&amp;rsquo;m just gonna call it: VM with GPU passthru is dead. Long live
KVM switches.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/proper-support-for-the-linux-platform/56544/88"&gt;https://devforum.roblox.com/t/proper-support-for-the-linux-platform/56544/88&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Punishment</title><link>https://anaminus.github.io/blog/briefs/202304211611/</link><pubDate>Fri, 21 Apr 2023 16:11:25 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304211611/</guid><content:encoded>&lt;p&gt;Surely we&amp;rsquo;re past punishing users for playing our games in ways we don&amp;rsquo;t like.&lt;/p&gt;</content:encoded></item><item><title>Walk speed</title><link>https://anaminus.github.io/blog/briefs/202304170002/</link><pubDate>Mon, 17 Apr 2023 00:02:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304170002/</guid><content:encoded>&lt;p&gt;Theory: The reason player characters move at different speeds from NPCs is
because the PC has been calibrated on the player&amp;rsquo;s perception. PCs can&amp;rsquo;t move as
slow as NPCs because it would feel sluggish, and NPCs can&amp;rsquo;t move as fast as PCs
because it wouldn&amp;rsquo;t look realistic.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It occurs to me that twitter will probably silently nuke shit out of this
tweet. If you are one of the lucky few to see it, hi!&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Bad but easy</title><link>https://anaminus.github.io/blog/briefs/202304080059/</link><pubDate>Sat, 08 Apr 2023 00:59:22 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304080059/</guid><content:encoded>&lt;p&gt;Instead of trying to work out a good-but-hard design from scratch, just start
with a bad-but-easy design. Refactoring a bad design into a good design is
rewarding and creates momentum.&lt;/p&gt;</content:encoded></item><item><title>Immutable data</title><link>https://anaminus.github.io/blog/briefs/202304071532/</link><pubDate>Fri, 07 Apr 2023 15:32:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304071532/</guid><content:encoded>&lt;p&gt;Hot Take: The table.clone-type immutable data libraries that people keep making
are actually just table utility libraries with immutability add in for vague
reasons. They don&amp;rsquo;t actually do any of the heavy lifting involved in making
immutable data efficient.&lt;/p&gt;</content:encoded></item><item><title>Cursed grammar</title><link>https://anaminus.github.io/blog/briefs/202304051411/</link><pubDate>Wed, 05 Apr 2023 14:11:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304051411/</guid><content:encoded>&lt;pre tabindex="0"&gt;&lt;code&gt;boolean := &amp;#34;true&amp;#34;
 | &amp;#34;fake&amp;#34;

boolean := &amp;#34;right&amp;#34;
 | &amp;#34;false&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>It reads, it writes</title><link>https://anaminus.github.io/blog/briefs/202304031728/</link><pubDate>Mon, 03 Apr 2023 17:28:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304031728/</guid><content:encoded>&lt;p&gt;Been rewriting rbxfile. I think I&amp;rsquo;ve got property type implementations
abstracted down to something satisfying. &amp;ldquo;it&amp;rdquo; stands for &amp;ldquo;iterator&amp;rdquo;, so this
could be considered a pun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;itRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ReadValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;itRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;WriteValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Thatcher Cinematic Universe</title><link>https://anaminus.github.io/blog/briefs/202303172225/</link><pubDate>Fri, 17 Mar 2023 22:25:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303172225/</guid><content:encoded>&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202303172225/00.jpg" width="1165" height="730" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>WireframeHandleAdornment</title><link>https://anaminus.github.io/blog/briefs/202303171137/</link><pubDate>Fri, 17 Mar 2023 11:37:07 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171137/</guid><content:encoded>&lt;p&gt;Tip for using WireframeHandleAdornment: The Color3/Transparency of the adornment
only affects newly added lines, so you only need one adornment to draw lines
with any appearance.&lt;/p&gt;</content:encoded></item><item><title>Screen/viewport split</title><link>https://anaminus.github.io/blog/briefs/202303171116/</link><pubDate>Fri, 17 Mar 2023 11:16:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171116/</guid><content:encoded>&lt;p&gt;The screen/viewport split was one of the biggest blunders Roblox ever made.&lt;/p&gt;</content:encoded></item><item><title>R-tree</title><link>https://anaminus.github.io/blog/briefs/202303171111/</link><pubDate>Fri, 17 Mar 2023 11:11:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171111/</guid><content:encoded>&lt;p&gt;Visualization of an r-tree. WireframeHandleAdornment is essential for debugging.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202303171111/00.jpg" width="1200" height="684" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;It&amp;rsquo;s harder to draw shapes, but it&amp;rsquo;s way better than keeping track of a million
handle adornments.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202303171111/01.jpg" width="1200" height="706" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Local news</title><link>https://anaminus.github.io/blog/briefs/202302132136/</link><pubDate>Mon, 13 Feb 2023 21:36:54 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302132136/</guid><content:encoded>&lt;p&gt;My local news on balloons: Here&amp;rsquo;s some old information that we repeated
yesterday and the day before. We&amp;rsquo;ll be sure to keep you up to date on the latest
nothing that&amp;rsquo;s unfolding.&lt;/p&gt;
&lt;p&gt;My local news on catastrophic industrial disasters: That happened. Here&amp;rsquo;s the
weather.&lt;/p&gt;</content:encoded></item><item><title>Angry voice lines</title><link>https://anaminus.github.io/blog/briefs/202302081049/</link><pubDate>Wed, 08 Feb 2023 10:49:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302081049/</guid><content:encoded>&lt;p&gt;Roblox allowing things like profanity will actually make the writing of angry
characters worse.&lt;/p&gt;</content:encoded></item><item><title>Enum alises</title><link>https://anaminus.github.io/blog/briefs/202302051058/</link><pubDate>Sun, 05 Feb 2023 10:58:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302051058/</guid><content:encoded>&lt;p&gt;Renamed enum items are &amp;ldquo;removed&amp;rdquo; from the API, but still stick around as an
alias to whatever replaced them.&lt;/p&gt;</content:encoded></item><item><title>Roblox 2:2</title><link>https://anaminus.github.io/blog/briefs/202302041156/</link><pubDate>Sat, 04 Feb 2023 11:56:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302041156/</guid><content:encoded>&lt;p&gt;And on the sixth day God rested, for the damn servers were down anyway.&lt;/p&gt;</content:encoded></item><item><title>Digital carnivore</title><link>https://anaminus.github.io/blog/briefs/202302021522/</link><pubDate>Thu, 02 Feb 2023 15:22:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302021522/</guid><content:encoded>&lt;p&gt;Hipsters, soon: I only consume works from meat-based authors.&lt;/p&gt;</content:encoded></item><item><title>Go big</title><link>https://anaminus.github.io/blog/briefs/202302021519/</link><pubDate>Thu, 02 Feb 2023 15:19:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302021519/</guid><content:encoded>&lt;p&gt;Investors: How make number go bigger?&lt;/p&gt;
&lt;p&gt;Roblox:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/beta-update-new-experiences-have-team-create-enabled/2172232"&gt;https://devforum.roblox.com/t/beta-update-new-experiences-have-team-create-enabled/2172232&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202302021519/00.jpg" width="802" height="956" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;For comparison, stats as displayed on 2022-11-15:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202302021519/01.png" width="760" height="359" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Idiot theory: Roblox made a bad-faith measurement of developers/experiences in
Q2, with the stats from Q3 (above) being more accurate. To address number go
down, they&amp;rsquo;re pushing Team Create hard to make number go big again.&lt;/p&gt;</content:encoded></item><item><title>Good code</title><link>https://anaminus.github.io/blog/briefs/202301271430/</link><pubDate>Fri, 27 Jan 2023 14:30:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301271430/</guid><content:encoded>&lt;p&gt;Write good code to write good code.&lt;/p&gt;</content:encoded></item><item><title>The Cloud™</title><link>https://anaminus.github.io/blog/briefs/202301210944/</link><pubDate>Sat, 21 Jan 2023 09:44:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301210944/</guid><content:encoded>&lt;p&gt;There goes a productive day. Thanks, The Cloud™.&lt;/p&gt;</content:encoded></item><item><title>ProximityPrompts</title><link>https://anaminus.github.io/blog/briefs/202301191334/</link><pubDate>Thu, 19 Jan 2023 13:34:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301191334/</guid><content:encoded>&lt;p&gt;ProximityPrompts make for great general proximity detectors.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202301191334/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The proximity signals are client-only, so validation is still required. But it’s
a fast and simple solution for detection. I like to think that it’s been
optimized for large numbers of prompts spread across the workspace, so it’d be a
winner in that case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Author&amp;rsquo;s Note: The tweet this post was derived from was blessed by The
Algorithm for some reason.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>RemoveEvent:Once()</title><link>https://anaminus.github.io/blog/briefs/202301161535/</link><pubDate>Mon, 16 Jan 2023 15:35:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301161535/</guid><content:encoded>&lt;p&gt;Using &lt;code&gt;:Once()&lt;/code&gt; on a RemoteEvent will cause the first queued event to be
received and all other queued events to be discarded.&lt;/p&gt;
&lt;p&gt;This is a design flaw: connecting to a signal must not fire the signal, which
remotes do. To avoid losing events, the workaround is to enforce a remote to
have exactly one consumer. By this logic, &lt;code&gt;:Once()&lt;/code&gt; isn’t allowed, because it
adds the one consumer then immediately removes it.&lt;/p&gt;
&lt;p&gt;The problem is that connecting to the signal fires it and drains the queue. You
literally cannot connect multiple listeners without one of them missing the
queued events. The only option is a wrapper with one listener that dispatches to
multiple listeners.&lt;/p&gt;
&lt;p&gt;There are several solutions to the problem. The most backward compatible would
be to trigger the dequeue on the first connection as usual, but defer it so that
other connections in the same frame have a chance to connect.&lt;/p&gt;</content:encoded></item><item><title>Random graphs</title><link>https://anaminus.github.io/blog/briefs/202301121724/</link><pubDate>Thu, 12 Jan 2023 17:24:25 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301121724/</guid><content:encoded>&lt;p&gt;Random graph generation. Blue vertices have unexplored edges, while green ones
are completely explored. Occasionally connects a new vertex to a nearby existing
vertex, forming a loop. Rarely creates a long loop by connecting to the most
distant vertex.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202301121724/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The graph is represented by a force-directed graph that moves the vertices
around to make them easier to visualize. The actual graph is dimensionless, with
the vertices having no 2D or 3D position.&lt;/p&gt;</content:encoded></item><item><title>Streaming</title><link>https://anaminus.github.io/blog/briefs/202301090959/</link><pubDate>Mon, 09 Jan 2023 09:59:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301090959/</guid><content:encoded>&lt;p&gt;A problem with streaming on Roblox is that a client can just move the camera
anywhere, and the server will happily stream whatever is at that location, even
if the player is not meant to be there. Developers need to be able to exclude
areas from being streamed to certain clients.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2023-01-16 23:14&lt;/em&gt;: As a follow up, it turns out to be possible with the
Player.ReplicationFocus property. Setting it to a dummy part gives the server
the opportunity to deny streaming in. The position of the dummy part matches the
character, except when the character moves to an undesired location.&lt;/p&gt;</content:encoded></item><item><title>1-bit LÖVE</title><link>https://anaminus.github.io/blog/briefs/202212300234/</link><pubDate>Fri, 30 Dec 2022 02:34:12 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212300234/</guid><content:encoded>&lt;p&gt;Having some fun with LÖVE.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202212300234/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Here&amp;rsquo;s a view of the chunk buffer demonstrating simplified chunk loading:&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202212300234/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The white area is the viewport. Chunks are updated only when the focus leaves
the yellow area. Each corner of the blue area determines which chunks are
loaded.&lt;/p&gt;</content:encoded></item><item><title>The writers</title><link>https://anaminus.github.io/blog/briefs/202212221650/</link><pubDate>Thu, 22 Dec 2022 16:50:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212221650/</guid><content:encoded>&lt;p&gt;First AI came for the writers&lt;/p&gt;
&lt;p&gt;And nothing was said about the writers because they didn&amp;rsquo;t make any pretty
pictures to look at.&lt;/p&gt;
&lt;p&gt;Then AI came for the artists&lt;/p&gt;
&lt;p&gt;And nothing was said about the writers because they didn&amp;rsquo;t make any pretty
pictures to look at.&lt;/p&gt;</content:encoded></item><item><title>Futility</title><link>https://anaminus.github.io/blog/briefs/202212192058/</link><pubDate>Mon, 19 Dec 2022 20:58:28 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212192058/</guid><content:encoded>&lt;p&gt;You can&amp;rsquo;t spell futility without utility! &lt;em&gt;winks&lt;/em&gt; &lt;em&gt;double snap-pointing gesture&lt;/em&gt;
&lt;em&gt;winning smile with single sparkle accompanied by &amp;ldquo;ting&amp;rdquo; sound&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Bumping dependencies</title><link>https://anaminus.github.io/blog/briefs/202212162341/</link><pubDate>Fri, 16 Dec 2022 23:41:03 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212162341/</guid><content:encoded>&lt;p&gt;Hope you check dependency diffs before bumping them.&lt;/p&gt;</content:encoded></item><item><title>Copilot</title><link>https://anaminus.github.io/blog/briefs/202212090940/</link><pubDate>Fri, 09 Dec 2022 09:40:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212090940/</guid><content:encoded>&lt;p&gt;Maintainers Not So Impressed After Influx of Bug Reports Deriving From Copilot
Having No Idea What It&amp;rsquo;s Talking About&lt;/p&gt;</content:encoded></item><item><title>Punishing players</title><link>https://anaminus.github.io/blog/briefs/202212080955/</link><pubDate>Thu, 08 Dec 2022 09:55:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212080955/</guid><content:encoded>&lt;p&gt;It&amp;rsquo;s current year and we&amp;rsquo;re still hell-bent on punishing players for not playing
our games correctly instead of just shoving them into their own world where they
can play however they like.&lt;/p&gt;</content:encoded></item><item><title>AI skimming</title><link>https://anaminus.github.io/blog/briefs/202212031031/</link><pubDate>Sat, 03 Dec 2022 10:31:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212031031/</guid><content:encoded>&lt;p&gt;It seems like AI is really good at appearing correct at a glance. It&amp;rsquo;s almost
like it&amp;rsquo;s being trained by humans that are just skimming the results.&lt;/p&gt;</content:encoded></item><item><title>Repo blog</title><link>https://anaminus.github.io/blog/briefs/202211230944/</link><pubDate>Wed, 23 Nov 2022 09:44:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211230944/</guid><content:encoded>&lt;p&gt;For future reference, my blog is just a git repo, so any changes will be visible
at &lt;a href="https://github.com/Anaminus/blog"&gt;https://github.com/Anaminus/blog&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Unordered RBXL</title><link>https://anaminus.github.io/blog/briefs/202211211053/</link><pubDate>Mon, 21 Nov 2022 10:53:09 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211211053/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;ve been thinking about an implementation of the binary rbxl format where
chunks can decode in any order, and empty space is allowed between chunks, which
would enable efficient partial modifications to files.&lt;/p&gt;</content:encoded></item><item><title>Social engagement</title><link>https://anaminus.github.io/blog/briefs/202211201352/</link><pubDate>Sun, 20 Nov 2022 13:52:21 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211201352/</guid><content:encoded>&lt;p&gt;I have reservations about using retweets/boosts/likes/favorites, but Mastodon
seems to be less psychotic about them, so I might use them more there.&lt;/p&gt;</content:encoded></item><item><title>Software design</title><link>https://anaminus.github.io/blog/briefs/202211142003/</link><pubDate>Mon, 14 Nov 2022 20:03:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211142003/</guid><content:encoded>&lt;p&gt;When a software&amp;rsquo;s design is poorly understood, the only thing users have to go
off of is whatever they&amp;rsquo;re allowed to do.&lt;/p&gt;</content:encoded></item><item><title>Maid pattern</title><link>https://anaminus.github.io/blog/briefs/202211141900/</link><pubDate>Mon, 14 Nov 2022 19:00:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211141900/</guid><content:encoded>&lt;p&gt;Janitor/Maid/etc are different conveniences built on the same core principal:
finalization is established near initialization. I continue to assert that maid
is a pattern, so the best solution is to either roll your own, or pick whatever
best suits your needs.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my implementation, which represents my current theory on the matter:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/Maid"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/Maid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As for memory leaks, no library will save you from having the wrong mindset
about memory management. Maids and Janitors are just one of the many possible
answers to &amp;ldquo;What am I going to do about this thing I just created once I no
longer need it?&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Case convention</title><link>https://anaminus.github.io/blog/briefs/202211140846/</link><pubDate>Mon, 14 Nov 2022 08:46:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211140846/</guid><content:encoded>&lt;p&gt;I normally do PascalCase for public, and camelCase for private. But since
Roblox&amp;rsquo;s convention for modules is module.camelCase, I match that instead. So
the difference becomes unexportedFunction vs module.exportedFunction, and
PascalCase just isn&amp;rsquo;t used for top-level functions.&lt;/p&gt;</content:encoded></item><item><title>Blender multi-tool</title><link>https://anaminus.github.io/blog/briefs/202211112220/</link><pubDate>Fri, 11 Nov 2022 22:20:49 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211112220/</guid><content:encoded>&lt;p&gt;Lately I&amp;rsquo;ve found that Blender has been making up for shortcomings with other
software that have nothing to do with modeling.&lt;/p&gt;</content:encoded></item><item><title>Dead project</title><link>https://anaminus.github.io/blog/briefs/202211080648/</link><pubDate>Tue, 08 Nov 2022 06:48:29 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211080648/</guid><content:encoded>&lt;p&gt;A perfectly correct but dead project is better than a mostly correct but living
project only if the project is already completely finished.&lt;/p&gt;</content:encoded></item><item><title>Little brain</title><link>https://anaminus.github.io/blog/briefs/202211071031/</link><pubDate>Mon, 07 Nov 2022 10:31:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211071031/</guid><content:encoded>&lt;p&gt;So much software to write, so little brain to write them.&lt;/p&gt;</content:encoded></item><item><title>Parody</title><link>https://anaminus.github.io/blog/briefs/202211062016/</link><pubDate>Sun, 06 Nov 2022 20:16:46 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211062016/</guid><content:encoded>&lt;p&gt;parody? parodeez nutz&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The author would like to formally apologize to his friends, family, and
followers for having posted this.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>Immediate mode</title><link>https://anaminus.github.io/blog/briefs/202211021020/</link><pubDate>Wed, 02 Nov 2022 10:20:02 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211021020/</guid><content:encoded>&lt;p&gt;Why do we use immediate mode libraries on top of retained mode APIs on top of
immediate mode graphics?&lt;/p&gt;</content:encoded></item><item><title>Roact</title><link>https://anaminus.github.io/blog/briefs/202211021007/</link><pubDate>Wed, 02 Nov 2022 10:07:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211021007/</guid><content:encoded>&lt;p&gt;my favorite part of roact is how you can instantly tell when it&amp;rsquo;s being used by
the complete lack of keyboard support and the general feeling of sluggishness&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202211021007/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;It would run much better with a proper component implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, but it wasn&amp;rsquo;t done that way. Why not? Maybe it&amp;rsquo;s because Roact makes
it easy to do the wrong thing. Or hard to do the right thing. Or both.&lt;/p&gt;</content:encoded></item><item><title>Transpiling</title><link>https://anaminus.github.io/blog/briefs/202211012140/</link><pubDate>Tue, 01 Nov 2022 21:40:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211012140/</guid><content:encoded>&lt;p&gt;My beef with transpiling is writing in one language and receiving errors in
another language. Or worse, having to mentally map one to the other while
stepping through a debugger. It&amp;rsquo;s not worth it if the productivity gained during
writing is lost during debugging.&lt;/p&gt;</content:encoded></item><item><title>Module packages</title><link>https://anaminus.github.io/blog/briefs/202211012005/</link><pubDate>Tue, 01 Nov 2022 20:05:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211012005/</guid><content:encoded>&lt;p&gt;I feel like a problem with modules is that a module&amp;rsquo;s namespace can&amp;rsquo;t be divided
further than one ModuleScript. It would be nice if there were some kind of
Package object, where all child ModuleScripts shared the same environment.&lt;/p&gt;</content:encoded></item><item><title>Binstruct rewrite</title><link>https://anaminus.github.io/blog/briefs/202210301223/</link><pubDate>Sun, 30 Oct 2022 12:23:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210301223/</guid><content:encoded>&lt;p&gt;Rewriting Binstruct to be more ergonomic. Also added support for recursive type
definitions, which is implemented in the VM as subroutines. Continues to be my
favorite module to write.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/00.png" width="1200" height="831" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Rewrote Binstruct&amp;rsquo;s union type to work like an if statement. Here&amp;rsquo;s what parsing
a value for serialized attributes looks like.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/01.png" width="1200" height="759" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Because type definitions in Binstruct are just tables, it&amp;rsquo;s really easy to
create abstractions to make defining types more ergonomic. This is an example of
a builder that allows advanced functions to be added to a definition more
easily.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/02.png" width="542" height="497" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;The builder in action. The decode/encode functions convert between a finalized
value and an intermediate representation that is more easily digested by the
codec, though this representation is often useful enough on its own.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/03.png" width="702" height="409" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;All good data formats have a version number. Here&amp;rsquo;s a constructor that applies
versioning to any type. It uses a union to match a version to one of a number of
types. The version is also available as a &amp;ldquo;global&amp;rdquo;, allowing the value to be
inspected from anywhere in the structure.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/04.png" width="822" height="479" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Type smuggling</title><link>https://anaminus.github.io/blog/briefs/202210261007/</link><pubDate>Wed, 26 Oct 2022 10:07:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210261007/</guid><content:encoded>&lt;p&gt;Type smuggling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(...))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Allows you to get types from a module without requiring it. Does not work with
exported types.&lt;/p&gt;
&lt;p&gt;To get around exporting, types can be smuggled through the returned table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Innocent module stuff.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;export&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Some types. Must require&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- the module in order to get.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Smuggle them through&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- the returned table.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export._Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export._Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;This is incredibly useful for smuggling types from a server module in a client
module so the data the client is going to receive from the server via a remote
can be fully typed.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/fewkz/status/1590230560764760065"&gt;@fewkz, 6:31 AM · Nov 9, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So nothing breaks on the client even though the modules containing the server
types aren’t replicated, because types don’t matter at runtime. Interesting
approach.&lt;/p&gt;</content:encoded></item><item><title>Fusion predicates</title><link>https://anaminus.github.io/blog/briefs/202210171302/</link><pubDate>Mon, 17 Oct 2022 13:02:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210171302/</guid><content:encoded>&lt;p&gt;I was thinking of a Fusion-like way to select children based on a predicate
function.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210171302/00.png" width="632" height="357" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;More tasteful syntax:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210171302/01.png" width="621" height="279" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Rx</title><link>https://anaminus.github.io/blog/briefs/202210162211/</link><pubDate>Sun, 16 Oct 2022 22:11:37 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210162211/</guid><content:encoded>&lt;p&gt;Ripped a standalone version of @Quenty&amp;rsquo;s Rx module out of Nevermore. Looks very
very promising.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202210162211/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Interfacing with Fusion&amp;rsquo;s Value objects is really easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;Rxf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fusion.Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Rx.Observer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Rx.observer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Rx.Subscriber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Maid.Task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fusion.Observer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;			&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;How&amp;rsquo;s performance? I&amp;rsquo;ve been looking to write a version of what you&amp;rsquo;re writing
here for a while, but query performance seems scary.&lt;/p&gt;
&lt;p&gt;Using RxInstanceUtils for now, but this is looking a lot cleaner.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/Quenty/status/1582087487610302464"&gt;@Quenty, 7:13 PM · Oct 17, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I haven&amp;rsquo;t deliberately optimized anything, but it&amp;rsquo;s not the worst. I might be
comfortable with one query that updates every frame, for example. It&amp;rsquo;s a mess,
but you can &lt;a href="https://gist.github.com/Anaminus/1f31af4e5280b9333f3f58e13840c670"&gt;play with it here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hey wait a minute, arent you not a fan of observing any kind of behavior on
instances that enter the data model?&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/Kampfkarren/status/1582087755311349760"&gt;@Kampfkarren, 7:14 PM · Oct 17, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s right. Which is why Rx is great, because it simplifies a bunch of
boilerplate that would otherwise be need to ensure that an observation is
correct.&lt;/p&gt;</content:encoded></item><item><title>Metatables suck</title><link>https://anaminus.github.io/blog/briefs/202210160957/</link><pubDate>Sun, 16 Oct 2022 09:57:29 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210160957/</guid><content:encoded>&lt;p&gt;&lt;em&gt;In response to &lt;a href="https://elttob.medium.com/metatables-suck-473f1fe5afc2"&gt;Metatables suck.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metatables:&lt;/strong&gt; I use metatables to signal the separation of data and behavior.
Data goes in the table, behavior goes in the metatable. Great for debugging; the
debugger isn&amp;rsquo;t cluttered with a bunch of methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; I don&amp;rsquo;t actually want true encapsulation, because it&amp;rsquo;s harder
to debug. Unlike local variables, private fields can be tapped into, and I don&amp;rsquo;t
have to hunt them down in the debugger. Also makes writing tests easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overloading:&lt;/strong&gt; I agree in principal, but in practice, sometimes the
convenience is too much to pass up. To reconcile this, I always accompany a
non-obvious metamethod behavior with an equivalent method.&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s worth noting that metamethods are harder to debug, because they don&amp;rsquo;t
allow yielding, so you can&amp;rsquo;t set breakpoints in them. That&amp;rsquo;s why it&amp;rsquo;s good to
have a regular method-based equivalent.&lt;/p&gt;</content:encoded></item><item><title>For the Roblox iceberg</title><link>https://anaminus.github.io/blog/briefs/202210141109/</link><pubDate>Fri, 14 Oct 2022 11:09:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210141109/</guid><content:encoded>&lt;p&gt;In no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lens flares&lt;/li&gt;
&lt;li&gt;lowercase archivable property&lt;/li&gt;
&lt;li&gt;hidden attribute types&lt;/li&gt;
&lt;li&gt;data transfer over physics&lt;/li&gt;
&lt;li&gt;Instance.Lock/Unlock&lt;/li&gt;
&lt;li&gt;/sc == ROOT&lt;/li&gt;
&lt;li&gt;DebugId can overflow&lt;/li&gt;
&lt;li&gt;UniqueId epoch&lt;/li&gt;
&lt;li&gt;roblox.xsd&lt;/li&gt;
&lt;li&gt;&amp;lt;External&amp;gt; tag&lt;/li&gt;
&lt;li&gt;true purpose of Geometry service&lt;/li&gt;
&lt;li&gt;preliminary status&lt;/li&gt;
&lt;li&gt;preprocessor syntax&lt;/li&gt;
&lt;li&gt;editable object browser summaries&lt;/li&gt;
&lt;li&gt;GC only collects instance&amp;rsquo;s userdata&lt;/li&gt;
&lt;li&gt;comic sans ui&lt;/li&gt;
&lt;li&gt;runaway wait() throttling&lt;/li&gt;
&lt;li&gt;property names can have any character&lt;/li&gt;
&lt;li&gt;userdata keys in global environment&lt;/li&gt;
&lt;li&gt;undead Authoring class&lt;/li&gt;
&lt;li&gt;fast child removal&lt;/li&gt;
&lt;li&gt;GuiText&lt;/li&gt;
&lt;li&gt;GuiMain&lt;/li&gt;
&lt;li&gt;GuiRoot/GuiItem&lt;/li&gt;
&lt;li&gt;LoadingGui&lt;/li&gt;
&lt;li&gt;PlayerHUD&lt;/li&gt;
&lt;li&gt;PseudoPlayer&lt;/li&gt;
&lt;li&gt;ParallelRampPart&lt;/li&gt;
&lt;li&gt;PrisimPart&lt;/li&gt;
&lt;li&gt;PyramidPart&lt;/li&gt;
&lt;li&gt;RightAngleRampPart&lt;/li&gt;
&lt;li&gt;QDir/QFont types&lt;/li&gt;
&lt;li&gt;SystemAddress type&lt;/li&gt;
&lt;li&gt;__gc attack vector&lt;/li&gt;
&lt;li&gt;string.rep attack vector&lt;/li&gt;
&lt;li&gt;debug.loadmodule&lt;/li&gt;
&lt;li&gt;gameserver.ashx&lt;/li&gt;
&lt;li&gt;DeployHistory.txt&lt;/li&gt;
&lt;li&gt;WritePlayerSecurity&lt;/li&gt;
&lt;li&gt;BasePart.siz&lt;/li&gt;
&lt;li&gt;DraggingV1&lt;/li&gt;
&lt;li&gt;MouseButton1DownConnectionCount&lt;/li&gt;
&lt;li&gt;.mesh girl&lt;/li&gt;
&lt;li&gt;application/x-roblox-studio&lt;/li&gt;
&lt;li&gt;loadfile security context&lt;/li&gt;
&lt;li&gt;bytecode environment injection&lt;/li&gt;
&lt;li&gt;connectFirst/connectLast&lt;/li&gt;
&lt;li&gt;studio verbs&lt;/li&gt;
&lt;li&gt;TextBox.Confidential&lt;/li&gt;
&lt;li&gt;OverrideCoreScripts&lt;/li&gt;
&lt;li&gt;DefaultWaitTime&lt;/li&gt;
&lt;li&gt;ypcall&lt;/li&gt;
&lt;li&gt;NaN FoV void&lt;/li&gt;
&lt;li&gt;self-returning modules leak&lt;/li&gt;
&lt;li&gt;DataModel.Loaded conflict&lt;/li&gt;
&lt;li&gt;overloaded ScriptContext.AddCoreScript&lt;/li&gt;
&lt;li&gt;extra KeyCode.KeypadEquals enum items&lt;/li&gt;
&lt;li&gt;second CameraMode enum&lt;/li&gt;
&lt;li&gt;second Pages class&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Property&amp;rdquo; type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;preprocessor syntax:&lt;/strong&gt; In older versions of studio, having a &lt;code&gt;$&lt;/code&gt; at the start
of a script would highlight the first line in red. Later, when custom highlight
colors were added, this was referenced with the &lt;a href="https://robloxapi.github.io/ref/class/Studio.html#member-Preprocessor%20Color"&gt;Preprocessor Color&lt;/a&gt;
property, even though it was unused.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;self-returning modules leak:&lt;/strong&gt; If a module returns a value that contains a
reference to the module (&lt;code&gt;return script&lt;/code&gt;, return &lt;code&gt;{script}&lt;/code&gt;, etc), then it will
never be GC&amp;rsquo;d.&lt;/p&gt;</content:encoded></item><item><title>New game metrics</title><link>https://anaminus.github.io/blog/briefs/202210122320/</link><pubDate>Wed, 12 Oct 2022 23:20:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210122320/</guid><content:encoded>&lt;p&gt;How poorly do metrics have to be misinterpreted to reach the conclusion that a
developer is creating an entire new game from scratch every single time they
open the baseplate?&lt;/p&gt;</content:encoded></item><item><title>Not invented here</title><link>https://anaminus.github.io/blog/briefs/202210111600/</link><pubDate>Tue, 11 Oct 2022 16:00:58 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210111600/</guid><content:encoded>&lt;p&gt;Today on roblox dev: everyone learns the difference between inventions and
discoveries.&lt;/p&gt;</content:encoded></item><item><title>Cancelable delays</title><link>https://anaminus.github.io/blog/briefs/202210111423/</link><pubDate>Tue, 11 Oct 2022 14:23:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210111423/</guid><content:encoded>&lt;p&gt;Protip: &lt;code&gt;task.delay&lt;/code&gt; returns the delayed thread, making cancelable delays
trivial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task.delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Hi!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;task.wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;task.cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Maid connect</title><link>https://anaminus.github.io/blog/briefs/202210111420/</link><pubDate>Tue, 11 Oct 2022 14:20:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210111420/</guid><content:encoded>&lt;p&gt;Justifying a Connect method on maids.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Regular method.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;maid.heartbeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RunService.Heartbeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;delta time&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Method if your name is Max.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid.heartbeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;RunService.Heartbeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;delta time&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Connect method.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;heartbeat&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RunService.Heartbeat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;delta time&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Maintenance</title><link>https://anaminus.github.io/blog/briefs/202210110949/</link><pubDate>Tue, 11 Oct 2022 09:49:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210110949/</guid><content:encoded>&lt;p&gt;If you maintain a popular project, and you&amp;rsquo;re going on hiatus, are too busy, or
just don&amp;rsquo;t feel like maintaining it right now/anymore, please let your users
know.&lt;/p&gt;</content:encoded></item><item><title>Marketing</title><link>https://anaminus.github.io/blog/briefs/202210080800/</link><pubDate>Sat, 08 Oct 2022 08:00:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210080800/</guid><content:encoded>&lt;p&gt;Getting annoyed by projects that market themselves like they&amp;rsquo;re ready but don&amp;rsquo;t
even have basic documentation.&lt;/p&gt;</content:encoded></item><item><title>Reservations</title><link>https://anaminus.github.io/blog/briefs/202210061512/</link><pubDate>Thu, 06 Oct 2022 15:12:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210061512/</guid><content:encoded>&lt;p&gt;Discord, Snapchat, Instagram: We&amp;rsquo;re sorry, all of our lawsuit reservations have
been filled.&lt;/p&gt;</content:encoded></item><item><title>Biometrics</title><link>https://anaminus.github.io/blog/briefs/202210041720/</link><pubDate>Tue, 04 Oct 2022 17:20:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210041720/</guid><content:encoded>&lt;p&gt;Fingerprint scanning is literally leaving your password, which you can never
change, on everything you have ever touched, or will ever touch. And don&amp;rsquo;t
forget about all those pictures that incidentally contain your fingers in
immaculate detail.&lt;/p&gt;</content:encoded></item><item><title>Foliage</title><link>https://anaminus.github.io/blog/briefs/202209292251/</link><pubDate>Thu, 29 Sep 2022 22:51:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209292251/</guid><content:encoded>&lt;p&gt;Playing with foliage. Here we have the same texture, triangle count, and
triangle size, but different scaling of the base shape, which is a sphere in
this case. Unfortunately, it&amp;rsquo;s hard to get something that looks good without
fine-tuning each of these parameters.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202209292251/00.jpg" width="1200" height="675" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>If-expression</title><link>https://anaminus.github.io/blog/briefs/202209271828/</link><pubDate>Tue, 27 Sep 2022 18:28:58 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209271828/</guid><content:encoded>&lt;p&gt;An if-expression that is too long to be one-lined should just be an
if-statement.&lt;/p&gt;</content:encoded></item><item><title>Probably</title><link>https://anaminus.github.io/blog/briefs/202209260940/</link><pubDate>Mon, 26 Sep 2022 09:40:12 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209260940/</guid><content:encoded>&lt;p&gt;&lt;strong&gt;Probably&lt;/strong&gt;, a Roblox Studio plugin for displaying the probability
distributions of functions, is now available!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/1996506"&gt;https://devforum.roblox.com/t/1996506&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Cartridge</title><link>https://anaminus.github.io/blog/briefs/202209240907/</link><pubDate>Sat, 24 Sep 2022 09:07:49 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209240907/</guid><content:encoded>&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202209240907/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Universal</title><link>https://anaminus.github.io/blog/briefs/202209182217/</link><pubDate>Sun, 18 Sep 2022 22:17:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209182217/</guid><content:encoded>&lt;p&gt;Fun fact: You can plug a keyboard into your TV&amp;rsquo;s USB port.&lt;/p&gt;</content:encoded></item><item><title>Plugin UX</title><link>https://anaminus.github.io/blog/briefs/202209172306/</link><pubDate>Sat, 17 Sep 2022 23:06:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209172306/</guid><content:encoded>&lt;p&gt;Plugin development should share the same UX as games. Specifically asset
management.&lt;/p&gt;</content:encoded></item><item><title>Creation</title><link>https://anaminus.github.io/blog/briefs/202209172049/</link><pubDate>Sat, 17 Sep 2022 20:49:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209172049/</guid><content:encoded>&lt;p&gt;&amp;gt;&amp;ldquo;creator&amp;rdquo; dashboard&lt;/p&gt;
&lt;p&gt;&amp;gt;can&amp;rsquo;t create assets&lt;/p&gt;</content:encoded></item><item><title>Icons</title><link>https://anaminus.github.io/blog/briefs/202209161714/</link><pubDate>Fri, 16 Sep 2022 17:14:28 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209161714/</guid><content:encoded>&lt;p&gt;When you don&amp;rsquo;t feel like uploading icons.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202209161714/00.jpg" width="949" height="720" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Plugin windows</title><link>https://anaminus.github.io/blog/briefs/202209151701/</link><pubDate>Thu, 15 Sep 2022 17:01:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209151701/</guid><content:encoded>&lt;p&gt;UI refresh allows plugin windows to be docked to the center area. +10000 points.&lt;/p&gt;</content:encoded></item><item><title>Plugin dock positions</title><link>https://anaminus.github.io/blog/briefs/202209151658/</link><pubDate>Thu, 15 Sep 2022 16:58:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209151658/</guid><content:encoded>&lt;p&gt;Last update fixed problems with studio forgetting plugin dock positions. UI
refresh is 100% better now.&lt;/p&gt;</content:encoded></item><item><title>Probability plugin</title><link>https://anaminus.github.io/blog/briefs/202209142100/</link><pubDate>Wed, 14 Sep 2022 21:00:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209142100/</guid><content:encoded>&lt;p&gt;Plugin that displays probability curves of functions.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202209142100/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Improvements.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202209142100/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Go DSP</title><link>https://anaminus.github.io/blog/briefs/202209031653/</link><pubDate>Sat, 03 Sep 2022 16:53:59 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209031653/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; Go has some performance hurdles that make it unsuitable for many real-time
or time-critical applications, for example having a garbage collector. I would
definitely not want to use Go for something like audiovisual processing or
DSP.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/dphfox/status/1566154764571779072"&gt;@dphfox, 8:02 PM · Sep 3, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/andrepxx/go-dsp-guitar/blob/master/doc/performance.md#analysis-of-go-dsp-guitar-real-time-performance"&gt;An analysis of a DSP written in Go.&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Gamejam</title><link>https://anaminus.github.io/blog/briefs/202208281404/</link><pubDate>Sun, 28 Aug 2022 14:04:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208281404/</guid><content:encoded>&lt;p&gt;Not at RDC, but I thought I&amp;rsquo;d gamejam anyway. Didn&amp;rsquo;t finish, but I still had
fun. Here&amp;rsquo;s what would have been the thumbnail:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202208281404/00.jpg" width="1024" height="1024" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;If you&amp;rsquo;re going to solojam, try to use existing assets as much as possible. I
modeled the car, sun, and skybox from scratch, which was fun to do, but sunk way
too much time.&lt;/p&gt;</content:encoded></item><item><title>Growth</title><link>https://anaminus.github.io/blog/briefs/202208221506/</link><pubDate>Mon, 22 Aug 2022 15:06:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208221506/</guid><content:encoded>&lt;p&gt;Copilot inhibits growth.&lt;/p&gt;</content:encoded></item><item><title>Studio cookies</title><link>https://anaminus.github.io/blog/briefs/202208171639/</link><pubDate>Wed, 17 Aug 2022 16:39:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208171639/</guid><content:encoded>&lt;p&gt;If you have tooling that makes use of Studio&amp;rsquo;s cookies, Roblox recently changed
how they work in Windows. Cookies are no longer stored in the registry, and are
instead stored as Credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Studio stores the &lt;code&gt;https://www.roblox.com:RobloxStudioAuthCookies&lt;/code&gt; credential.&lt;/li&gt;
&lt;li&gt;Its value is a &lt;code&gt;;&lt;/code&gt; separated list of cookie names (rather, each name has a &lt;code&gt;;&lt;/code&gt;
appended, note the trailing &lt;code&gt;;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The value of each cookie is stored as a credential named
&lt;code&gt;https://www.roblox.com:RobloxStudioAuth&lt;/code&gt; + the cookie name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tooling will still be able to access these cookies just fine. There&amp;rsquo;s a winapi
for it, so most languages will likely have a library for it. I listed some in
another tweet.&lt;/p&gt;
&lt;p&gt;Relevant libraries for some random languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust: &lt;a href="https://crates.io/crates/wincredentials"&gt;https://crates.io/crates/wincredentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go: &lt;a href="https://github.com/danieljoos/wincred"&gt;https://github.com/danieljoos/wincred&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Archivable</title><link>https://anaminus.github.io/blog/briefs/202208171044/</link><pubDate>Wed, 17 Aug 2022 10:44:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208171044/</guid><content:encoded>&lt;p&gt;Boring Facts: The lowercase &amp;ldquo;archivable&amp;rdquo; property can be used within a model or
place file to load an instance with Archivable set to false.&lt;/p&gt;</content:encoded></item><item><title>Ice cream</title><link>https://anaminus.github.io/blog/briefs/202208112219/</link><pubDate>Thu, 11 Aug 2022 22:19:09 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208112219/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Your cashier gives you three dimes and a nickel as your change. Do you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put it in the tip jar&lt;/li&gt;
&lt;li&gt;Put it in the charity bin&lt;/li&gt;
&lt;li&gt;Put it in a locked safe because it&amp;rsquo;s so much money you can&amp;rsquo;t imagine
spending it even on something you use every day&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/BoatbomberRBLX/status/1557918024299991045"&gt;@BoatbomberRBLX, 2:32 AM · Aug 12, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;??? it goes in the paper cup where it is eventually used to extract exact change
when buying ice cream at the drive thru&lt;/p&gt;
&lt;p&gt;More accurately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buy plugin&lt;/li&gt;
&lt;li&gt;It turns out to be shit&lt;/li&gt;
&lt;li&gt;Could have been ice cream&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title>Passive voice</title><link>https://anaminus.github.io/blog/briefs/202208100252/</link><pubDate>Wed, 10 Aug 2022 02:52:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208100252/</guid><content:encoded>&lt;p&gt;I use passive voice for references for a formal and well-defined feeling, and
active voice for guides/tutorials to feel more loose and relaxed. Strikes a good
balance.&lt;/p&gt;</content:encoded></item><item><title>DUEH</title><link>https://anaminus.github.io/blog/briefs/202207262001/</link><pubDate>Tue, 26 Jul 2022 20:01:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207262001/</guid><content:encoded>&lt;p&gt;&lt;em&gt;DUEHs quietly so as not to wake mom and dad&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>DUEH</title><link>https://anaminus.github.io/blog/briefs/202207261956/</link><pubDate>Tue, 26 Jul 2022 19:56:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207261956/</guid><content:encoded>&lt;p&gt;DUEH&lt;/p&gt;</content:encoded></item><item><title>Simplex noise</title><link>https://anaminus.github.io/blog/briefs/202207111731/</link><pubDate>Mon, 11 Jul 2022 17:31:43 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207111731/</guid><content:encoded>&lt;p&gt;The patent for Simplex noise has expired.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/Simplex"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/Simplex&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Grass</title><link>https://anaminus.github.io/blog/briefs/202207111221/</link><pubDate>Mon, 11 Jul 2022 12:21:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207111221/</guid><content:encoded>&lt;p&gt;Physically simulated grass.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Single triangle rigged with two bones. Lower bone is attached to a colliding
part via BallSocket. Upper bone has a VectorForce to keep the whole thing
upright, and an AngularVelocity to introduce some instability that simulates
wind.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Some translucency can be simulated by rotating the upper bone by 180 degrees,
which also rotates the normal of the top vertex.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/02.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;One MeshPart can be rigged to fit up to 128 grass units, whereas Beams would
have to be 1:1. But in terms of visuals, Beams have much more to offer than
Decals.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/03.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;A texture can be used, but artifacts occur on the upper edge because the texture
wraps around and repeats.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/04.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;you can get around this using the TextureLength property&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/ChrythmDev/status/1547708323180343296"&gt;@ChrythmDev, 10:23 PM · Jul 14, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I guess that works, but the texture has to be upside down.&lt;/p&gt;
&lt;p&gt;On whether using beams is practical: disregarding physics, most of the time goes
into updating beam logic. Actual rendering is sub-optimal, but it isn&amp;rsquo;t the
bottleneck. Not sure what causes LOD cutoff (it&amp;rsquo;s not affected by graphics
settings). Might be a memory thing.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202207111221/05.jpg" width="1200" height="675" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Snippets</title><link>https://anaminus.github.io/blog/briefs/202207101056/</link><pubDate>Sun, 10 Jul 2022 10:56:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207101056/</guid><content:encoded>&lt;p&gt;Sublime snippets are amazing.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207101056/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Rigging</title><link>https://anaminus.github.io/blog/briefs/202207081638/</link><pubDate>Fri, 08 Jul 2022 16:38:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207081638/</guid><content:encoded>&lt;p&gt;I rigged a mesh that has 85 completely independent triangles. Used it for
efficiently generating light rays:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.roblox.com/library/9287415204"&gt;https://www.roblox.com/library/9287415204&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also rigged one for 256 independent squares:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.roblox.com/library/9288565775"&gt;https://www.roblox.com/library/9288565775&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>RemoteEvents</title><link>https://anaminus.github.io/blog/briefs/202207081127/</link><pubDate>Fri, 08 Jul 2022 11:27:36 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207081127/</guid><content:encoded>&lt;p&gt;RemoteEvents will happily receive a giant dictionary from the client, happily
deserialize it, and happily reflect it to Lua. This seems like it would be bad,
but in practice, the client gets disconnected before it has a chance to send
concerning amounts of data.&lt;/p&gt;</content:encoded></item><item><title>NaN preservation</title><link>https://anaminus.github.io/blog/briefs/202207081124/</link><pubDate>Fri, 08 Jul 2022 11:24:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207081124/</guid><content:encoded>&lt;p&gt;Boring Facts: Roblox preserves NaN values across network boundaries.&lt;/p&gt;</content:encoded></item><item><title>MeshID</title><link>https://anaminus.github.io/blog/briefs/202207051712/</link><pubDate>Tue, 05 Jul 2022 17:12:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207051712/</guid><content:encoded>&lt;p&gt;Roblox serizes both the &lt;code&gt;MeshID&lt;/code&gt; and &lt;code&gt;MeshId&lt;/code&gt; properties.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;Content&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;MeshID&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;null&amp;gt;&amp;lt;/null&amp;gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;Content&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;MeshId&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;null&amp;gt;&amp;lt;/null&amp;gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both have CanLoad and CanSave set. Does studio just let one override the other?
Answer: Yes. The property that appears after overrides the one that appears
before.&lt;/p&gt;</content:encoded></item><item><title>Game engine</title><link>https://anaminus.github.io/blog/briefs/202206291540/</link><pubDate>Wed, 29 Jun 2022 15:40:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206291540/</guid><content:encoded>&lt;p&gt;&amp;ldquo;I think I&amp;rsquo;ll just write my own game engine. It will be easy.&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Particle grass</title><link>https://anaminus.github.io/blog/briefs/202206291048/</link><pubDate>Wed, 29 Jun 2022 10:48:24 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206291048/</guid><content:encoded>&lt;p&gt;Infeasible particle grass.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202206291048/00.jpg" width="1097" height="630" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Unreliable physics</title><link>https://anaminus.github.io/blog/briefs/202206261949/</link><pubDate>Sun, 26 Jun 2022 19:49:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206261949/</guid><content:encoded>&lt;p&gt;Stupid idea: send/receive unreliable data by encoding it in physics.&lt;/p&gt;</content:encoded></item><item><title>Ownership problem</title><link>https://anaminus.github.io/blog/briefs/202206250031/</link><pubDate>Sat, 25 Jun 2022 00:31:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206250031/</guid><content:encoded>&lt;p&gt;The Ownership Problem: A vaguely formed idea involving the fact that instances
in the game tree can be accessed by anything at any time. If I knew what I was
talking about, I&amp;rsquo;d write a post about it.&lt;/p&gt;</content:encoded></item><item><title>Game software</title><link>https://anaminus.github.io/blog/briefs/202206250027/</link><pubDate>Sat, 25 Jun 2022 00:27:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206250027/</guid><content:encoded>&lt;p&gt;Making games has less problems than making software. If you treat games like
software, you&amp;rsquo;re creating more problems.&lt;/p&gt;</content:encoded></item><item><title>Source of truth</title><link>https://anaminus.github.io/blog/briefs/202206200809/</link><pubDate>Mon, 20 Jun 2022 08:09:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206200809/</guid><content:encoded>&lt;p&gt;The DataModel as the single source of truth is an awful one, because the engine
calls all the shots, while scripts are second-class.&lt;/p&gt;
&lt;p&gt;Because the engine can be made to do nothing by default, I get around this by
conceptualizing my collective codebase as a server, with the data model as a
client. This does create two sources of truth, but the data model is usually a
good little client that behaves as it should.&lt;/p&gt;
&lt;p&gt;A consequence is that this &amp;ldquo;server&amp;rdquo; must be considered as a whole, so libraries
must be made compatible with this model. But this is fine, because any 3rd-party
library is already going to be incompatible in some way no matter what.&lt;/p&gt;
&lt;p&gt;Assuming Roact doesn&amp;rsquo;t expose its own source of truth to be incorporated into
the &amp;ldquo;server&amp;rdquo;, it could just be treated as another &amp;ldquo;client&amp;rdquo; instead.&lt;/p&gt;</content:encoded></item><item><title>Landscaping rocks</title><link>https://anaminus.github.io/blog/briefs/202206181244/</link><pubDate>Sat, 18 Jun 2022 12:44:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206181244/</guid><content:encoded>&lt;p&gt;If you bought a brand new house in a developing neighborhood, and you want free
rocks for landscaping, start digging them out now. Search around your
neighborhood while it isn&amp;rsquo;t filled in, too.&lt;/p&gt;</content:encoded></item><item><title>Physical URL</title><link>https://anaminus.github.io/blog/briefs/202206121318/</link><pubDate>Sun, 12 Jun 2022 13:18:09 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206121318/</guid><content:encoded>&lt;p&gt;URL Present in Physical Book Tragically Broken by Word Wrapping&lt;/p&gt;</content:encoded></item><item><title>UpdateAsync</title><link>https://anaminus.github.io/blog/briefs/202205291414/</link><pubDate>Sun, 29 May 2022 14:14:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205291414/</guid><content:encoded>&lt;p&gt;If UpdateAsync calls the update function again, the result of the previous call
is discarded.&lt;/p&gt;
&lt;p&gt;Because this is so simple to understand, the docs choose to not mention it
anywhere. The result for me is years of UpdateAsync never quite clicking. One
tiny sentence is all it takes.&lt;/p&gt;</content:encoded></item><item><title>DRY</title><link>https://anaminus.github.io/blog/briefs/202205271613/</link><pubDate>Fri, 27 May 2022 16:13:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205271613/</guid><content:encoded>&lt;p&gt;Keyword of Don&amp;rsquo;t Repeat Yourself is &amp;ldquo;Yourself&amp;rdquo;. Just because libraries have been
written for trivial things doesn&amp;rsquo;t mean you should use any of them.&lt;/p&gt;
&lt;p&gt;Most of these kinds of libraries are, at most, collections of snippets. They are
short, complete, and are not worth an entire dependency. Just inline it.&lt;/p&gt;</content:encoded></item><item><title>Duality</title><link>https://anaminus.github.io/blog/briefs/202205262153/</link><pubDate>Thu, 26 May 2022 21:53:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205262153/</guid><content:encoded>&lt;p&gt;Sometimes you feel like spewing out a prototype, other times you feel like
describing the entire thing in increasingly microscopic detail before any code
is even written.&lt;/p&gt;</content:encoded></item><item><title>Virtual positioning</title><link>https://anaminus.github.io/blog/briefs/202205262146/</link><pubDate>Thu, 26 May 2022 21:46:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205262146/</guid><content:encoded>&lt;p&gt;Thinking of a positioning system based off of the virtual memory technique,
where &amp;ldquo;virtual&amp;rdquo; regions are mapped to &amp;ldquo;physical&amp;rdquo; regions. A physical region is
addressed by place ID, then 3D position, allowing regions to be mapped to a
single place, or spanned across multiple places.&lt;/p&gt;</content:encoded></item><item><title>Surveys</title><link>https://anaminus.github.io/blog/briefs/202205260729/</link><pubDate>Thu, 26 May 2022 07:29:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205260729/</guid><content:encoded>&lt;p&gt;When a survey is paginated, it&amp;rsquo;s probably because of some statistical thing that
involves preventing future questions from influencing current questions.&lt;/p&gt;</content:encoded></item><item><title>Smashed statements</title><link>https://anaminus.github.io/blog/briefs/202205232032/</link><pubDate>Mon, 23 May 2022 20:32:43 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205232032/</guid><content:encoded>&lt;p&gt;This morning I was flipping out over the line &lt;code&gt;*(form++) = '%';&lt;/code&gt; in a C
codebase. Code shouldn&amp;rsquo;t be written this way anymore.&lt;/p&gt;</content:encoded></item><item><title>Premature features</title><link>https://anaminus.github.io/blog/briefs/202205231559/</link><pubDate>Mon, 23 May 2022 15:59:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205231559/</guid><content:encoded>&lt;p&gt;Starting to get annoyed by Luau making features available before they&amp;rsquo;re
complete.&lt;/p&gt;
&lt;p&gt;Incidentally, tagged unions aren&amp;rsquo;t refined by the &lt;code&gt;else&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;really&lt;/em&gt; annoying thing is that the only way to find out a feature is
incomplete is to get halfway through writing something only to have the type
checker start slapping you with errors for things are logically correct.&lt;/p&gt;
&lt;p&gt;If I have a tagged union of &lt;code&gt;A | B&lt;/code&gt;, and &lt;code&gt;if v.type==&amp;quot;A&amp;quot; then&lt;/code&gt; refines to type
A, then logically, &lt;code&gt;else&lt;/code&gt; should refine to type B. Yet I have to find out the
hard way that it doesn&amp;rsquo;t.&lt;/p&gt;</content:encoded></item><item><title>Unreadable</title><link>https://anaminus.github.io/blog/briefs/202205230821/</link><pubDate>Mon, 23 May 2022 08:21:41 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205230821/</guid><content:encoded>&lt;p&gt;If writing optimal code makes it unreadable, then it might as well be written in
assembly.&lt;/p&gt;</content:encoded></item><item><title>Filtering</title><link>https://anaminus.github.io/blog/briefs/202205190932/</link><pubDate>Thu, 19 May 2022 09:32:21 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205190932/</guid><content:encoded>&lt;p&gt;Filtering a list can be done in-place just fine. You wouldn&amp;rsquo;t use an immutable
list because you need to filter it, you&amp;rsquo;d use it because to need to retain the
original along with a filtered copy.&lt;/p&gt;</content:encoded></item><item><title>Dependency constants</title><link>https://anaminus.github.io/blog/briefs/202205122015/</link><pubDate>Thu, 12 May 2022 20:15:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205122015/</guid><content:encoded>&lt;p&gt;Using constants instead of literals in certain cases will reveal dependencies
you didn&amp;rsquo;t know you had.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Bad: literals.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Things&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RegisterThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;things.FooThing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RegisterThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;things.BarThing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Good: constants.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;things&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Things&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RegisterThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;things.Foo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;things.FooThing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;RegisterThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;things.Bar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;things.BarThing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;things.Foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GetThing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;things.Bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>From scratch</title><link>https://anaminus.github.io/blog/briefs/202205081446/</link><pubDate>Sun, 08 May 2022 14:46:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205081446/</guid><content:encoded>&lt;p&gt;Making from scratch isn&amp;rsquo;t as fun. Better to take an existing thing and make it
do something else. My first experience with Roblox Lua was turning a jetpack
into a sword.&lt;/p&gt;</content:encoded></item><item><title>Diagram</title><link>https://anaminus.github.io/blog/briefs/202205012351/</link><pubDate>Sun, 01 May 2022 23:51:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205012351/</guid><content:encoded>&lt;p&gt;Yet another out of context diagram.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202205012351/00.png" width="782" height="421" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Easter eggs</title><link>https://anaminus.github.io/blog/briefs/202204301952/</link><pubDate>Sat, 30 Apr 2022 19:52:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204301952/</guid><content:encoded>&lt;p&gt;Stop making easter eggs just to tell everyone about them. Those aren&amp;rsquo;t easter
eggs.&lt;/p&gt;</content:encoded></item><item><title>rbxmk docs</title><link>https://anaminus.github.io/blog/briefs/202204291258/</link><pubDate>Fri, 29 Apr 2022 12:58:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204291258/</guid><content:encoded>&lt;p&gt;wut he doin&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202204291258/00.png" width="1102" height="649" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>table.unpack vs table.move</title><link>https://anaminus.github.io/blog/briefs/202204290035/</link><pubDate>Fri, 29 Apr 2022 00:35:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204290035/</guid><content:encoded>&lt;p&gt;Which is faster: &lt;code&gt;table.unpack&lt;/code&gt; or &lt;code&gt;table.move?&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;table.unpack&lt;/code&gt; is going to be dumping potentially tons of values onto the stack,
while &lt;code&gt;table.move&lt;/code&gt; can avoid the stack entirely.&lt;/p&gt;</content:encoded></item><item><title>Monkey paw</title><link>https://anaminus.github.io/blog/briefs/202204272223/</link><pubDate>Wed, 27 Apr 2022 22:23:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204272223/</guid><content:encoded>&lt;p&gt;Monkey Paw:&lt;/p&gt;
&lt;p&gt;Devs: Exploits are a big problem.&lt;/p&gt;
&lt;p&gt;Roblox: k DRM time lol&lt;/p&gt;</content:encoded></item><item><title>Bureaucracy</title><link>https://anaminus.github.io/blog/briefs/202204251819/</link><pubDate>Mon, 25 Apr 2022 18:19:56 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204251819/</guid><content:encoded>&lt;p&gt;Nothing like a 10 minute fix blocked by 3 weeks of bureaucracy.&lt;/p&gt;</content:encoded></item><item><title>Dump builds</title><link>https://anaminus.github.io/blog/briefs/202204202134/</link><pubDate>Wed, 20 Apr 2022 21:34:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204202134/</guid><content:encoded>&lt;p&gt;Added builds for rbxfile-dump/dcomp.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/RobloxAPI/rbxfile/releases/tag/v0.5.1"&gt;https://github.com/RobloxAPI/rbxfile/releases/tag/v0.5.1&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Remodel vs rbxmk</title><link>https://anaminus.github.io/blog/briefs/202204152310/</link><pubDate>Fri, 15 Apr 2022 23:10:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204152310/</guid><content:encoded>&lt;p&gt;If you use Remodel and are interested in rbxmk, I wrote a document comparing the
two:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/remodel/README.md"&gt;https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/remodel/README.md&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>rbxmk release</title><link>https://anaminus.github.io/blog/briefs/202204151302/</link><pubDate>Fri, 15 Apr 2022 13:02:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204151302/</guid><content:encoded>&lt;p&gt;rbxmk v0.9.1 is released.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/releases/tag/v0.9.1"&gt;https://github.com/Anaminus/rbxmk/releases/tag/v0.9.1&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Bullshit</title><link>https://anaminus.github.io/blog/briefs/202204111132/</link><pubDate>Mon, 11 Apr 2022 11:32:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204111132/</guid><content:encoded>&lt;p&gt;Refuting bullshit is a full time job.&lt;/p&gt;</content:encoded></item><item><title>Responsive design</title><link>https://anaminus.github.io/blog/briefs/202204082333/</link><pubDate>Fri, 08 Apr 2022 23:33:46 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204082333/</guid><content:encoded>&lt;p&gt;Responsive design is easy! Just start with the smallest possible size, then
scale up to fit the viewport.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202204082333/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Fonts</title><link>https://anaminus.github.io/blog/briefs/202204071821/</link><pubDate>Thu, 07 Apr 2022 18:21:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204071821/</guid><content:encoded>&lt;p&gt;&amp;ldquo;I&amp;rsquo;ll just make my own web-compatible bitmap font. It will be easy.&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Bugception</title><link>https://anaminus.github.io/blog/briefs/202204061459/</link><pubDate>Wed, 06 Apr 2022 14:59:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204061459/</guid><content:encoded>&lt;p&gt;How do I strangle software?&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202204061459/00.png" width="1088" height="304" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Greedy skinned meshes</title><link>https://anaminus.github.io/blog/briefs/202204051312/</link><pubDate>Tue, 05 Apr 2022 13:12:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204051312/</guid><content:encoded>&lt;p&gt;Using skinned meshes instead of parts to reduce the part count for Boatbomber&amp;rsquo;s
&lt;a href="https://github.com/boatbomber/ViewportCanvas"&gt;ViewportCanvas&lt;/a&gt;. Unfortunately, the initial rendering takes way too long to
be feasible.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202204051312/00.jpg" width="1003" height="519" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Table column widths</title><link>https://anaminus.github.io/blog/briefs/202203251427/</link><pubDate>Fri, 25 Mar 2022 14:27:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203251427/</guid><content:encoded>&lt;p&gt;Given an array of integers representing the widths of table columns, here is a
formula that decides in-place whether a column is considered significantly
larger than the others. I use this to decide whether a column should be scaled
down to allow the table to fit a maximum width.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It basically compares the proportion of the current column with the average
proportion of the rest of the table.&lt;/p&gt;
&lt;p&gt;Better formula:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;L&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now I have a decent-looking but crudely-implemented way to render tables in the
terminal.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202203251427/00.png" width="744" height="653" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>rbxl tools</title><link>https://anaminus.github.io/blog/briefs/202203242022/</link><pubDate>Thu, 24 Mar 2022 20:22:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203242022/</guid><content:encoded>&lt;p&gt;If you don&amp;rsquo;t mind compiling them yourself, I have two tools for working with
binary rbxl/rbxm files. The dump tool dumps the contents of a file in a readable
format. The dcomp tool receives a file and outputs the same file with
uncompressed chunks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/RobloxAPI/rbxfile/tree/master/cmd"&gt;https://github.com/RobloxAPI/rbxfile/tree/master/cmd&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Specifications</title><link>https://anaminus.github.io/blog/briefs/202203231453/</link><pubDate>Wed, 23 Mar 2022 14:53:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203231453/</guid><content:encoded>&lt;p&gt;A repository for specifications of Roblox&amp;rsquo;s file formats. Featuring a mostly
complete draft of the rbxl format.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/RobloxAPI/spec"&gt;https://github.com/RobloxAPI/spec&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Unions</title><link>https://anaminus.github.io/blog/briefs/202203231449/</link><pubDate>Wed, 23 Mar 2022 14:49:49 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203231449/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;d love to see how many garbage union assets Studio has uploaded on my behalf.&lt;/p&gt;</content:encoded></item><item><title>Currently typing...</title><link>https://anaminus.github.io/blog/briefs/202203231447/</link><pubDate>Wed, 23 Mar 2022 14:47:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203231447/</guid><content:encoded>&lt;p&gt;Me, who types in a separate editor and pastes the result into chat out of spite
for the &lt;em&gt;typing&lt;/em&gt; status.&lt;/p&gt;</content:encoded></item><item><title>UniqueId</title><link>https://anaminus.github.io/blog/briefs/202203181756/</link><pubDate>Fri, 18 Mar 2022 17:56:42 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203181756/</guid><content:encoded>&lt;p&gt;The format of the UniqueId type for rbxl and rbxlx files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Binary format.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;UniqueId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="c1"&gt;// All big-endian.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;Sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;Timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Zigzag encoded&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Interleaved&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// XML hash&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// [random ][time ][seq ]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 0123456789abcdef0123456789abcdef&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Not zigzag encoded!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>UniqueId sequence</title><link>https://anaminus.github.io/blog/briefs/202203181207/</link><pubDate>Fri, 18 Mar 2022 12:07:38 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203181207/</guid><content:encoded>&lt;p&gt;Boring Facts: UniqueId has one more sequential component that increments every
time an instance is created. If this value manages to overflow, the timestamp
component is updated. To generate a duplicate ID, you would have to produce over
4 billion instances within 1 second.&lt;/p&gt;</content:encoded></item><item><title>GetDebugId</title><link>https://anaminus.github.io/blog/briefs/202203181139/</link><pubDate>Fri, 18 Mar 2022 11:39:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203181139/</guid><content:encoded>&lt;p&gt;Boring Facts: The number returned by GetDebugId is a signed 32-bit integer that
will overflow if more than 2^31 instances have been created.&lt;/p&gt;</content:encoded></item><item><title>UniqueId randomness</title><link>https://anaminus.github.io/blog/briefs/202203180801/</link><pubDate>Fri, 18 Mar 2022 08:01:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203180801/</guid><content:encoded>&lt;p&gt;Boring Facts: The UniqueId type also contains an apparently random sequence of
bytes. However, between serialization in the binary and XML formats, there is a
shift by one bit. &lt;del&gt;It is possible that this is an implementation error.&lt;/del&gt; There
turns out to be no errors. When naively comparing the bytes of the two formats,
they appear to be shifted by one bit. The reason is that, in XML, the random
portion is converted directly to bytes. But in the binary format, zigzag
encoding is used.&lt;/p&gt;</content:encoded></item><item><title>UniqueId timestamp</title><link>https://anaminus.github.io/blog/briefs/202203180739/</link><pubDate>Fri, 18 Mar 2022 07:39:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203180739/</guid><content:encoded>&lt;p&gt;Boring Facts: The UniqueId type found in Roblox place files contains a timestamp
with the epoch set at 2021-01-01. This can be used to determine when an instance
was created, per studio session.&lt;/p&gt;</content:encoded></item><item><title>Ancestor</title><link>https://anaminus.github.io/blog/briefs/202203171934/</link><pubDate>Thu, 17 Mar 2022 19:34:46 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203171934/</guid><content:encoded>&lt;p&gt;Quick way to grab the nearest ScreenGui from a descendant script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;FindFirstAncestorWhichIsA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;ScreenGui&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>rbxmk documentation</title><link>https://anaminus.github.io/blog/briefs/202203161631/</link><pubDate>Wed, 16 Mar 2022 16:31:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203161631/</guid><content:encoded>&lt;p&gt;Very excited about how rbxmk documentation is coming together. All of it is
compiled with the program, so it can be explored from the terminal. The endgame
is to be able to export the entire collection of files to be used for generating
a documentation website.&lt;/p&gt;</content:encoded></item><item><title>Abstraction</title><link>https://anaminus.github.io/blog/briefs/202203160719/</link><pubDate>Wed, 16 Mar 2022 07:19:12 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203160719/</guid><content:encoded>&lt;p&gt;Don&amp;rsquo;t abstract until you actually need to.&lt;/p&gt;</content:encoded></item><item><title>Font licensing</title><link>https://anaminus.github.io/blog/briefs/202203141454/</link><pubDate>Mon, 14 Mar 2022 14:54:39 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203141454/</guid><content:encoded>&lt;p&gt;I hear font licensing is even worse than music licensing. Can&amp;rsquo;t wait for custom
fonts!&lt;/p&gt;</content:encoded></item><item><title>Daylight saving time</title><link>https://anaminus.github.io/blog/briefs/202203132312/</link><pubDate>Sun, 13 Mar 2022 23:12:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203132312/</guid><content:encoded>&lt;p&gt;DST ended my alarm clock&amp;rsquo;s streak of flashing on and off with the correct time.&lt;/p&gt;</content:encoded></item><item><title>rbxmk documentation</title><link>https://anaminus.github.io/blog/briefs/202203121307/</link><pubDate>Sat, 12 Mar 2022 13:07:50 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203121307/</guid><content:encoded>&lt;p&gt;With this commit, built-in rbxmk documentation is finally readable again.
Formatting text is frustrating. There&amp;rsquo;s lots of comments because I barely know
how it works.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/commit/857c0dac32b1dbace20ddcb370563f2d0824b16a"&gt;https://github.com/Anaminus/rbxmk/commit/857c0dac32b1dbace20ddcb370563f2d0824b16a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I could do a release, but I&amp;rsquo;m kind of waiting for Go 1.18 to drop.&lt;/p&gt;</content:encoded></item><item><title>MIDI Circulation</title><link>https://anaminus.github.io/blog/briefs/202203092258/</link><pubDate>Wed, 09 Mar 2022 22:58:56 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203092258/</guid><content:encoded>&lt;p&gt;I spent 1/10 uploads on this. You&amp;rsquo;d better appreciate it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.roblox.com/library/9057654433/MIDI-Circulation"&gt;https://www.roblox.com/library/9057654433/MIDI-Circulation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>LocalAssetsFolder</title><link>https://anaminus.github.io/blog/briefs/202203092220/</link><pubDate>Wed, 09 Mar 2022 22:20:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203092220/</guid><content:encoded>&lt;p&gt;Protip: Search for GlobalSettings_13.xml in your file system. This contains
settings for Studio. If you set the &amp;ldquo;LocalAssetsFolder&amp;rdquo; setting to a directory,
files in that directory can be accessed through &lt;code&gt;rbxasset://&lt;/code&gt;. Use this to work
on audio before uploading it.&lt;/p&gt;</content:encoded></item><item><title>Download audio</title><link>https://anaminus.github.io/blog/briefs/202203091938/</link><pubDate>Wed, 09 Mar 2022 19:38:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203091938/</guid><content:encoded>&lt;p&gt;Wrote a quick and dirty rbxmk script to download a list of audio assets:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/download-audio.rbxmk.lua"&gt;https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/download-audio.rbxmk.lua&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Megaphone</title><link>https://anaminus.github.io/blog/briefs/202203091824/</link><pubDate>Wed, 09 Mar 2022 18:24:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203091824/</guid><content:encoded>&lt;p&gt;There goes my carefully curated list of Arsenal megaphone spam.&lt;/p&gt;</content:encoded></item><item><title>RBXM to RBXMX</title><link>https://anaminus.github.io/blog/briefs/202203071611/</link><pubDate>Mon, 07 Mar 2022 16:11:37 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203071611/</guid><content:encoded>&lt;p&gt;If you&amp;rsquo;re having trouble getting rbxmk to covert rbxm to rbxmx correctly, it&amp;rsquo;s
probably to do with Roblox&amp;rsquo;s API dump missing certain serialized properties.
I&amp;rsquo;ve created a patch file that will add such properties back to the dump.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/tree/imperative/doc/examples/dump-patch"&gt;https://github.com/Anaminus/rbxmk/tree/imperative/doc/examples/dump-patch&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Text-wrapping</title><link>https://anaminus.github.io/blog/briefs/202203060241/</link><pubDate>Sun, 06 Mar 2022 02:41:17 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203060241/</guid><content:encoded>&lt;p&gt;Getting text to wrap correctly is surprisingly difficult. I scream internally at
the thought of having to deal with double-width characters.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202203060241/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Install</title><link>https://anaminus.github.io/blog/briefs/202203030527/</link><pubDate>Thu, 03 Mar 2022 05:27:54 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203030527/</guid><content:encoded>&lt;p&gt;You can tell that a microsoft product is involved when the install process takes
200 times longer than it should.&lt;/p&gt;</content:encoded></item><item><title>Good fit</title><link>https://anaminus.github.io/blog/briefs/202203022144/</link><pubDate>Wed, 02 Mar 2022 21:44:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203022144/</guid><content:encoded>&lt;p&gt;Sometimes it takes way too much energy to decide that something you want to use
isn&amp;rsquo;t going to be a good fit.&lt;/p&gt;</content:encoded></item><item><title>22</title><link>https://anaminus.github.io/blog/briefs/202202221831/</link><pubDate>Tue, 22 Feb 2022 22:22:22 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202221831/</guid><content:encoded>&lt;p&gt;Not the 22nd month. Don&amp;rsquo;t care.&lt;/p&gt;</content:encoded></item><item><title>Sun rays Mk II</title><link>https://anaminus.github.io/blog/briefs/202202211845/</link><pubDate>Mon, 21 Feb 2022 18:45:36 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202211845/</guid><content:encoded>&lt;p&gt;Sun rays with much better performance.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202211845/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Lot to unpack here. Each ray is a triangle within a MeshPart. Each MeshPart
groups together 85 triangles. Each vertex has a corresponding Bone, so the
triangles can be positioned independently and arbitrarily. Rays are produced by
allocating tris from the 85-tri meshes. A new MeshPart is created once all the
tris from the previous MeshPart are used.&lt;/p&gt;
&lt;p&gt;The ForceField material is utilized here. As previously mentioned, the
orientation of vertex normals affects the appearance of the force field. Each
vertex corresponds to a bone. For each tri, one of the bones is designated as a
&amp;ldquo;roller&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The roller bone is moved out of the MeshPart into a separate Part that is
attached with a BallSocketConstraint at the original location. This part has
another attachment with a randomized orientation. This randomized attachment is
assigned to an AlignOrientation.&lt;/p&gt;
&lt;p&gt;The other end of the AlignOrientation is assigned to a single attachment. The
brick in the video contains this attachment. The rotation of this brick is
directly controlling the &amp;ldquo;movement&amp;rdquo; of the rays.&lt;/p&gt;
&lt;p&gt;The extra attachment with the randomized orientation is necessary so that the
appearance of force fields are spread out and unaligned. Assemblies with
BallSockets are necessary so that the bones are detected correctly while
allowing free orientation.&lt;/p&gt;
&lt;p&gt;Now that I think about, the whole thing is driven entirely by physics. The only
script running continuously is to rotate the brick, but that&amp;rsquo;s only because the
AngularVelocity constraint was being finicky.&lt;/p&gt;
&lt;p&gt;Driving the control brick through physics doesn&amp;rsquo;t work well, because the rollers
seem to fall asleep or otherwise get stuck. Updating it via script seems to keep
them awake.&lt;/p&gt;</content:encoded></item><item><title>Sun rays</title><link>https://anaminus.github.io/blog/briefs/202202201547/</link><pubDate>Sun, 20 Feb 2022 15:47:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202201547/</guid><content:encoded>&lt;p&gt;Sun rays.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202201547/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Each ray is just a stretched cube mesh with an almost transparent ForceField
material. The mesh is just for surface smoothing, so a simple Union could be
used as well, though it&amp;rsquo;s less convenient to resize. Each part is rotated
continuously.&lt;/p&gt;
&lt;p&gt;Rays are cast from a defined plane using GetSunDirection, so some occlusion can
be achieved.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202201547/02.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;In practice, it seems like using meshes and ForceFields is excessive. Regular
transparent parts seem to produce more or less the same effect.&lt;/p&gt;
&lt;p&gt;Retrying with a simple triangle mesh has much better performance. An interesting
side-effect of using a mesh with bones is that the shape and appearance of the
ForceField can be controlled by the vertex normals.&lt;/p&gt;
&lt;p&gt;Rotating the vertex normals instead of the part produces a subtle
rolling-fog-like effect. Not sure if it will show up in the video, but it&amp;rsquo;s
really cool. Unfortunately, the performance is awful. Bone modification doesn&amp;rsquo;t
seem to be as optimized as it could be.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202201547/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;According to the profiler, modifying a Bone&amp;rsquo;s CFrame once involves 27 instances
of &amp;ldquo;Loader&amp;rdquo;, each involving a call to &amp;ldquo;IsA&amp;rdquo;. Definitely doesn&amp;rsquo;t seem right.&lt;/p&gt;
&lt;p&gt;Apparently the ForceField material can be affected by vertex color alphas, but
Blender doesn&amp;rsquo;t support them???&lt;/p&gt;
&lt;p&gt;A further optimization is to have multiple triangles per MeshPart. A mesh can
have up to 256 bones, which amounts to 85 triangles. This reduces the above
scene of ~400 parts down to just 6.&lt;/p&gt;</content:encoded></item><item><title>Plugin marketplace</title><link>https://anaminus.github.io/blog/briefs/202202152348/</link><pubDate>Tue, 15 Feb 2022 23:48:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202152348/</guid><content:encoded>&lt;p&gt;It&amp;rsquo;s fine to put pressure on Roblox for the plugin marketplace, but you have no
business being angry about it. Its financial viability was questioned from the
moment it was introduced.&lt;/p&gt;
&lt;p&gt;It has been around two years with no action from Roblox. A very short time to
coordinate a multitude of features across a variety of systems and teams while
also juggling other priorities. Especially considering the happenings during
those two particular years. My impression is that they&amp;rsquo;re working on it. Give
the feature the time it deserves.&lt;/p&gt;
&lt;p&gt;Moving to &lt;a href="http://itch.io"&gt;http://itch.io&lt;/a&gt; is an excellent way to apply pressure and get Roblox to
reevaluate their priorities. I just think that being upset about it comes off as
entitled.&lt;/p&gt;</content:encoded></item><item><title>coroutine.close</title><link>https://anaminus.github.io/blog/briefs/202202152139/</link><pubDate>Tue, 15 Feb 2022 21:39:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202152139/</guid><content:encoded>&lt;p&gt;The new &lt;code&gt;coroutine.close&lt;/code&gt; doesn&amp;rsquo;t cause the thread to be removed from the
scheduler, so it&amp;rsquo;s still sitting around in memory. Proper delay cancellation
remains unsolved.&lt;/p&gt;</content:encoded></item><item><title>Public communication</title><link>https://anaminus.github.io/blog/briefs/202202111249/</link><pubDate>Fri, 11 Feb 2022 12:49:47 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202111249/</guid><content:encoded>&lt;p&gt;Not a fan of the isn&amp;rsquo;t-that-outrageous approach to public communication.&lt;/p&gt;</content:encoded></item><item><title>Plugin marketplace category</title><link>https://anaminus.github.io/blog/briefs/202202111213/</link><pubDate>Fri, 11 Feb 2022 12:13:56 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202111213/</guid><content:encoded>&lt;p&gt;Just now I discovered that the devforum has a private category specifically for
the plugin marketplace, created only a few months ago. Maybe something&amp;rsquo;s up.&lt;/p&gt;</content:encoded></item><item><title>Plugin running</title><link>https://anaminus.github.io/blog/briefs/202202101444/</link><pubDate>Thu, 10 Feb 2022 14:44:21 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202101444/</guid><content:encoded>&lt;p&gt;Plugins run a lot earlier than you&amp;rsquo;d think. If you need to depend on the game
running, you can do the following to block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;RunService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;IsRunning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;RunService.Stepped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>select bug</title><link>https://anaminus.github.io/blog/briefs/202202091515/</link><pubDate>Wed, 09 Feb 2022 15:15:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202091515/</guid><content:encoded>&lt;p&gt;If you&amp;rsquo;re getting errors from my studio plugins, it&amp;rsquo;s because the select
function is being unruly again.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/1652975/7"&gt;https://devforum.roblox.com/t/1652975/7&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Yaks</title><link>https://anaminus.github.io/blog/briefs/202202091505/</link><pubDate>Wed, 09 Feb 2022 15:05:24 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202091505/</guid><content:encoded>&lt;p&gt;One of those days where a bunch of yaks just barge in.&lt;/p&gt;</content:encoded></item><item><title>Money</title><link>https://anaminus.github.io/blog/briefs/202202061847/</link><pubDate>Sun, 06 Feb 2022 18:47:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202061847/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;A player reaches out to you for support on your Roblox game (data loss). While
gathering information you realize they ran exploits. Do you continue with
their request?&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/Ozzypig/status/1490454687539150853"&gt;Ozzypig, 10:37 PM · Feb 6, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Assuming my game has already isolated them from non-exploiters, the answer
depends on whether they&amp;rsquo;re making me money.&lt;/p&gt;</content:encoded></item><item><title>Web slides</title><link>https://anaminus.github.io/blog/briefs/202202052315/</link><pubDate>Sat, 05 Feb 2022 23:15:42 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202052315/</guid><content:encoded>&lt;p&gt;Why are presentation programs still a thing? Why hasn&amp;rsquo;t the entire concept been
completely devoured by HTML/CSS/JS? You&amp;rsquo;re basically making a bunch of web
pages. You could do it all on one page. Hell, you probably don&amp;rsquo;t even need JS.&lt;/p&gt;</content:encoded></item><item><title>Ripples</title><link>https://anaminus.github.io/blog/briefs/202202022336/</link><pubDate>Wed, 02 Feb 2022 23:36:29 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202022336/</guid><content:encoded>&lt;p&gt;Tried a ripple effect.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202022336/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>CFrames</title><link>https://anaminus.github.io/blog/briefs/202202011854/</link><pubDate>Tue, 01 Feb 2022 18:54:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202011854/</guid><content:encoded>&lt;p&gt;Attributes are not allowed to be CFrames. Why.&lt;/p&gt;
&lt;p&gt;Moreover, since Roblox&amp;rsquo;s inception they haven&amp;rsquo;t displayed CFrames in the
properties panel. Instead we&amp;rsquo;ve been getting things like Position/Orientation
pseudo-representations for select properties.&lt;/p&gt;
&lt;p&gt;Roblox could have done this years ago:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202202011854/00.png" width="368" height="206" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>ContentQueue</title><link>https://anaminus.github.io/blog/briefs/202202011201/</link><pubDate>Tue, 01 Feb 2022 12:01:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202011201/</guid><content:encoded>&lt;p&gt;ContentQueue: ordered preloading of assets.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/ContentQueue"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/ContentQueue&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Production logos</title><link>https://anaminus.github.io/blog/briefs/202202011022/</link><pubDate>Tue, 01 Feb 2022 10:22:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202011022/</guid><content:encoded>&lt;p&gt;Production logo sequencer.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202011022/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;First logo is actually 3D to avoid loading assets. On the other hand, the next
logo loads over 500 assets; the previous logo will wait until the next logo is
finished loading. The second run of the sequence demonstrates skipping via user
input.&lt;/p&gt;</content:encoded></item><item><title>Maid outfits</title><link>https://anaminus.github.io/blog/briefs/202201300125/</link><pubDate>Sun, 30 Jan 2022 01:25:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201300125/</guid><content:encoded>&lt;p&gt;Maid objects are just tables in maid outfits.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202201300125/00.jpg" width="909" height="1200" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Maid pattern</title><link>https://anaminus.github.io/blog/briefs/202201300109/</link><pubDate>Sun, 30 Jan 2022 01:09:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201300109/</guid><content:encoded>&lt;p&gt;Maids are a pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;maid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;table.clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button.Activated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid.activated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;instance.Parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid.instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;otherMaid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;otherMaid.maid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otherMaid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Blender modernity</title><link>https://anaminus.github.io/blog/briefs/202201242346/</link><pubDate>Mon, 24 Jan 2022 23:46:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201242346/</guid><content:encoded>&lt;p&gt;After working with Blender for a while, Studio&amp;rsquo;s UI is really starting to feel
primitive.&lt;/p&gt;</content:encoded></item><item><title>Quotes</title><link>https://anaminus.github.io/blog/briefs/202201241314/</link><pubDate>Mon, 24 Jan 2022 13:14:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201241314/</guid><content:encoded>&lt;p&gt;Including &amp;ldquo;without the quotes&amp;rdquo; will be necessary until humans are extinct.&lt;/p&gt;</content:encoded></item><item><title>Passphrase</title><link>https://anaminus.github.io/blog/briefs/202201211903/</link><pubDate>Fri, 21 Jan 2022 19:03:40 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201211903/</guid><content:encoded>&lt;p&gt;When you&amp;rsquo;re typing your passphrase and you feel a sneeze coming on so you start
scrambling to finish.&lt;/p&gt;</content:encoded></item><item><title>Query plugin</title><link>https://anaminus.github.io/blog/briefs/202201191349/</link><pubDate>Wed, 19 Jan 2022 13:49:40 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201191349/</guid><content:encoded>&lt;p&gt;Lately I&amp;rsquo;ve been getting a lot of mileage out this selection querying plugin I
made:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/blob/master/plugins/Utilities/q.lua"&gt;https://github.com/Anaminus/roblox-library/blob/master/plugins/Utilities/q.lua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s based on Lua expressions (with some extra syntax), so it&amp;rsquo;s very versatile.&lt;/p&gt;</content:encoded></item><item><title>Cloth</title><link>https://anaminus.github.io/blog/briefs/202201131143/</link><pubDate>Thu, 13 Jan 2022 11:43:47 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201131143/</guid><content:encoded>&lt;p&gt;Hot take: Cloth is just a 2D rope.&lt;/p&gt;</content:encoded></item><item><title>Cloth physics</title><link>https://anaminus.github.io/blog/briefs/202201122039/</link><pubDate>Wed, 12 Jan 2022 20:39:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201122039/</guid><content:encoded>&lt;p&gt;Here&amp;rsquo;s cloth physics via RodConstraints. Cloth is a MeshPart deformed by bones.
Bone positions are matched to node positions by a script. An AngularVelocity
dampens each node, since their rotations like to go crazy for some reason.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Bones have to be parented to a MeshPart to work, so a script is necessary. It
would be neat if they could refer to a mesh instead, so that they could be
placed inside different parts.&lt;/p&gt;
&lt;p&gt;Seems to run surprisingly well. Like capes-for-everyone might be viable, at
least for a low player count.&lt;/p&gt;
&lt;p&gt;The MeshPart is anchored, but its appearance is deformed using bones. A script
updates the positions of the bones every frame to match the positions of the red
balls, which are simulated with Roblox’s physics.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s cloth with SpringConstraints instead of rods. LinearVelocity dampens
movement. VectorForce negates gravity to reduce weight. Spring Stiffness makes
the cloth more or less stretchy.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;RodConstraints are much better for less stretchy material, but the
LinearVelocity force has to be increased to compensate for the increased
rigidity:&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/02.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Apparently the orientation of bones affects the vertex normals of meshes, so I
can&amp;rsquo;t really get away with just ignoring it. No good way using constraints, so
I&amp;rsquo;ll have to calculate it in Luau.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/03.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;hr&gt;
&lt;p&gt;What am I doing with my life.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/04.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;So, yes, it is possible to control bones with other parts, but it requires
certain constraint types to work. BallAndSocket is the most versatile, so I&amp;rsquo;ll
see if I can construct cloth out of that. Until then, it&amp;rsquo;s floppy rigatoni.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;hey tony, rig me a pasta noodle&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll have to rig-a-toni. Hahaha HAHAHAHAA AAAAAAAAAAAAAAAAAAAAAAAAA&lt;/p&gt;
&lt;p&gt;&amp;mdash; Me (utterly deranged)&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Think I have a general theory of how skinned meshes work. Two bones are merged
if and only if they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have the same Name.&lt;/li&gt;
&lt;li&gt;are under the same Model.&lt;/li&gt;
&lt;li&gt;are a part of the same assembly via compatible joints (JointInstance,
BallSocketConstraint, HingeConstraint).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If more than two bones meet these criteria, only one pair is merged. It&amp;rsquo;s not
clear which pair is selected, but it&amp;rsquo;s probably undefined.&lt;/p&gt;
&lt;p&gt;Bones usually exist internally in a mesh. The Bone instance can be thought of as
creating a virtual internal bone that is then merged as usual.&lt;/p&gt;
&lt;p&gt;Some examples of valid skinned mesh configurations (I forgot to update the
compatible joint list; any JointInstance is allowed, not just Motor6Ds and
Welds):&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202201122039/05.png" width="800" height="880" loading="lazy"&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;We variously called them “skinning islands” or “skeletons” instead of
assemblies (can span multiple assemblies or just a subset of one), but that’s
pretty much it. Bones don’t have to be child of mesh at all.&lt;/p&gt;
&lt;p&gt;This is how skinned avatars work. Parts link up, internal bones linked to the
respective parts. Using Parts instead of Bones but it’s all using the same
logic.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/ContextLostRBX/status/1482992805953736704"&gt;@ContextLostRBX, 8:26 AM · Jan 17, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Here&amp;rsquo;s cloth driven entirely by physics. No scripts. Vertex normals are still a
problem because the BallSockets are allowed to twist. But if twist limits are
enabled, they start vibrating for some reason. Maybe the attachments are
oriented wrong.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/06.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Constructed in a zigzag because I had trouble getting the mesh to merge to the
assembly any other way. Either it only merges into one branch of an assembly, or
it&amp;rsquo;s something to do with the attachments. Doesn&amp;rsquo;t seem to care about the
direction of the connections, though.&lt;/p&gt;
&lt;p&gt;BallSockets have a sort of stiffness property that can be used to dampen the
motion, but this only works well for stiffer cloths. LinearVelocity will be
better for lighter cloth because it simulates air resistance.&lt;/p&gt;
&lt;p&gt;The horizontal red lines are Rods. It would actually be better to make these
parts with BallSockets on each end, so that all joints can have stiffness
applied to them. I&amp;rsquo;m not sure how that would affect the &amp;ldquo;branchiness&amp;rdquo; of the
assembly, though.&lt;/p&gt;
&lt;p&gt;Tried a new skeleton consisting of rows of chains of bones, which correspond to
chains of BallSockets. Each joint is then connected by a Rod. The problem now is
that character movement is way too aggressive. Maybe increasing the cloth weight
will help?&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/07.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;What happens when I enable collisions:&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/08.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Nuking appears to be caused by cloth joints getting under the Humanoid. So,
instead of colliding with the Default group, a separate &amp;ldquo;ClothExclusion&amp;rdquo; group
is used (in red). Lowering the UpperAngle of the BallSockets reduces flailing
and tangling. Limb clipping still a problem.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/09.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The problem with limbs is that the Humanoid forces them to have no collisions.
Could be resolved by attaching ClothExclusion parts to each limb. Not sure how
badly that will affect flailing, though, if they even collide correctly.&lt;/p&gt;
&lt;p&gt;Something to try is to attach an AlignPosition with a weak force to the end of
each chain, aligning to the expected resting position of the end relative to the
character. It may also be possible to alter them dynamically to improve air
resistance simulation.&lt;/p&gt;
&lt;p&gt;Another problem is that something is interfering with jumping, leading to the
character being pushed horizontally. Also, landing wrong can cause the cloth to
detonate.&lt;/p&gt;
&lt;p&gt;The jumping problem is caused by the cloth joints affecting the inertia of the
character. Simply moving the cloth outside of the character model solved the
problem.&lt;/p&gt;
&lt;p&gt;Tried this, but it works rather poorly. The cloth doesn&amp;rsquo;t respond to limb
movement very well, so it still clips right through. A combination of reducing
limb animation and increasing the number of chains might help.&lt;/p&gt;</content:encoded></item><item><title>Light mode</title><link>https://anaminus.github.io/blog/briefs/202201112035/</link><pubDate>Tue, 11 Jan 2022 20:35:21 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201112035/</guid><content:encoded>&lt;p&gt;The reason you dislike light mode is because your room doesn&amp;rsquo;t get enough
sunlight.&lt;/p&gt;</content:encoded></item><item><title>Export</title><link>https://anaminus.github.io/blog/briefs/202201090825/</link><pubDate>Sun, 09 Jan 2022 08:25:17 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201090825/</guid><content:encoded>&lt;p&gt;One pattern I&amp;rsquo;ve been using lately is naming the table returned by modules
&amp;ldquo;export&amp;rdquo; instead of the module name. This creates a similarity to exporting
types, and also frees up the module name to be used for something else (usually
a metatable).&lt;/p&gt;</content:encoded></item><item><title>Handedness</title><link>https://anaminus.github.io/blog/briefs/202201051046/</link><pubDate>Wed, 05 Jan 2022 10:46:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201051046/</guid><content:encoded>&lt;p&gt;Me trying to figure out the handedness of coordinate systems.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202201051046/00.jpg" width="600" height="884" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Reactive graphs</title><link>https://anaminus.github.io/blog/briefs/202112291451/</link><pubDate>Wed, 29 Dec 2021 14:51:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112291451/</guid><content:encoded>&lt;p&gt;Thinking about APIs.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/00.jpg" width="861" height="1059" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;One idea was using add/sub to compose sets of symbol types, such as &lt;code&gt;Prop &amp;quot;Name&amp;quot;-Set&lt;/code&gt; for a read-only property node, or &lt;code&gt;Receiver+Signal &amp;quot;Activated&amp;quot;&lt;/code&gt; for
a signal with a receiver. The Get/Set symbols would then be usable with Nodes to
control direction. I&amp;rsquo;m not sure how I feel about it, because it would enable
weird things like &lt;code&gt;Prop &amp;quot;Foo&amp;quot; + Attr &amp;quot;Bar&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Prototyping. Nothing actually graphy yet. &amp;ldquo;Prop&amp;rdquo; does get repetitive, so it
definitely needs a &amp;ldquo;Properties&amp;rdquo; tag that receives a dictionary.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/01.png" width="724" height="687" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Inst isn&amp;rsquo;t built in the to core (&amp;ldquo;Graf&amp;rdquo;). Instead, the core defines interfaces,
and Inst is just an implementation that operates on instances. Bind does the
heavy lifting of making data flow.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/02.png" width="717" height="209" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Bind returns the instance, along with a list of tasks to be finalized somewhere.
Schedule just sets these tasks to be finalized when the instance is destroyed.
Context returns a resolver that converts things like &lt;code&gt;Prop&amp;quot;Name&amp;quot;&lt;/code&gt; into actual
state.&lt;/p&gt;
&lt;p&gt;Implementing recursion. A context can resolve a sink (stuff on the left) into
another context, which must receive a map as a source (stuff on the right). In
this example, Properties becomes a context that converts string sinks into
property setters in addition to the usual stuff.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/03.png" width="558" height="342" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Graphs</title><link>https://anaminus.github.io/blog/briefs/202112290938/</link><pubDate>Wed, 29 Dec 2021 09:38:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112290938/</guid><content:encoded>&lt;p&gt;thinkin bout graphs again&lt;/p&gt;</content:encoded></item><item><title>NFTs</title><link>https://anaminus.github.io/blog/briefs/202112282023/</link><pubDate>Tue, 28 Dec 2021 20:23:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112282023/</guid><content:encoded>&lt;p&gt;An NFT is a string of bytes. Some authority invented out of thin air then makes
the unenforceable claim that these bytes are associated with something else in a
vain attempt to give them value. After that it&amp;rsquo;s just the usual trading of fake
items in a fake market with fake money.&lt;/p&gt;
&lt;p&gt;Given that the value of these items hinge completely on this authority anyway,
the blockchain part (and all the dumb shit that goes with it) can be skipped
entirely. This is how Roblox works.&lt;/p&gt;
&lt;p&gt;The real point of interest is whether the fake money can be exchanged for real
money. In Roblox&amp;rsquo;s case, the fake money earned from the sales of fake items
cannot be exchanged for real money. However, it can be used indirectly towards
earning &amp;ldquo;clean&amp;rdquo; money that can be exchanged.&lt;/p&gt;</content:encoded></item><item><title>Search engines</title><link>https://anaminus.github.io/blog/briefs/202112272208/</link><pubDate>Mon, 27 Dec 2021 22:08:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112272208/</guid><content:encoded>&lt;p&gt;The current state of search engines: I do a search for &amp;ldquo;firefox import profile&amp;rdquo;
and the top result is a health website titled &amp;ldquo;Import Browser Settings Firefox
Cancer&amp;rdquo;. Next result is a cooking website titled &amp;ldquo;Import Firefox Settings Best
Recipes&amp;rdquo;.&lt;/p&gt;</content:encoded></item><item><title>If expressions</title><link>https://anaminus.github.io/blog/briefs/202112231648/</link><pubDate>Thu, 23 Dec 2021 16:48:59 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112231648/</guid><content:encoded>&lt;p&gt;Not having if-expressions would have forced you to write it out as a full
statement, having the miraculous side-effect of making the code clearer. This is
why I&amp;rsquo;m so grumpy about the syntax&amp;rsquo;s inclusion.&lt;/p&gt;</content:encoded></item><item><title>Collision detection</title><link>https://anaminus.github.io/blog/briefs/202112130043/</link><pubDate>Mon, 13 Dec 2021 00:43:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112130043/</guid><content:encoded>&lt;p&gt;Continuous collision detection. Very happy to finally have this working. No
raycasts. All Luau and a bunch of maths.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202112130043/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The position of the yellow ball is the white ball plus its velocity. The green
ball is the yellow ball plus the new velocity.&lt;/p&gt;
&lt;p&gt;It only does spheres vs triangles since that’s all I need, but it’s based off of
&lt;a href="https://github.com/davideberly/GeometricTools"&gt;GeometricTools&lt;/a&gt;, which has a number of different shapes.&lt;/p&gt;</content:encoded></item><item><title>Spiral rule</title><link>https://anaminus.github.io/blog/briefs/202112101350/</link><pubDate>Fri, 10 Dec 2021 13:50:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112101350/</guid><content:encoded>&lt;p&gt;There are people who defend this syntax.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112101350/00.png" width="776" height="664" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Check for updates</title><link>https://anaminus.github.io/blog/briefs/202112030724/</link><pubDate>Fri, 03 Dec 2021 07:24:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112030724/</guid><content:encoded>&lt;p&gt;Really annoyed by plugins that roll their own update checker. Especially ones
that don&amp;rsquo;t let me disable it. Apparently the Plugin Management panel doesn&amp;rsquo;t get
in my face enough for the author&amp;rsquo;s liking.&lt;/p&gt;</content:encoded></item><item><title>Roblox tough guy</title><link>https://anaminus.github.io/blog/briefs/202111300348/</link><pubDate>Tue, 30 Nov 2021 03:48:36 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202111300348/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;ll set your Parent property to nil. I&amp;rsquo;ll call Destroy on your ass. You must
weigh a singleton, because you&amp;rsquo;re nothing but Debris to me. Your family better
connect to your Died event, because I&amp;rsquo;ll set your Health to 0. You better
BindToClose, because I&amp;rsquo;m about to shut you down.&lt;/p&gt;
&lt;p&gt;No need to set BreakJointsOnDeath, I&amp;rsquo;ll just call BreakJoints directly. We
better update your Transparency, because you&amp;rsquo;re about to become a ghost. Your
ancestry is about to change, kiddo. You&amp;rsquo;re no longer gonna be a descendant of
this DataModel when I&amp;rsquo;m through with you.&lt;/p&gt;
&lt;p&gt;And don&amp;rsquo;t think you&amp;rsquo;re coming back, because I&amp;rsquo;m setting your RespawnLocation to
nil. You&amp;rsquo;re gonna be FallingDown, but you wont be GettingUp, because I disabled
that Humanoid state. Your thread is suspended, and I&amp;rsquo;m calling coroutine.close
on you. No need to defer THIS task.&lt;/p&gt;
&lt;p&gt;The Garbage Collector&amp;rsquo;ll need several cycles to clean YOU away. Calling
GetFriendsOnline on you always returns an empty array. I&amp;rsquo;ll set your HeadLocked
and max out your NearPlaneZ. By the way these insults are licensed under MIT.&lt;/p&gt;</content:encoded></item><item><title>Verification</title><link>https://anaminus.github.io/blog/briefs/202111242015/</link><pubDate>Wed, 24 Nov 2021 20:15:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202111242015/</guid><content:encoded>&lt;p&gt;If you have to verify that the results the AI produces are correct, do you
really save any effort?&lt;/p&gt;</content:encoded></item><item><title>Loadstring</title><link>https://anaminus.github.io/blog/briefs/202111130955/</link><pubDate>Sat, 13 Nov 2021 09:55:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202111130955/</guid><content:encoded>&lt;p&gt;If you&amp;rsquo;re writing a plugin and want to avoid optimization penalties associated
with loadstring, you can just create a ModuleScript, set the Source, then
require it.&lt;/p&gt;</content:encoded></item><item><title>Procrastination</title><link>https://anaminus.github.io/blog/briefs/202110311931/</link><pubDate>Sun, 31 Oct 2021 19:31:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110311931/</guid><content:encoded>&lt;p&gt;Finally I can get back to procrastinating.&lt;/p&gt;</content:encoded></item><item><title>Downtime lore</title><link>https://anaminus.github.io/blog/briefs/202110300030/</link><pubDate>Sat, 30 Oct 2021 00:30:03 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110300030/</guid><content:encoded>&lt;p&gt;You don&amp;rsquo;t need Studio to expand your game&amp;rsquo;s lore.&lt;/p&gt;</content:encoded></item><item><title>Naming</title><link>https://anaminus.github.io/blog/briefs/202110261007/</link><pubDate>Tue, 26 Oct 2021 10:07:22 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110261007/</guid><content:encoded>&lt;p&gt;Don&amp;rsquo;t rename something until you&amp;rsquo;ve found that it has been consistently causing
confusion.&lt;/p&gt;</content:encoded></item><item><title>Linux support</title><link>https://anaminus.github.io/blog/briefs/202110241043/</link><pubDate>Sun, 24 Oct 2021 10:43:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110241043/</guid><content:encoded>&lt;p&gt;Game developer supports Linux, receives more higher quality,
non-platform-specific bug reports.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/gamedev/comments/qeqn3b/despite_having_just_58_sales_over_38_of_bug/"&gt;https://www.reddit.com/r/gamedev/comments/qeqn3b/despite_having_just_58_sales_over_38_of_bug/&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Downtime</title><link>https://anaminus.github.io/blog/briefs/202110190855/</link><pubDate>Tue, 19 Oct 2021 08:55:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110190855/</guid><content:encoded>&lt;p&gt;Remember, time spent without access to Studio could be time spent singing
praises of The Cloud.&lt;/p&gt;</content:encoded></item><item><title>Software marketing</title><link>https://anaminus.github.io/blog/briefs/202110130904/</link><pubDate>Wed, 13 Oct 2021 09:04:38 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110130904/</guid><content:encoded>&lt;p&gt;Only market a few of your software projects. When you&amp;rsquo;re actively trying to
bring in users, you&amp;rsquo;re creating an expectation of longevity. If you do this for
dozens of projects, you wont be able to maintain them all at once, leading to
stagnation and abandonment.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen a few groups that are doing this. They have handfuls of projects, each
complete with websites, documentation, and other user-friendly concepts meant to
improve usage. I see them and wonder how they plan on maintaining all of these
projects for the next 5 to 10 years.&lt;/p&gt;
&lt;p&gt;The more interest there is, the better chance you’ll have of finding other
dedicated maintainers that you can eventually hand off to. However, this is more
difficult for niche products, like those specific to Roblox, where the overall
pool of potential maintainers is smaller.&lt;/p&gt;
&lt;p&gt;It’s the marketing that makes a strong promise of long-term maintenance. If you
release something publicly, but aren’t trying to pull in users, then you aren’t
making that promise quite so strongly, so you can get away with lesser or no
maintenance.&lt;/p&gt;
&lt;p&gt;There are other strategies, too. You can clearly define the scope of your
project, making it possible to come to a state of completion, and therefore,
little to no maintenance. You can also make it extensible, which transfers some
of the burden to extension authors.&lt;/p&gt;</content:encoded></item><item><title>ReflectionMetadata</title><link>https://anaminus.github.io/blog/briefs/202110071042/</link><pubDate>Thu, 07 Oct 2021 10:42:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110071042/</guid><content:encoded>&lt;p&gt;Roblox engineers definitely modify ReflectionMetadata manually.&lt;/p&gt;</content:encoded></item><item><title>ID verification</title><link>https://anaminus.github.io/blog/briefs/202109211325/</link><pubDate>Tue, 21 Sep 2021 13:25:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202109211325/</guid><content:encoded>&lt;p&gt;Giving away your soul has never been easier.&lt;/p&gt;</content:encoded></item><item><title>MemoryStoreService</title><link>https://anaminus.github.io/blog/briefs/202109210922/</link><pubDate>Tue, 21 Sep 2021 09:22:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202109210922/</guid><content:encoded>&lt;p&gt;The documentation for the new MemoryStoreService is, of course, lacking. I&amp;rsquo;m
still able answer most of my own questions, but it&amp;rsquo;s a lot of extra work that
shouldn&amp;rsquo;t be necessary.&lt;/p&gt;</content:encoded></item><item><title>Railroad tracks</title><link>https://anaminus.github.io/blog/briefs/202109142011/</link><pubDate>Tue, 14 Sep 2021 20:11:59 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202109142011/</guid><content:encoded>&lt;p&gt;Bezier curves aren&amp;rsquo;t necessarily bad for railroad tracks, they just need more
constraints. Real tracks have relatively wide minimum curvature to account for
things like speed and axle spacing.&lt;/p&gt;
&lt;p&gt;Then there&amp;rsquo;s things like track transition curves. The radius of a track curve
should transition gradually from one radius to the next. There should be a
length of straight track in the transition to a reverse curve.&lt;/p&gt;</content:encoded></item><item><title>Long-hauling</title><link>https://anaminus.github.io/blog/briefs/202109121431/</link><pubDate>Sun, 12 Sep 2021 14:31:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202109121431/</guid><content:encoded>&lt;p&gt;Developing on Roblox.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202109121431/00.jpg" width="400" height="300" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>