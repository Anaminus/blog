<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Rant on Anaminus.Blog</title><link>https://anaminus.github.io/blog/tags/rant/</link><description>Recent content in Rant on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 07 Aug 2025 15:44:00 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/tags/rant/index.xml" rel="self" type="application/rss+xml"/><item><title>Terms of Service</title><link>https://anaminus.github.io/blog/briefs/202508071544/</link><pubDate>Thu, 07 Aug 2025 15:44:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508071544/</guid><content:encoded>&lt;p&gt;The year is 2025. There is still no benchmark for displaying differences in
Terms of Service. Users everywhere are still expected to memorize the whole
thing and then comb through looking for changes.&lt;/p&gt;</content:encoded></item><item><title>API dump woes</title><link>https://anaminus.github.io/blog/briefs/202402191024/</link><pubDate>Mon, 19 Feb 2024 10:24:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202402191024/</guid><content:encoded>&lt;p&gt;To whoever did this, I just want you to know that I am very annoyed by your
decision.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202402191024/00.png" width="808" height="615" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Longevity</title><link>https://anaminus.github.io/blog/briefs/202312010635/</link><pubDate>Fri, 01 Dec 2023 06:35:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202312010635/</guid><content:encoded>&lt;p&gt;17 years on the platform is not enough for #Roblox&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202312010635/00.png" width="282" height="131" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>FAQs</title><link>https://anaminus.github.io/blog/briefs/202309191930/</link><pubDate>Tue, 19 Sep 2023 19:30:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309191930/</guid><content:encoded>&lt;p&gt;Preemptive FAQs are not FAQs.&lt;/p&gt;</content:encoded></item><item><title>If-expressions</title><link>https://anaminus.github.io/blog/briefs/202306240035/</link><pubDate>Sat, 24 Jun 2023 00:35:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306240035/</guid><content:encoded>&lt;p&gt;&lt;em&gt;furiously begins authoring the &amp;ldquo;If-Expressions Considered Harmful&amp;rdquo; paper&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>How the Plugin Marketplace actually works</title><link>https://anaminus.github.io/blog/posts/plugin-marketplace/</link><pubDate>Thu, 22 Jun 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/plugin-marketplace/</guid><content:encoded>&lt;h2 id="part-i---the-plugin-compensation-model"&gt;Part I - The Plugin Compensation Model&lt;/h2&gt;
&lt;p&gt;You are &lt;strong&gt;developing a game&lt;/strong&gt; on Roblox. Some aspect of your workflow is
lacking, so you write a Studio plugin. This plugin improves the workflow of the
&lt;strong&gt;development of your game&lt;/strong&gt;. You rejoice, as you are able to &lt;strong&gt;develop your
game&lt;/strong&gt; better. The hours put into the development of the plugin are compensated
by the increase in revenue deriving from the plugin allowing you to push out
updates and fixes to your game faster and more efficiently.&lt;/p&gt;
&lt;p&gt;Compensation for hours worked are derived from &lt;strong&gt;your game&lt;/strong&gt;, so putting in work
that doesn&amp;rsquo;t improve &lt;strong&gt;your game&lt;/strong&gt; is wasted work. If you are improving a plugin
that does not result in an improvement to your game, then &lt;strong&gt;you will not be
compensated for your work&lt;/strong&gt;. Thus, if there is no game, but you are still doing
work on plugins, then you are not being compensated.&lt;/p&gt;
&lt;h2 id="part-ii---arent-developers-just-peachy"&gt;Part II - Aren&amp;rsquo;t developers just peachy?&lt;/h2&gt;
&lt;p&gt;Out of the goodness of your heart, you release this plugin for use by other
developers. You have no obligation to do this, nor are you beholden to any other
users of your plugin. You&amp;rsquo;ve already been compensated (by your game), so this is
entirely a charitable gesture. If you&amp;rsquo;re smart, you either maintain it as a
hobby, or just let it sit there while you do more important things.&lt;/p&gt;
&lt;h2 id="part-iii---here-comes-the-money"&gt;Part III - Here comes the money&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/400582"&gt;Roblox decides&lt;/a&gt; to implement the option to put plugins on sale.
They do this either because they mistake how the Plugin Compensation Model
works, or they think developers&amp;rsquo; charity should be rewarded with some petty
cash.&lt;/p&gt;
&lt;p&gt;Regardless, this attracts developers to do work purely on plugins. As we know,
because they have no game backing their work, they are compensated only with
enough to buy a nice virtual hat or something. That is, no money.&lt;/p&gt;
&lt;h2 id="conclusions---this-isnt-a-part"&gt;Conclusions - This isn&amp;rsquo;t a part&lt;/h2&gt;
&lt;p&gt;To summarize, without a game backing your plugin:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Make plugin -&amp;gt; ??? -&amp;gt; No money&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With a game:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Make plugin -&amp;gt; Improve game -&amp;gt; Yes money&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is how the Plugin Compensation Model has worked since the inception of
plugins, and this is how it continues to work to this day, despite what everyone
thinks, and despite Roblox&amp;rsquo;s apparent efforts to make it look like plugins can
bring in yes money independently. Don&amp;rsquo;t be fooled.&lt;/p&gt;
&lt;p&gt;Assuming that this model does not change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;ldquo;marketplace&amp;rdquo; should be abolished. That is, all plugins should be free.
Allowing a price to be put on plugins tricks developers into believing that
they are a possible source of yes money.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re a plugin developer, make games instead. Make UGC. Make something
that can be serviced by plugins. Or, secure patrons. Seek contracting or
employment by one of the many studios sprouting up. Make plugins directly in
service of &lt;em&gt;their&lt;/em&gt; content while making them pay you definite yes money.&lt;/li&gt;
&lt;li&gt;Whatever it is you &lt;span title="oh baby a triple"&gt;&lt;em&gt;do&lt;/em&gt; do, do&lt;/span&gt; not
expect compensation for work done on a plugin that isn&amp;rsquo;t directly in service
of a game or other UGC. At best, expect no money.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Arrow</title><link>https://anaminus.github.io/blog/briefs/202305232027/</link><pubDate>Tue, 23 May 2023 20:27:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305232027/</guid><content:encoded>&lt;p&gt;The &lt;code&gt;-&amp;gt;&lt;/code&gt; operator is unergonomic to type and almost always looks like shit but
new languages will always find an excuse to include it because teehee it&amp;rsquo;s an
arrow.&lt;/p&gt;</content:encoded></item><item><title>Child indexing</title><link>https://anaminus.github.io/blog/briefs/202305190907/</link><pubDate>Fri, 19 May 2023 09:07:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305190907/</guid><content:encoded>&lt;p&gt;stop [clap] using [clap] child [clap] indexing&lt;/p&gt;
&lt;p&gt;The entire problem is that the operation isn’t forward compatible. Either we
can’t index children, or Roblox can’t add new class members.&lt;/p&gt;</content:encoded></item><item><title>Screen/viewport split</title><link>https://anaminus.github.io/blog/briefs/202303171116/</link><pubDate>Fri, 17 Mar 2023 11:16:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171116/</guid><content:encoded>&lt;p&gt;The screen/viewport split was one of the biggest blunders Roblox ever made.&lt;/p&gt;</content:encoded></item><item><title>Local news</title><link>https://anaminus.github.io/blog/briefs/202302132136/</link><pubDate>Mon, 13 Feb 2023 21:36:54 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302132136/</guid><content:encoded>&lt;p&gt;My local news on balloons: Here&amp;rsquo;s some old information that we repeated
yesterday and the day before. We&amp;rsquo;ll be sure to keep you up to date on the latest
nothing that&amp;rsquo;s unfolding.&lt;/p&gt;
&lt;p&gt;My local news on catastrophic industrial disasters: That happened. Here&amp;rsquo;s the
weather.&lt;/p&gt;</content:encoded></item><item><title>The Cloud™</title><link>https://anaminus.github.io/blog/briefs/202301210944/</link><pubDate>Sat, 21 Jan 2023 09:44:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301210944/</guid><content:encoded>&lt;p&gt;There goes a productive day. Thanks, The Cloud™.&lt;/p&gt;</content:encoded></item><item><title>Streaming</title><link>https://anaminus.github.io/blog/briefs/202301090959/</link><pubDate>Mon, 09 Jan 2023 09:59:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301090959/</guid><content:encoded>&lt;p&gt;A problem with streaming on Roblox is that a client can just move the camera
anywhere, and the server will happily stream whatever is at that location, even
if the player is not meant to be there. Developers need to be able to exclude
areas from being streamed to certain clients.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2023-01-16 23:14&lt;/em&gt;: As a follow up, it turns out to be possible with the
Player.ReplicationFocus property. Setting it to a dummy part gives the server
the opportunity to deny streaming in. The position of the dummy part matches the
character, except when the character moves to an undesired location.&lt;/p&gt;</content:encoded></item><item><title>Immediate mode</title><link>https://anaminus.github.io/blog/briefs/202211021020/</link><pubDate>Wed, 02 Nov 2022 10:20:02 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211021020/</guid><content:encoded>&lt;p&gt;Why do we use immediate mode libraries on top of retained mode APIs on top of
immediate mode graphics?&lt;/p&gt;</content:encoded></item><item><title>Roact</title><link>https://anaminus.github.io/blog/briefs/202211021007/</link><pubDate>Wed, 02 Nov 2022 10:07:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211021007/</guid><content:encoded>&lt;p&gt;my favorite part of roact is how you can instantly tell when it&amp;rsquo;s being used by
the complete lack of keyboard support and the general feeling of sluggishness&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202211021007/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;It would run much better with a proper component implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, but it wasn&amp;rsquo;t done that way. Why not? Maybe it&amp;rsquo;s because Roact makes
it easy to do the wrong thing. Or hard to do the right thing. Or both.&lt;/p&gt;</content:encoded></item><item><title>Transpiling</title><link>https://anaminus.github.io/blog/briefs/202211012140/</link><pubDate>Tue, 01 Nov 2022 21:40:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211012140/</guid><content:encoded>&lt;p&gt;My beef with transpiling is writing in one language and receiving errors in
another language. Or worse, having to mentally map one to the other while
stepping through a debugger. It&amp;rsquo;s not worth it if the productivity gained during
writing is lost during debugging.&lt;/p&gt;</content:encoded></item><item><title>Marketing</title><link>https://anaminus.github.io/blog/briefs/202210080800/</link><pubDate>Sat, 08 Oct 2022 08:00:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210080800/</guid><content:encoded>&lt;p&gt;Getting annoyed by projects that market themselves like they&amp;rsquo;re ready but don&amp;rsquo;t
even have basic documentation.&lt;/p&gt;</content:encoded></item><item><title>Biometrics</title><link>https://anaminus.github.io/blog/briefs/202210041720/</link><pubDate>Tue, 04 Oct 2022 17:20:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210041720/</guid><content:encoded>&lt;p&gt;Fingerprint scanning is literally leaving your password, which you can never
change, on everything you have ever touched, or will ever touch. And don&amp;rsquo;t
forget about all those pictures that incidentally contain your fingers in
immaculate detail.&lt;/p&gt;</content:encoded></item><item><title>Plugin UX</title><link>https://anaminus.github.io/blog/briefs/202209172306/</link><pubDate>Sat, 17 Sep 2022 23:06:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209172306/</guid><content:encoded>&lt;p&gt;Plugin development should share the same UX as games. Specifically asset
management.&lt;/p&gt;</content:encoded></item><item><title>Premature features</title><link>https://anaminus.github.io/blog/briefs/202205231559/</link><pubDate>Mon, 23 May 2022 15:59:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205231559/</guid><content:encoded>&lt;p&gt;Starting to get annoyed by Luau making features available before they&amp;rsquo;re
complete.&lt;/p&gt;
&lt;p&gt;Incidentally, tagged unions aren&amp;rsquo;t refined by the &lt;code&gt;else&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;really&lt;/em&gt; annoying thing is that the only way to find out a feature is
incomplete is to get halfway through writing something only to have the type
checker start slapping you with errors for things are logically correct.&lt;/p&gt;
&lt;p&gt;If I have a tagged union of &lt;code&gt;A | B&lt;/code&gt;, and &lt;code&gt;if v.type==&amp;quot;A&amp;quot; then&lt;/code&gt; refines to type
A, then logically, &lt;code&gt;else&lt;/code&gt; should refine to type B. Yet I have to find out the
hard way that it doesn&amp;rsquo;t.&lt;/p&gt;</content:encoded></item><item><title>Easter eggs</title><link>https://anaminus.github.io/blog/briefs/202204301952/</link><pubDate>Sat, 30 Apr 2022 19:52:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204301952/</guid><content:encoded>&lt;p&gt;Stop making easter eggs just to tell everyone about them. Those aren&amp;rsquo;t easter
eggs.&lt;/p&gt;</content:encoded></item><item><title>Monkey paw</title><link>https://anaminus.github.io/blog/briefs/202204272223/</link><pubDate>Wed, 27 Apr 2022 22:23:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204272223/</guid><content:encoded>&lt;p&gt;Monkey Paw:&lt;/p&gt;
&lt;p&gt;Devs: Exploits are a big problem.&lt;/p&gt;
&lt;p&gt;Roblox: k DRM time lol&lt;/p&gt;</content:encoded></item><item><title>Bureaucracy</title><link>https://anaminus.github.io/blog/briefs/202204251819/</link><pubDate>Mon, 25 Apr 2022 18:19:56 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204251819/</guid><content:encoded>&lt;p&gt;Nothing like a 10 minute fix blocked by 3 weeks of bureaucracy.&lt;/p&gt;</content:encoded></item><item><title>Stop linking to issues/new</title><link>https://anaminus.github.io/blog/posts/new-issues/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/new-issues/</guid><content:encoded>&lt;p&gt;You have a neat software project. This project has a presence on GitHub. Maybe
you host the source code there, maybe you&amp;rsquo;re just leveraging the issue tracker.&lt;/p&gt;
&lt;p&gt;Your project also has a website. You know that your users will have problems
with your software, so you want to direct them from your website to your issue
tracker. You want them to have the most streamlined experience possible, so you
get the bright idea of linking to &lt;a&gt;issues/new&lt;/a&gt;. How convenient! One click,
and they&amp;rsquo;re able to start writing a report immediately! Except, that isn&amp;rsquo;t what
happens.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/new-issues/login.png" width="400" height="480" loading="lazy"&gt;&lt;figcaption&gt;What actually happens when users click on your link.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Ugh. Don&amp;rsquo;t assume my intentions. All you had to do was link to the issue page.
It&amp;rsquo;s not like opening a new issue from there is hard.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/new-issues/new-issue.png" width="400" height="120" loading="lazy"&gt;&lt;figcaption&gt;Can&amp;rsquo;t miss it.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Other reasons why you may not want to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Non-GitHub users are stonewalled from even viewing your tracker without
backtracking to find an alternate route.&lt;/li&gt;
&lt;li&gt;A user wants to check for an existing issue before submitting their own. Have
you been noticing a lot of duplicates?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you &lt;em&gt;are&lt;/em&gt; going to pull this stunt, maybe you could at least link to the
issue tracker at the same time?&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Have a problem with this blog? &lt;a
href="https://www.youtube.com/watch?v=Jne9t8sHpUc"&gt;Submit a new issue&lt;/a&gt;, or &lt;a
href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"&gt;view all of them&lt;/a&gt;. See?
That wasn&amp;rsquo;t so hard.&lt;/em&gt;&lt;/p&gt;</content:encoded></item></channel></rss>