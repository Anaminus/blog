<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Programming on Anaminus.Blog</title><link>https://anaminus.github.io/blog/tags/programming/</link><description>Recent content in Programming on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 11 Sep 2025 12:00:00 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Repainting</title><link>https://anaminus.github.io/blog/posts/repainting/</link><pubDate>Thu, 11 Sep 2025 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/repainting/</guid><content:encoded>&lt;p&gt;Say you have a white wall that you want to paint blue. So you start, but when
you get 3/4 of the way through, you realize that you actually want to paint the
wall green. So you restart, but when you get 1/2 of the way through, you realize
that you actually want to paint the wall red. So you restart, but when you get
1/4 of the way through, you realize that you have a wall that&amp;rsquo;s red, green,
blue, and white. And it turns out to be really difficult to paint your wall when
it&amp;rsquo;s in 4 different states of color at the same time.&lt;/p&gt;
&lt;p&gt;Before painting a new color, either finish painting the current color, or
unpaint it. If you&amp;rsquo;re unsure which color you want, paint on different walls.&lt;/p&gt;</content:encoded></item><item><title>Slice swap</title><link>https://anaminus.github.io/blog/briefs/202508142233/</link><pubDate>Thu, 14 Aug 2025 22:33:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202508142233/</guid><content:encoded>&lt;p&gt;Swapping two parts of a slice in-place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// ABCDE|FGH&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// EDCBA|FGH&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// EDCBA|HGF&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="nx"&gt;slices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// FGH|ABCDE&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Debugging</title><link>https://anaminus.github.io/blog/briefs/202312111913/</link><pubDate>Mon, 11 Dec 2023 19:13:50 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202312111913/</guid><content:encoded>&lt;p&gt;Notoriously unstable debugger: That assignment didn&amp;rsquo;t change this variable.&lt;/p&gt;
&lt;p&gt;Me: Must be a compiler bug.&lt;/p&gt;</content:encoded></item><item><title>Magic software</title><link>https://anaminus.github.io/blog/briefs/202310172342/</link><pubDate>Tue, 17 Oct 2023 23:42:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202310172342/</guid><content:encoded>&lt;p&gt;Magic in software is just a lack of documentation. A design is fine if we know
why we&amp;rsquo;re using it and the reasons are justified.&lt;/p&gt;</content:encoded></item><item><title>Library performance</title><link>https://anaminus.github.io/blog/briefs/202309222309/</link><pubDate>Fri, 22 Sep 2023 23:09:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309222309/</guid><content:encoded>&lt;p&gt;Comparisons of performance between libraries are completely meaningless. The
most optimal choice between two libraries is neither.&lt;/p&gt;
&lt;p&gt;Consider the following question: is it being used on the hot path?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No: Then performance doesn&amp;rsquo;t matter.&lt;/li&gt;
&lt;li&gt;Yes: Then it will be optimized away.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Language benchmarks</title><link>https://anaminus.github.io/blog/briefs/202309150855/</link><pubDate>Fri, 15 Sep 2023 08:55:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309150855/</guid><content:encoded>&lt;p&gt;If a language benchmark requires sacrificing readability to achieve performance,
then it isn&amp;rsquo;t an accurate measurement of the language.&lt;/p&gt;</content:encoded></item><item><title>Testing testing</title><link>https://anaminus.github.io/blog/briefs/202307301039/</link><pubDate>Sun, 30 Jul 2023 10:39:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307301039/</guid><content:encoded>&lt;p&gt;What tests the testing framework?&lt;/p&gt;</content:encoded></item><item><title>Cartesian product</title><link>https://anaminus.github.io/blog/briefs/202307261558/</link><pubDate>Wed, 26 Jul 2023 15:58:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307261558/</guid><content:encoded>&lt;p&gt;What is the name of the thing I am doing here?&lt;/p&gt;
&lt;figure&gt;
&lt;img src="https://anaminus.github.io/blog/briefs/202307261558/00.png"&gt;
&lt;/figure&gt;&lt;p&gt;Best answer: Cartesian product&lt;/p&gt;</content:encoded></item><item><title>Arrow</title><link>https://anaminus.github.io/blog/briefs/202305232027/</link><pubDate>Tue, 23 May 2023 20:27:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305232027/</guid><content:encoded>&lt;p&gt;The &lt;code&gt;-&amp;gt;&lt;/code&gt; operator is unergonomic to type and almost always looks like shit but
new languages will always find an excuse to include it because teehee it&amp;rsquo;s an
arrow.&lt;/p&gt;</content:encoded></item><item><title>Bad but easy</title><link>https://anaminus.github.io/blog/briefs/202304080059/</link><pubDate>Sat, 08 Apr 2023 00:59:22 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304080059/</guid><content:encoded>&lt;p&gt;Instead of trying to work out a good-but-hard design from scratch, just start
with a bad-but-easy design. Refactoring a bad design into a good design is
rewarding and creates momentum.&lt;/p&gt;</content:encoded></item><item><title>Cursed grammar</title><link>https://anaminus.github.io/blog/briefs/202304051411/</link><pubDate>Wed, 05 Apr 2023 14:11:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304051411/</guid><content:encoded>&lt;pre tabindex="0"&gt;&lt;code&gt;boolean := &amp;#34;true&amp;#34;
 | &amp;#34;fake&amp;#34;

boolean := &amp;#34;right&amp;#34;
 | &amp;#34;false&amp;#34;
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Good code</title><link>https://anaminus.github.io/blog/briefs/202301271430/</link><pubDate>Fri, 27 Jan 2023 14:30:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301271430/</guid><content:encoded>&lt;p&gt;Write good code to write good code.&lt;/p&gt;</content:encoded></item><item><title>Random graphs</title><link>https://anaminus.github.io/blog/briefs/202301121724/</link><pubDate>Thu, 12 Jan 2023 17:24:25 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301121724/</guid><content:encoded>&lt;p&gt;Random graph generation. Blue vertices have unexplored edges, while green ones
are completely explored. Occasionally connects a new vertex to a nearby existing
vertex, forming a loop. Rarely creates a long loop by connecting to the most
distant vertex.&lt;/p&gt;
&lt;p&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202301121724/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;The graph is represented by a force-directed graph that moves the vertices
around to make them easier to visualize. The actual graph is dimensionless, with
the vertices having no 2D or 3D position.&lt;/p&gt;</content:encoded></item><item><title>Bumping dependencies</title><link>https://anaminus.github.io/blog/briefs/202212162341/</link><pubDate>Fri, 16 Dec 2022 23:41:03 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202212162341/</guid><content:encoded>&lt;p&gt;Hope you check dependency diffs before bumping them.&lt;/p&gt;</content:encoded></item><item><title>Software design</title><link>https://anaminus.github.io/blog/briefs/202211142003/</link><pubDate>Mon, 14 Nov 2022 20:03:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211142003/</guid><content:encoded>&lt;p&gt;When a software&amp;rsquo;s design is poorly understood, the only thing users have to go
off of is whatever they&amp;rsquo;re allowed to do.&lt;/p&gt;</content:encoded></item><item><title>Maid pattern</title><link>https://anaminus.github.io/blog/briefs/202211141900/</link><pubDate>Mon, 14 Nov 2022 19:00:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211141900/</guid><content:encoded>&lt;p&gt;Janitor/Maid/etc are different conveniences built on the same core principal:
finalization is established near initialization. I continue to assert that maid
is a pattern, so the best solution is to either roll your own, or pick whatever
best suits your needs.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my implementation, which represents my current theory on the matter:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/Maid"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/Maid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As for memory leaks, no library will save you from having the wrong mindset
about memory management. Maids and Janitors are just one of the many possible
answers to &amp;ldquo;What am I going to do about this thing I just created once I no
longer need it?&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Case convention</title><link>https://anaminus.github.io/blog/briefs/202211140846/</link><pubDate>Mon, 14 Nov 2022 08:46:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211140846/</guid><content:encoded>&lt;p&gt;I normally do PascalCase for public, and camelCase for private. But since
Roblox&amp;rsquo;s convention for modules is module.camelCase, I match that instead. So
the difference becomes unexportedFunction vs module.exportedFunction, and
PascalCase just isn&amp;rsquo;t used for top-level functions.&lt;/p&gt;</content:encoded></item><item><title>Dead project</title><link>https://anaminus.github.io/blog/briefs/202211080648/</link><pubDate>Tue, 08 Nov 2022 06:48:29 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211080648/</guid><content:encoded>&lt;p&gt;A perfectly correct but dead project is better than a mostly correct but living
project only if the project is already completely finished.&lt;/p&gt;</content:encoded></item><item><title>Little brain</title><link>https://anaminus.github.io/blog/briefs/202211071031/</link><pubDate>Mon, 07 Nov 2022 10:31:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211071031/</guid><content:encoded>&lt;p&gt;So much software to write, so little brain to write them.&lt;/p&gt;</content:encoded></item><item><title>Immediate mode</title><link>https://anaminus.github.io/blog/briefs/202211021020/</link><pubDate>Wed, 02 Nov 2022 10:20:02 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211021020/</guid><content:encoded>&lt;p&gt;Why do we use immediate mode libraries on top of retained mode APIs on top of
immediate mode graphics?&lt;/p&gt;</content:encoded></item><item><title>Transpiling</title><link>https://anaminus.github.io/blog/briefs/202211012140/</link><pubDate>Tue, 01 Nov 2022 21:40:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211012140/</guid><content:encoded>&lt;p&gt;My beef with transpiling is writing in one language and receiving errors in
another language. Or worse, having to mentally map one to the other while
stepping through a debugger. It&amp;rsquo;s not worth it if the productivity gained during
writing is lost during debugging.&lt;/p&gt;</content:encoded></item><item><title>Module packages</title><link>https://anaminus.github.io/blog/briefs/202211012005/</link><pubDate>Tue, 01 Nov 2022 20:05:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211012005/</guid><content:encoded>&lt;p&gt;I feel like a problem with modules is that a module&amp;rsquo;s namespace can&amp;rsquo;t be divided
further than one ModuleScript. It would be nice if there were some kind of
Package object, where all child ModuleScripts shared the same environment.&lt;/p&gt;</content:encoded></item><item><title>Type smuggling</title><link>https://anaminus.github.io/blog/briefs/202210261007/</link><pubDate>Wed, 26 Oct 2022 10:07:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210261007/</guid><content:encoded>&lt;p&gt;Type smuggling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(...))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Allows you to get types from a module without requiring it. Does not work with
exported types.&lt;/p&gt;
&lt;p&gt;To get around exporting, types can be smuggled through the returned table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Innocent module stuff.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;export&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Some types. Must require&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- the module in order to get.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Smuggle them through&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- the returned table.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export._Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export._Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;This is incredibly useful for smuggling types from a server module in a client
module so the data the client is going to receive from the server via a remote
can be fully typed.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://x.com/fewkz/status/1590230560764760065"&gt;@fewkz, 6:31 AM · Nov 9, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So nothing breaks on the client even though the modules containing the server
types aren’t replicated, because types don’t matter at runtime. Interesting
approach.&lt;/p&gt;</content:encoded></item></channel></rss>