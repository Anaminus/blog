<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Github on Anaminus.Blog</title><link>https://anaminus.github.io/blog/tags/github/</link><description>Recent content in Github on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 07 Mar 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Safe cron minutes</title><link>https://anaminus.github.io/blog/posts/safe-cron-minutes/</link><pubDate>Thu, 07 Mar 2024 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/safe-cron-minutes/</guid><description>When is the best time to run your workflow?</description><content:encoded>&lt;pre>&lt;code>06 07 08 09 11 12 13 17
18 19 21 22 23 24 26 27
33 34 36 37 38 39 41 42
43 47 48 49 51 52 53 54
&lt;/code>&lt;/pre>
&lt;h2 id="theory">Theory&lt;/h2>
&lt;p>Everyone runs their scheduled jobs at simple minute steps like 60, 30, 15, or 5.&lt;/p>
&lt;pre>&lt;code> 0 * * * *
*/30 * * * *
*/15 * * * *
*/ 5 * * * *
&lt;/code>&lt;/pre>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Cron aligns minutes to the clock, leading to huge spikes of usage at those
intervals, as the hourly jobs, half-hourly jobs, etc, all run at once.&lt;/p>
&lt;pre>&lt;code>| | | |
| | | | | | |
| | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
&lt;/code>&lt;/pre>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Use random, unusual minutes to distribute the load. Exclude the most common
minutes, and nearby minutes based on prevalence.&lt;/p>
&lt;pre>&lt;code>7 * * * *
26 */2 * * *
34,53 * * * *
&lt;/code>&lt;/pre>
&lt;h2 id="rules">Rules&lt;/h2>
&lt;p>Begin with the set of all minutes in the hour.&lt;/p>
&lt;ol>
&lt;li>Exclude 5 minute intervals.&lt;/li>
&lt;li>Exclude 15 minute intervals and nearest 1 minutes.&lt;/li>
&lt;li>Exclude 30 minute intervals and nearest 2 minutes.&lt;/li>
&lt;li>Exclude 60 minute intervals and nearest 4 minutes.&lt;/li>
&lt;li>Select minutes randomly from the remaining set.&lt;/li>
&lt;/ol>
&lt;!-- -->
&lt;pre>&lt;code>1.	2.	3.	4.	5.

00
	01
		02
			03
			04
05
				06 &amp;lt;
				07 &amp;lt;
				08 &amp;lt;
				09 &amp;lt;
10
				11 &amp;lt;
				12 &amp;lt;
				13 &amp;lt;
	14
15
	16
				17 &amp;lt;
				18 &amp;lt;
				19 &amp;lt;
20
				21 &amp;lt;
				22 &amp;lt;
				23 &amp;lt;
				24 &amp;lt;
25
				26 &amp;lt;
				27 &amp;lt;
		28
	29
30
	31
		32
				33 &amp;lt;
				34 &amp;lt;
35
				36 &amp;lt;
				37 &amp;lt;
				38 &amp;lt;
				39 &amp;lt;
40
				41 &amp;lt;
				42 &amp;lt;
				43 &amp;lt;
	44
45
	46
				47 &amp;lt;
				48 &amp;lt;
				49 &amp;lt;
50
				51 &amp;lt;
				52 &amp;lt;
				53 &amp;lt;
				54 &amp;lt;
55
			56
			57
		58
	59
00
&lt;/code>&lt;/pre>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Is this really problem? Probably not; better solutions have likely taken care of
it.&lt;/p>
&lt;p>Don&amp;rsquo;t take &lt;code>19 * * * *&lt;/code>, though. I&amp;rsquo;m using it.&lt;/p></content:encoded></item><item><title>Securing secret branches</title><link>https://anaminus.github.io/blog/posts/secret-branch/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/secret-branch/</guid><description>How to make sure you don't git-push the wrong thing.</description><content:encoded>&lt;p>Most posts I write will never be published. But I still keep them around
locally, because they often contain useful bits that will likely find their way
into another post.&lt;/p>
&lt;p>The blog is managed by git. When I want to publish a new post, I just commit and
push (&amp;ldquo;pushlish&amp;rdquo;?). I keep drafts on a separate branch that stays local.&lt;/p>
&lt;p>But how do I make sure it stays local? I don&amp;rsquo;t want to accidentally push super
secret drafts to GitHub! Fortunately, GitHub has what are called &amp;ldquo;Protection
rules&amp;rdquo;.&lt;/p>
&lt;p>To set it up, first the branch needs to be on GitHub. It&amp;rsquo;s easy enough to create
a new branch on the website by going to the &lt;code>/branches&lt;/code> page.&lt;/p>
&lt;p>&lt;img src="fig1.png" alt="">&lt;/p>
&lt;p>The branch has to be based off of another one. I used the same branch as what my
local &lt;code>drafts&lt;/code> branch is based off of. This will make accidental pulls safe,
since git will just think the local branch is the latest.&lt;/p>
&lt;p>Next, I went to Settings, then Branches, and added a new Branch protection rule,
where the pattern matched the name of the branch:&lt;/p>
&lt;p>&lt;img src="fig2.png" alt="">&lt;/p>
&lt;p>Then I included the Lock branch rule. This will prevent me from pushing to it. I
also included the &amp;ldquo;Do not allow bypassing above settings&amp;rdquo;. Seems like a safe
thing to do.&lt;/p>
&lt;p>&lt;img src="fig3.png" alt="">&lt;/p>
&lt;p>Saved the rule, and that&amp;rsquo;s it.&lt;/p>
&lt;p>&lt;img src="fig4.png" alt="">&lt;/p>
&lt;p>Now when I try to push to the branch, GitHub will reject the attempt.&lt;/p>
&lt;p>&lt;img src="fig5.png" alt="">&lt;/p>
&lt;p>Notably, git still tries to upload everything, and the rejection comes
afterwards. I could add a local pre-push hook to prevent the uploading, but I&amp;rsquo;m
not worried about it. The point is to prevent the drafts from becoming public,
which has already been accomplished.&lt;/p></content:encoded></item><item><title>Stop linking to issues/new</title><link>https://anaminus.github.io/blog/posts/new-issues/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/new-issues/</guid><content:encoded>&lt;p>You have a neat software project. This project has a presence on GitHub. Maybe
you host the source code there, maybe you&amp;rsquo;re just leveraging the issue tracker.&lt;/p>
&lt;p>Your project also has a website. You know that your users will have problems
with your software, so you want to direct them from your website to your issue
tracker. You want them to have the most streamlined experience possible, so you
get the bright idea of linking to &lt;a>issues/new&lt;/a>. How convenient! One click,
and they&amp;rsquo;re able to start writing a report immediately! Except, that isn&amp;rsquo;t what
happens.&lt;/p>
&lt;figure>
&lt;img src="login.png" alt="An unsolicited GitHub login page.">
&lt;figcaption>
What actually happens when users click on your link.
&lt;/figcaption>
&lt;/figure>
&lt;p>Ugh. Don&amp;rsquo;t assume my intentions. All you had to do was link to the issue page.
It&amp;rsquo;s not like opening a new issue from there is hard.&lt;/p>
&lt;figure>
&lt;img src="new-issue.png" alt="New-issue button on GitHub's issue tracker page.">
&lt;figcaption>
Can't miss it.
&lt;/figcaption>
&lt;/figure>
&lt;p>Other reasons why you may not want to do this:&lt;/p>
&lt;ul>
&lt;li>Non-GitHub users are stonewalled from even viewing your tracker without
backtracking to find an alternate route.&lt;/li>
&lt;li>A user wants to check for an existing issue before submitting their own. Have
you been noticing a lot of duplicates?&lt;/li>
&lt;/ul>
&lt;p>If you &lt;em>are&lt;/em> going to pull this stunt, maybe you could at least link to the
issue tracker at the same time?&lt;/p>
&lt;hr>
&lt;p>&lt;em>Have a problem with this blog? &lt;a
href="https://www.youtube.com/watch?v=Jne9t8sHpUc">Submit a new issue&lt;/a>, or &lt;a
href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">view all of them&lt;/a>. See?
That wasn&amp;rsquo;t so hard.&lt;/em>&lt;/p></content:encoded></item></channel></rss>