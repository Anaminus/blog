<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Roblox on Anaminus.Blog</title><link>https://anaminus.github.io/blog/tags/roblox/</link><description>Recent content in Roblox on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Sat, 27 Apr 2024 23:09:10 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/tags/roblox/index.xml" rel="self" type="application/rss+xml"/><item><title>Missing separator</title><link>https://anaminus.github.io/blog/briefs/202404272309/</link><pubDate>Sat, 27 Apr 2024 23:09:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404272309/</guid><content:encoded>&lt;p&gt;The changes shown in this image hint at how parameters are named internally in
Roblox&amp;rsquo;s engine. It&amp;rsquo;s clear that someone missed a separator when adding the
&amp;ldquo;plugin&amp;rdquo; parameter.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202404272309/00.png" width="514" height="327" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Premature ads</title><link>https://anaminus.github.io/blog/briefs/202404242216/</link><pubDate>Wed, 24 Apr 2024 22:16:02 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202404242216/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;You absolutely should not run ads for a game that is first-day-public. You
need to publicly softlaunch for at least 10 (maybe 14?) days first or you&amp;rsquo;re
going to run afoul of the security system.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/MrChickenRocket/status/1783331200175890922"&gt;@MrChickenRocket, 3:04 AM · Apr 25, 2024&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where would I learn this information that isn&amp;rsquo;t an impromptu tweet from someone
I happen to follow replying to someone else I happen to follow that I happen to
see incidentally?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Newly &amp;ldquo;first time public&amp;rdquo; places are subject to a bunch of security and
filtering because of exploiters. The exact details are not published by roblox
for .. reasons? I guess, but I&amp;rsquo;ve watched multiple game launches step on that
garden rake of not being able to have people join.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/MrChickenRocket/status/1783363574192320705"&gt;@MrChickenRocket, 5:13 AM · Apr 25, 2024&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</content:encoded></item><item><title>API dump woes</title><link>https://anaminus.github.io/blog/briefs/202402191024/</link><pubDate>Mon, 19 Feb 2024 10:24:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202402191024/</guid><content:encoded>&lt;p&gt;To whoever did this, I just want you to know that I am very annoyed by your
decision.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202402191024/00.png" width="808" height="615" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Buffer efficiency</title><link>https://anaminus.github.io/blog/briefs/202402161108/</link><pubDate>Fri, 16 Feb 2024 11:08:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202402161108/</guid><content:encoded>&lt;p&gt;Is passing a buffer directly to MessagingService/DataStore actually better?
Mandatory compression means that a size check is required, which means double
encoding. Also does base64, which has worse size overhead than base85 via Luau.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202402161108/00.png" width="505" height="765" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;For specialized data, the developer will be able achieve higher info density way
better than general compression ever could. I&amp;rsquo;d argue that the compression step
should be skipped entirely.&lt;/p&gt;</content:encoded></item><item><title>Longevity</title><link>https://anaminus.github.io/blog/briefs/202312010635/</link><pubDate>Fri, 01 Dec 2023 06:35:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202312010635/</guid><content:encoded>&lt;p&gt;17 years on the platform is not enough for #Roblox&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202312010635/00.png" width="282" height="131" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>DataStore keys</title><link>https://anaminus.github.io/blog/briefs/202311220936/</link><pubDate>Wed, 22 Nov 2023 09:36:38 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311220936/</guid><content:encoded>&lt;p&gt;Boring Facts: DataStore keys are binary-safe. They have a size limit of 50
bytes, not characters. That&amp;rsquo;s 400 full bits to work with.&lt;/p&gt;</content:encoded></item><item><title>Creator docs</title><link>https://anaminus.github.io/blog/briefs/202311080005/</link><pubDate>Wed, 08 Nov 2023 00:05:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202311080005/</guid><content:encoded>&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202311080005/00.jpg" width="882" height="756" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Glass</title><link>https://anaminus.github.io/blog/briefs/202309301803/</link><pubDate>Sat, 30 Sep 2023 18:03:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309301803/</guid><content:encoded>&lt;p&gt;Glass is being fun lately.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202309301803/00.jpg" width="1130" height="700" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>LiveBind plugin</title><link>https://anaminus.github.io/blog/briefs/202309301431/</link><pubDate>Sat, 30 Sep 2023 14:31:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309301431/</guid><content:encoded>&lt;p&gt;LiveBind: A quick and dirty plugin to make tag bindings to aid with development.
As an example, a binding that fills in terrain based on parts is included.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/plugins/LiveBind"&gt;https://github.com/Anaminus/roblox-library/tree/master/plugins/LiveBind&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202309301431/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Rotating and tilting</title><link>https://anaminus.github.io/blog/briefs/202309252224/</link><pubDate>Mon, 25 Sep 2023 22:24:07 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309252224/</guid><content:encoded>&lt;p&gt;In Roblox Studio, Ctrl+R &amp;ldquo;rotates&amp;rdquo; around the normal of the focused surface.
Ctrl+T uses the axis that is nearest aligned to the camera&amp;rsquo;s local X axis, so
that it &amp;ldquo;tilts&amp;rdquo; towards the camera.&lt;/p&gt;</content:encoded></item><item><title>RunService</title><link>https://anaminus.github.io/blog/briefs/202309240949/</link><pubDate>Sun, 24 Sep 2023 09:49:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309240949/</guid><content:encoded>&lt;p&gt;If you need to simulate something, such as an assembly, you can call
RunService:Run() and :Stop() from the command bar. It even respects undo/redo.
Keep in mind that the whole place is simulated.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202309240949/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Best UI</title><link>https://anaminus.github.io/blog/briefs/202309222313/</link><pubDate>Fri, 22 Sep 2023 23:13:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309222313/</guid><content:encoded>&lt;p&gt;Roblox Studio&amp;rsquo;s interface should be more like Blender&amp;rsquo;s.&lt;/p&gt;</content:encoded></item><item><title>Real houses</title><link>https://anaminus.github.io/blog/briefs/202309191037/</link><pubDate>Tue, 19 Sep 2023 10:37:42 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309191037/</guid><content:encoded>&lt;p&gt;Latest obsession: building houses realistically. Most of it will be abstracted
away in an actual build, but doing it this way informs the layout of the house.
For example, the stairway in this image isn&amp;rsquo;t ideal, because its headroom
conflicts with the roof (1.5-story house).&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202309191037/00.jpg" width="1200" height="640" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Remote signals</title><link>https://anaminus.github.io/blog/briefs/202309160943/</link><pubDate>Sat, 16 Sep 2023 09:43:37 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202309160943/</guid><content:encoded>&lt;p&gt;Remotes effectively break the Signal pattern, so the only thing you should be
doing with them is :Connect()ing exactly one listener.&lt;/p&gt;</content:encoded></item><item><title>TaskPolyfill</title><link>https://anaminus.github.io/blog/briefs/202308191529/</link><pubDate>Sat, 19 Aug 2023 15:29:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202308191529/</guid><content:encoded>&lt;p&gt;Polyfill for Roblox&amp;rsquo;s task library. Useful for standalone Luau.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/TaskPolyfill"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/TaskPolyfill&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Tests n benchmarks</title><link>https://anaminus.github.io/blog/briefs/202307252210/</link><pubDate>Tue, 25 Jul 2023 22:10:40 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307252210/</guid><content:encoded>&lt;p&gt;thinkin bout tests n benchmarks&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202307252210/00.png" width="798" height="711" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Scope library</title><link>https://anaminus.github.io/blog/briefs/202307221951/</link><pubDate>Sat, 22 Jul 2023 19:51:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307221951/</guid><content:encoded>&lt;p&gt;Experimental library for lifetime management and value scoping.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/Scope"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/Scope&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Connect serial</title><link>https://anaminus.github.io/blog/briefs/202307181212/</link><pubDate>Tue, 18 Jul 2023 12:12:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307181212/</guid><content:encoded>&lt;p&gt;Function to connect a listener to a signal serially. task.cancel continues to be
MVP.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202307181212/00.png" width="862" height="497" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>ModuleReflector</title><link>https://anaminus.github.io/blog/briefs/202307141235/</link><pubDate>Fri, 14 Jul 2023 12:35:13 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307141235/</guid><content:encoded>&lt;p&gt;Here&amp;rsquo;s a module for requiring modules without caching, and monitoring Source
changes. A key difference from other implementations is that loadstring isn&amp;rsquo;t
used. The killer feature is that breakpoints can be synced between copy and
original, so debugging is possible.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/ModuleReflector"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/ModuleReflector&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, plugins can&amp;rsquo;t access the DebuggerManager, so the debugging method
has to be invoked through the command bar. Fortunately, plugins and the command
bar share the same &lt;code&gt;_G&lt;/code&gt; table, so a plugin can expose it that way.&lt;/p&gt;</content:encoded></item><item><title>Button movement</title><link>https://anaminus.github.io/blog/briefs/202307090034/</link><pubDate>Sun, 09 Jul 2023 00:34:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307090034/</guid><content:encoded>&lt;p&gt;Have GuiButtons always passed mouse movement inputs or am I crazy? They sink
mouse button inputs just fine.&lt;/p&gt;
&lt;p&gt;Can&amp;rsquo;t even use GetGuiObjectsAtPosition to enforce sinking because plugin GUIs
aren&amp;rsquo;t a descendant of any BasePlayerGui. This is fun.&lt;/p&gt;</content:encoded></item><item><title>Destroying</title><link>https://anaminus.github.io/blog/briefs/202307090002/</link><pubDate>Sun, 09 Jul 2023 00:02:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202307090002/</guid><content:encoded>&lt;p&gt;Boring Facts: If Destroying is used to add a child to the destroyed instance,
that child wont be destroyed.&lt;/p&gt;</content:encoded></item><item><title>Input handling</title><link>https://anaminus.github.io/blog/briefs/202306282139/</link><pubDate>Wed, 28 Jun 2023 21:39:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306282139/</guid><content:encoded>&lt;p&gt;Certain input types have to be handled in certain ways. Key repetitions must be
handled by monitoring the key&amp;rsquo;s InputObject, while mouse wheel input is best
handled by getting it from a source, because an emission from a source doesn&amp;rsquo;t
always correspond to a property change.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306282139/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Input position</title><link>https://anaminus.github.io/blog/briefs/202306272259/</link><pubDate>Tue, 27 Jun 2023 22:59:22 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306272259/</guid><content:encoded>&lt;p&gt;Boring Facts: The Position of a Keyboard InputObject will update with the
position of the mouse while the key is held down. This includes the mouse wheel.&lt;/p&gt;
&lt;p&gt;Correction: Only some keys do this, including the arrow keys, Return, Backspace,
and Delete.&lt;/p&gt;
&lt;p&gt;Further correction: this is caused by key repetition. Generally, a keyboard
object will update with the position of the mouse. However, certain keys that
repeat will switch to the End state, then immediately back to the Begin state,
and repeat again while the key is held down.&lt;/p&gt;</content:encoded></item><item><title>Keyboard InputObjects</title><link>https://anaminus.github.io/blog/briefs/202306272255/</link><pubDate>Tue, 27 Jun 2023 22:55:05 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306272255/</guid><content:encoded>&lt;p&gt;Boring Facts: Keyboard InputObjects are reused per KeyCode, but only while the
current source (e.g. UserInputService or a GUI) is in focus.&lt;/p&gt;</content:encoded></item><item><title>Input visualizer</title><link>https://anaminus.github.io/blog/briefs/202306272253/</link><pubDate>Tue, 27 Jun 2023 22:53:12 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306272253/</guid><content:encoded>&lt;p&gt;Widget to visualize how InputObjects are produced. Whenever a new object is
made, it is added to the list, then monitored for changes. Each
Source+UserInputType+KeyCode combination produces its own object. Sources used
are the Input signals from UserInputService and a Frame GUI.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306272253/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Track the mouse</title><link>https://anaminus.github.io/blog/briefs/202306271227/</link><pubDate>Tue, 27 Jun 2023 12:27:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306271227/</guid><content:encoded>&lt;p&gt;A unique advantage of ScrollingFrames over a custom implementation is that the
scrollbar can track the mouse across the entire screen, not just the viewport.&lt;/p&gt;
&lt;p&gt;Correction: This isn&amp;rsquo;t unique: the behavior applies to InputObjects, but only
while a mouse button is held down.&lt;/p&gt;</content:encoded></item><item><title>StudioStyleGuideColor</title><link>https://anaminus.github.io/blog/briefs/202306262146/</link><pubDate>Mon, 26 Jun 2023 21:46:24 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306262146/</guid><content:encoded>&lt;p&gt;Fusion widget to help narrow down what StudioStyleGuideColor a studio element is
using.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306262146/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Lattice</title><link>https://anaminus.github.io/blog/briefs/202306241601/</link><pubDate>Sat, 24 Jun 2023 16:01:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306241601/</guid><content:encoded>&lt;p&gt;A port of my &amp;ldquo;lattice&amp;rdquo; container GUI to Fusion. Takes a grid of columns and rows
defined as constant pixels or fractional values, and turns them into static
UDim2s. Has options for padding, margins, and a visualizer for debugging.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202306241601/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>How the Plugin Marketplace actually works</title><link>https://anaminus.github.io/blog/posts/plugin-marketplace/</link><pubDate>Thu, 22 Jun 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/plugin-marketplace/</guid><content:encoded>&lt;h2 id="part-i---the-plugin-compensation-model"&gt;Part I - The Plugin Compensation Model&lt;/h2&gt;
&lt;p&gt;You are &lt;strong&gt;developing a game&lt;/strong&gt; on Roblox. Some aspect of your workflow is
lacking, so you write a Studio plugin. This plugin improves the workflow of the
&lt;strong&gt;development of your game&lt;/strong&gt;. You rejoice, as you are able to &lt;strong&gt;develop your
game&lt;/strong&gt; better. The hours put into the development of the plugin are compensated
by the increase in revenue deriving from the plugin allowing you to push out
updates and fixes to your game faster and more efficiently.&lt;/p&gt;
&lt;p&gt;Compensation for hours worked are derived from &lt;strong&gt;your game&lt;/strong&gt;, so putting in work
that doesn&amp;rsquo;t improve &lt;strong&gt;your game&lt;/strong&gt; is wasted work. If you are improving a plugin
that does not result in an improvement to your game, then &lt;strong&gt;you will not be
compensated for your work&lt;/strong&gt;. Thus, if there is no game, but you are still doing
work on plugins, then you are not being compensated.&lt;/p&gt;
&lt;h2 id="part-ii---arent-developers-just-peachy"&gt;Part II - Aren&amp;rsquo;t developers just peachy?&lt;/h2&gt;
&lt;p&gt;Out of the goodness of your heart, you release this plugin for use by other
developers. You have no obligation to do this, nor are you beholden to any other
users of your plugin. You&amp;rsquo;ve already been compensated (by your game), so this is
entirely a charitable gesture. If you&amp;rsquo;re smart, you either maintain it as a
hobby, or just let it sit there while you do more important things.&lt;/p&gt;
&lt;h2 id="part-iii---here-comes-the-money"&gt;Part III - Here comes the money&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/400582"&gt;Roblox decides&lt;/a&gt; to implement the option to put plugins on sale.
They do this either because they mistake how the Plugin Compensation Model
works, or they think developers&amp;rsquo; charity should be rewarded with some petty
cash.&lt;/p&gt;
&lt;p&gt;Regardless, this attracts developers to do work purely on plugins. As we know,
because they have no game backing their work, they are compensated only with
enough to buy a nice virtual hat or something. That is, no money.&lt;/p&gt;
&lt;h2 id="conclusions---this-isnt-a-part"&gt;Conclusions - This isn&amp;rsquo;t a part&lt;/h2&gt;
&lt;p&gt;To summarize, without a game backing your plugin:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Make plugin -&amp;gt; ??? -&amp;gt; No money&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With a game:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Make plugin -&amp;gt; Improve game -&amp;gt; Yes money&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is how the Plugin Compensation Model has worked since the inception of
plugins, and this is how it continues to work to this day, despite what everyone
thinks, and despite Roblox&amp;rsquo;s apparent efforts to make it look like plugins can
bring in yes money independently. Don&amp;rsquo;t be fooled.&lt;/p&gt;
&lt;p&gt;Assuming that this model does not change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &amp;ldquo;marketplace&amp;rdquo; should be abolished. That is, all plugins should be free.
Allowing a price to be put on plugins tricks developers into believing that
they are a possible source of yes money.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re a plugin developer, make games instead. Make UGC. Make something
that can be serviced by plugins. Or, secure patrons. Seek contracting or
employment by one of the many studios sprouting up. Make plugins directly in
service of &lt;em&gt;their&lt;/em&gt; content while making them pay you definite yes money.&lt;/li&gt;
&lt;li&gt;Whatever it is you &lt;span title="oh baby a triple"&gt;&lt;em&gt;do&lt;/em&gt; do, do&lt;/span&gt; not
expect compensation for work done on a plugin that isn&amp;rsquo;t directly in service
of a game or other UGC. At best, expect no money.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Hand-holding</title><link>https://anaminus.github.io/blog/briefs/202306201618/</link><pubDate>Tue, 20 Jun 2023 16:18:54 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202306201618/</guid><content:encoded>&lt;p&gt;Game: depicts hand-holding&lt;/p&gt;
&lt;p&gt;Roblox: this game is rated 17+&lt;/p&gt;</content:encoded></item><item><title>🗿</title><link>https://anaminus.github.io/blog/briefs/202305201058/</link><pubDate>Sat, 20 May 2023 10:58:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305201058/</guid><content:encoded>&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202305201058/00.jpg" width="1200" height="675" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Child indexing</title><link>https://anaminus.github.io/blog/briefs/202305190907/</link><pubDate>Fri, 19 May 2023 09:07:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305190907/</guid><content:encoded>&lt;p&gt;stop [clap] using [clap] child [clap] indexing&lt;/p&gt;
&lt;p&gt;The entire problem is that the operation isn’t forward compatible. Either we
can’t index children, or Roblox can’t add new class members.&lt;/p&gt;</content:encoded></item><item><title>KVM switches</title><link>https://anaminus.github.io/blog/briefs/202305081614/</link><pubDate>Mon, 08 May 2023 16:14:39 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202305081614/</guid><content:encoded>&lt;p&gt;At this point, I&amp;rsquo;m just gonna call it: VM with GPU passthru is dead. Long live
KVM switches.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/proper-support-for-the-linux-platform/56544/88"&gt;https://devforum.roblox.com/t/proper-support-for-the-linux-platform/56544/88&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Punishment</title><link>https://anaminus.github.io/blog/briefs/202304211611/</link><pubDate>Fri, 21 Apr 2023 16:11:25 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304211611/</guid><content:encoded>&lt;p&gt;Surely we&amp;rsquo;re past punishing users for playing our games in ways we don&amp;rsquo;t like.&lt;/p&gt;</content:encoded></item><item><title>Immutable data</title><link>https://anaminus.github.io/blog/briefs/202304071532/</link><pubDate>Fri, 07 Apr 2023 15:32:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304071532/</guid><content:encoded>&lt;p&gt;Hot Take: The table.clone-type immutable data libraries that people keep making
are actually just table utility libraries with immutability add in for vague
reasons. They don&amp;rsquo;t actually do any of the heavy lifting involved in making
immutable data efficient.&lt;/p&gt;</content:encoded></item><item><title>It reads, it writes</title><link>https://anaminus.github.io/blog/briefs/202304031728/</link><pubDate>Mon, 03 Apr 2023 17:28:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202304031728/</guid><content:encoded>&lt;p&gt;Been rewriting rbxfile. I think I&amp;rsquo;ve got property type implementations
abstracted down to something satisfying. &amp;ldquo;it&amp;rdquo; stands for &amp;ldquo;iterator&amp;rdquo;, so this
could be considered a pun.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;itRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;ReadValue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reads&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;itRect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;WriteValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Rect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Min&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;X&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rf32b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Max&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Thatcher Cinematic Universe</title><link>https://anaminus.github.io/blog/briefs/202303172225/</link><pubDate>Fri, 17 Mar 2023 22:25:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303172225/</guid><content:encoded>&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202303172225/00.jpg" width="1165" height="730" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>WireframeHandleAdornment</title><link>https://anaminus.github.io/blog/briefs/202303171137/</link><pubDate>Fri, 17 Mar 2023 11:37:07 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171137/</guid><content:encoded>&lt;p&gt;Tip for using WireframeHandleAdornment: The Color3/Transparency of the adornment
only affects newly added lines, so you only need one adornment to draw lines
with any appearance.&lt;/p&gt;</content:encoded></item><item><title>Screen/viewport split</title><link>https://anaminus.github.io/blog/briefs/202303171116/</link><pubDate>Fri, 17 Mar 2023 11:16:01 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171116/</guid><content:encoded>&lt;p&gt;The screen/viewport split was one of the biggest blunders Roblox ever made.&lt;/p&gt;</content:encoded></item><item><title>R-tree</title><link>https://anaminus.github.io/blog/briefs/202303171111/</link><pubDate>Fri, 17 Mar 2023 11:11:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202303171111/</guid><content:encoded>&lt;p&gt;Visualization of an r-tree. WireframeHandleAdornment is essential for debugging.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202303171111/00.jpg" width="1200" height="684" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;It&amp;rsquo;s harder to draw shapes, but it&amp;rsquo;s way better than keeping track of a million
handle adornments.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202303171111/01.jpg" width="1200" height="706" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Angry voice lines</title><link>https://anaminus.github.io/blog/briefs/202302081049/</link><pubDate>Wed, 08 Feb 2023 10:49:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302081049/</guid><content:encoded>&lt;p&gt;Roblox allowing things like profanity will actually make the writing of angry
characters worse.&lt;/p&gt;</content:encoded></item><item><title>Enum alises</title><link>https://anaminus.github.io/blog/briefs/202302051058/</link><pubDate>Sun, 05 Feb 2023 10:58:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302051058/</guid><content:encoded>&lt;p&gt;Renamed enum items are &amp;ldquo;removed&amp;rdquo; from the API, but still stick around as an
alias to whatever replaced them.&lt;/p&gt;</content:encoded></item><item><title>Roblox 2:2</title><link>https://anaminus.github.io/blog/briefs/202302041156/</link><pubDate>Sat, 04 Feb 2023 11:56:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302041156/</guid><content:encoded>&lt;p&gt;And on the sixth day God rested, for the damn servers were down anyway.&lt;/p&gt;</content:encoded></item><item><title>Go big</title><link>https://anaminus.github.io/blog/briefs/202302021519/</link><pubDate>Thu, 02 Feb 2023 15:19:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202302021519/</guid><content:encoded>&lt;p&gt;Investors: How make number go bigger?&lt;/p&gt;
&lt;p&gt;Roblox:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/beta-update-new-experiences-have-team-create-enabled/2172232"&gt;https://devforum.roblox.com/t/beta-update-new-experiences-have-team-create-enabled/2172232&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202302021519/00.jpg" width="802" height="956" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;For comparison, stats as displayed on 2022-11-15:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202302021519/01.png" width="760" height="359" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Idiot theory: Roblox made a bad-faith measurement of developers/experiences in
Q2, with the stats from Q3 (above) being more accurate. To address number go
down, they&amp;rsquo;re pushing Team Create hard to make number go big again.&lt;/p&gt;</content:encoded></item><item><title>CFrame mnemonics</title><link>https://anaminus.github.io/blog/posts/cframe-mnemonics/</link><pubDate>Tue, 31 Jan 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/cframe-mnemonics/</guid><description>A way to remember how CFrames are used.</description><content:encoded>&lt;h2 id="methods"&gt;Methods&lt;/h2&gt;
&lt;p&gt;Certain methods on CFrame have an equivalent operator-based expression, which
can be useful for understanding how they work:&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Method&lt;/th&gt;
 &lt;th&gt;Expression&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:ToWorldSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A * (B::CFrame)&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:ToObjectSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A:Inverse() * (B::CFrame)&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:PointToWorldSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A * (B::Vector3)&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:PointToObjectSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A:Inverse() * (B::Vector3)&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:VectorToWorldSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A.Rotation * (B::Vector3)&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:VectorToObjectSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A:Inverse().Rotation * (B::Vector3)&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="space-conversion-analogy"&gt;Space-conversion analogy&lt;/h2&gt;
&lt;p&gt;CFrame multiplication is not equivalent to addition. However, certain aspects
can be reused in order to remember how it works.&lt;/p&gt;
&lt;p&gt;Pretend that &lt;code&gt;A * B&lt;/code&gt; is analogous to &lt;code&gt;B + A&lt;/code&gt;. Also pretend that &lt;code&gt;A:Inverse()&lt;/code&gt; is
analogous to &lt;code&gt;-A&lt;/code&gt;. There is no subtraction, but the formula &lt;code&gt;B - A&lt;/code&gt; can be
rewritten as &lt;code&gt;-A + B&lt;/code&gt;. So, when we see the expression &lt;code&gt;A:Inverse() * B&lt;/code&gt;, it can
be thought of as a sort of &lt;code&gt;B - A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This explains ToObjectSpace. It &amp;ldquo;subtracts&amp;rdquo; the origin &lt;code&gt;A&lt;/code&gt; from the subject &lt;code&gt;B&lt;/code&gt;
to get the location of &lt;code&gt;B&lt;/code&gt; relative to &lt;code&gt;A&lt;/code&gt;. ToWorldSpace is the reverse; the
origin is added back to the subject to get the real world location.&lt;/p&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;Method&lt;/th&gt;
 &lt;th style="text-align: right"&gt;Analogy&lt;/th&gt;
 &lt;th style="text-align: right"&gt;Rewritten&lt;/th&gt;
 &lt;th&gt;Actual&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:ToWorldSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td style="text-align: right"&gt;&lt;code&gt;B + A&lt;/code&gt;&lt;/td&gt;
 &lt;td style="text-align: right"&gt;&lt;code&gt;A + B&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A * B&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;&lt;code&gt;A:ToObjectSpace(B)&lt;/code&gt;&lt;/td&gt;
 &lt;td style="text-align: right"&gt;&lt;code&gt;B - A&lt;/code&gt;&lt;/td&gt;
 &lt;td style="text-align: right"&gt;&lt;code&gt;-A + B&lt;/code&gt;&lt;/td&gt;
 &lt;td&gt;&lt;code&gt;A:Inverse() * B&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</content:encoded></item><item><title>On CFrame vectors</title><link>https://anaminus.github.io/blog/posts/cframe-vectors/</link><pubDate>Sun, 29 Jan 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/cframe-vectors/</guid><description>Correcting documentation on CFrames.</description><content:encoded>&lt;p&gt;In Roblox, the &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame"&gt;CFrame&lt;/a&gt; type has several &amp;ldquo;Vector&amp;rdquo; fields representing
the directions of various axes of the CFrame. There are two sets of 3 vectors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#RightVector"&gt;RightVector&lt;/a&gt;, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#UpVector"&gt;UpVector&lt;/a&gt;, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#LookVector"&gt;LookVector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#XVector"&gt;XVector&lt;/a&gt;, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#YVector"&gt;YVector&lt;/a&gt;, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#ZVector"&gt;ZVector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Roblox&amp;rsquo;s documentation claims that these fields represent the rows and columns
of the CFrame&amp;rsquo;s rotation matrix. The X, Y, Z fields are the rows, and the Right,
Up, Look fields are the columns. &lt;strong&gt;This is very significantly incorrect&lt;/strong&gt;.
Inspecting the values of each component reveals it so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CFrame.identity:GetComponents()
	0 0 0 1 0 0 0 1 0 0 0 1

CFrame.identity.Position
	0 0 0

CFrame.identity.XVector
	1 0 0

CFrame.identity.YVector
	0 1 0

CFrame.identity.ZVector
	0 0 1

CFrame.identity.RightVector
	1 0 0

CFrame.identity.UpVector
	0 1 0

CFrame.identity.LookVector
	-0 -0 -1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What we can see is that the X-, Y- and ZVector fields correspond directly to the
components:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Fields [Position][XVector][YVector][ZVector]
Components 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also notice some other things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RightVector and UpVector appear to be redundant with XVector and YVector.&lt;/li&gt;
&lt;li&gt;LookVector always equal to -ZVector.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why would it be like this? Is the implementation incorrect?&lt;/p&gt;
&lt;p&gt;Nope. The explanation is that the X-, Y-, and ZVector fields represent the raw
components of the CFrame matrix, while the Right-, Up- and LookVector fields
represent more practical values.&lt;/p&gt;
&lt;p&gt;Originally, CFrames had only the LookVector field (stylized as &lt;code&gt;lookVector&lt;/code&gt;). It
represents the most interesting vector, being the &amp;ldquo;front&amp;rdquo; face of the CFrame, or
the direction the CFrame was &amp;ldquo;looking&amp;rdquo;. Very useful for getting things to look
at or move towards other things. For whatever reason, Roblox defined the front
face to be the &lt;em&gt;complement&lt;/em&gt; of the Z direction.&lt;/p&gt;
&lt;p&gt;Eventually, the other vector fields were added. RightVector and UpVector were
added as counterparts to LookVector. However, to correctly derive the raw
components from these vectors, one would have to remember to invert the
LookVector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cframe.RightVector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cframe.UpVector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;lookaway&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cframe.LookVector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r02&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right.X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right.Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right.Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;up.X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;up.Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;up.Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r22&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lookaway.X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lookaway.Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lookaway.Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because this would be confusing and easy to forget, the ZVector field was added
to represent the raw Z direction, along with XVector and YVector as
counterparts. This explains the redundancy of XVector/RightVector and
YVector/UpVector.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cframe.XVector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cframe.YVector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cframe.ZVector&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r02&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x.X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x.Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r12&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y.X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y.Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y.Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r22&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;z.X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z.Y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z.Z&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To summarize, RightVector is always equal to XVector, UpVector is always equal
to YVector, and LookVector is always equal to the complement of ZVector. And
don&amp;rsquo;t let the documentation let you think otherwise.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RightVector == XVector
UpVector == YVector
LookVector == -ZVector
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>The Cloud™</title><link>https://anaminus.github.io/blog/briefs/202301210944/</link><pubDate>Sat, 21 Jan 2023 09:44:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301210944/</guid><content:encoded>&lt;p&gt;There goes a productive day. Thanks, The Cloud™.&lt;/p&gt;</content:encoded></item><item><title>ProximityPrompts</title><link>https://anaminus.github.io/blog/briefs/202301191334/</link><pubDate>Thu, 19 Jan 2023 13:34:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301191334/</guid><content:encoded>&lt;p&gt;ProximityPrompts make for great general proximity detectors.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202301191334/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The proximity signals are client-only, so validation is still required. But it’s
a fast and simple solution for detection. I like to think that it’s been
optimized for large numbers of prompts spread across the workspace, so it’d be a
winner in that case.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Author&amp;rsquo;s Note: The tweet this post was derived from was blessed by The
Algorithm for some reason.&lt;/em&gt;&lt;/p&gt;</content:encoded></item><item><title>RemoveEvent:Once()</title><link>https://anaminus.github.io/blog/briefs/202301161535/</link><pubDate>Mon, 16 Jan 2023 15:35:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301161535/</guid><content:encoded>&lt;p&gt;Using &lt;code&gt;:Once()&lt;/code&gt; on a RemoteEvent will cause the first queued event to be
received and all other queued events to be discarded.&lt;/p&gt;
&lt;p&gt;This is a design flaw: connecting to a signal must not fire the signal, which
remotes do. To avoid losing events, the workaround is to enforce a remote to
have exactly one consumer. By this logic, &lt;code&gt;:Once()&lt;/code&gt; isn’t allowed, because it
adds the one consumer then immediately removes it.&lt;/p&gt;
&lt;p&gt;The problem is that connecting to the signal fires it and drains the queue. You
literally cannot connect multiple listeners without one of them missing the
queued events. The only option is a wrapper with one listener that dispatches to
multiple listeners.&lt;/p&gt;
&lt;p&gt;There are several solutions to the problem. The most backward compatible would
be to trigger the dequeue on the first connection as usual, but defer it so that
other connections in the same frame have a chance to connect.&lt;/p&gt;</content:encoded></item><item><title>Streaming</title><link>https://anaminus.github.io/blog/briefs/202301090959/</link><pubDate>Mon, 09 Jan 2023 09:59:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202301090959/</guid><content:encoded>&lt;p&gt;A problem with streaming on Roblox is that a client can just move the camera
anywhere, and the server will happily stream whatever is at that location, even
if the player is not meant to be there. Developers need to be able to exclude
areas from being streamed to certain clients.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;2023-01-16 23:14&lt;/em&gt;: As a follow up, it turns out to be possible with the
Player.ReplicationFocus property. Setting it to a dummy part gives the server
the opportunity to deny streaming in. The position of the dummy part matches the
character, except when the character moves to an undesired location.&lt;/p&gt;</content:encoded></item><item><title>Rojo wrangling</title><link>https://anaminus.github.io/blog/posts/rojo-wrangling/</link><pubDate>Mon, 19 Dec 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/rojo-wrangling/</guid><description>Getting Rojo to fit your project's structure.</description><content:encoded>&lt;p&gt;I have particular preferences about how I want my projects to be structured, and
I will bend my tools to make it work. This time, the tool being flexed is
&lt;a href="https://rojo.space/"&gt;Rojo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I want related modules to be grouped together into one &amp;ldquo;package&amp;rdquo;. If a package
has a server component and a client component, I want those two files to live
next to each other under the same folder. However, there are two problems that
make this structure difficult to have.&lt;/p&gt;
&lt;p&gt;Problem #1 is how Roblox handles replication. The client component has to be in
one location in order to replicate to clients, while the server component has to
be in a different location in order to be isolated from clients. They inherently
cannot be together (how dramatic).&lt;/p&gt;
&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; the new &lt;a href="https://robloxapi.github.io/ref/enum/RunContext.html"&gt;RunContext&lt;/a&gt; property that might solve this
problem, but I haven&amp;rsquo;t explored its uses in full, and I&amp;rsquo;m somewhat skeptical of
its utility. More importantly, it doesn&amp;rsquo;t have first-class support in Rojo, so
it&amp;rsquo;s not terribly easy to use.&lt;/p&gt;
&lt;p&gt;Problem #2 is that the default structure for Rojo projects is rather literal: a
file corresponds to an instance. With a simple tree definition, Rojo causes the
file structure to correspond mostly to the DataModel structure, which means
DataModel problems become file system problems.&lt;/p&gt;
&lt;p&gt;There is an out, though. In Rojo, projects are recursive. While traversing the
project tree, if a &lt;code&gt;project.json&lt;/code&gt; file is encountered, it will be turned into a
node by evaluating the content as a sort of sub-project. The rules for how this
works turns out to be very relaxed. Enough so that it&amp;rsquo;s possible to get Rojo to
build just about any project structure if you put in the effort.&lt;/p&gt;
&lt;p&gt;To generalize this concept, I introduce what I call &amp;ldquo;pointer files&amp;rdquo;. These are
just regular &lt;code&gt;project.json&lt;/code&gt; files, but they have barest minimum content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;NAME&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;tree&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;$path&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;REFERENT&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;NAME&lt;/code&gt; defines the name of the node, and &lt;code&gt;REFERENT&lt;/code&gt; defines a path to the
file to be used as the node, relative to the project file. If you give each
pointer file a different name, then you can create any number of pointers in the
same folder.&lt;/p&gt;
&lt;h2 id="packages-example"&gt;Packages example&lt;/h2&gt;
&lt;p&gt;As an example, let&amp;rsquo;s say I have a &lt;code&gt;pkg&lt;/code&gt; folder that I use to contain packages.
Each subfolder is one package, and &amp;ldquo;server&amp;rdquo; and &amp;ldquo;client&amp;rdquo; files within are the
respective components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pkg/foo/server.lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg/foo/client.lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg/bar/server.lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg/bar/client.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I have a separate &lt;code&gt;game&lt;/code&gt; folder, which contains a literal representation of
the DataModel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;game/ServerScriptService&lt;/code&gt;: Contains server components.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;game/ReplicatedStorage&lt;/code&gt;: Contains client components.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I can &amp;ldquo;unpack&amp;rdquo; my packages by creating a number of pointer files under the
&lt;code&gt;game&lt;/code&gt; folder that point to files in the &lt;code&gt;pkg&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;game/ServerScriptService/foo.project.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; {&amp;#34;name&amp;#34;:&amp;#34;foo&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/foo/server.lua&amp;#34;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;game/ServerScriptService/bar.project.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; {&amp;#34;name&amp;#34;:&amp;#34;bar&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/bar/server.lua&amp;#34;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;game/ReplicatedStorage/foo.project.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; {&amp;#34;name&amp;#34;:&amp;#34;foo&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/foo/client.lua&amp;#34;}}
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;game/ReplicatedStorage/bar.project.json
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; {&amp;#34;name&amp;#34;:&amp;#34;bar&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/bar/client.lua&amp;#34;}}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, the root &lt;code&gt;default.project.json&lt;/code&gt; points to the &lt;code&gt;game&lt;/code&gt; folder, so that
building the project builds everything from there.&lt;/p&gt;
&lt;h2 id="cloning-example"&gt;Cloning example&lt;/h2&gt;
&lt;p&gt;This technique is surprisingly versatile. Here&amp;rsquo;s another example: I have two
scripts that are used as the entrypoints for the server and client,
respectively. They both share a common &amp;ldquo;maid&amp;rdquo; module. The normal solution is to
have common modules stored under ReplicatedStorage. But I want the client
entrypoint to be snappy, so depending on modules outside of ReplicatedFirst is
not allowed. Instead, I have the structure set up as the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;core/bootstrap.client/init.client.lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core/bootstrap.client/maid.project.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core/bootstrap.server/init.server.lua&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core/bootstrap.server/maid.project.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;core/maid.lua&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both &lt;code&gt;maid.project.json&lt;/code&gt; files have the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;maid&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;tree&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="nt"&gt;&amp;#34;$path&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;../maid.lua&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then I have the usual pointers under the game tree to move the scripts to their
proper locations under ReplicatedFirst and ServerScriptService.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting is that, when Rojo builds the project, it creates a copy of
the &lt;code&gt;maid.lua&lt;/code&gt; module under each bootstrap script. This allows me to have just
one file as the source of two separate modules! I&amp;rsquo;m sure this definitely wont
backfire in some subtle way!&lt;/p&gt;
&lt;h2 id="automation"&gt;Automation&lt;/h2&gt;
&lt;p&gt;While my project is still in its infancy, I&amp;rsquo;m creating, removing, and renaming
files left and right. Manually keeping the pointer files up to date is an
exercise in futility, so I automate the whole thing with an &lt;a href="https://github.com/anaminus/rbxmk"&gt;rbxmk&lt;/a&gt;
script instead. This script defines how to map files around, while the
&lt;a href="https://gist.github.com/Anaminus/135999033fa01a3b1491b0d0e54b6f68"&gt;Build.rbxmk.lua&lt;/a&gt; library does the heavy lifting. An example
script might look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Require the Build library.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;Build&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rbxmk.runFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path.expand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;$sd/lib/Build.rbxmk.lua&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Map package components to their respective locations.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Build.package&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;src/pkg&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;boot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ReplicatedFirst&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ServerScriptService&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ReplicatedStorage/client&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;shared&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ReplicatedStorage/shared&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;internal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ReplicatedStorage/internal&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Map bootstrap scripts.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Build.ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;core/bootstrap.client&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ReplicatedFirst/bootstrap&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Build.ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;core/bootstrap.server&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;game/ServerScriptService/bootstrap&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Remove any files that haven&amp;#39;t been touched by this build script, which&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- accounts for renames/removals/etc.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;Build.clean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;game&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unfortunately, the script requires the latest unreleased version of rbxmk, so
you&amp;rsquo;ll have to build it yourself if you want to use this (sorry!). This post is
more to showcase the technique of abusing Rojo&amp;rsquo;s project files to do crazy
things anyway.&lt;/p&gt;
&lt;p&gt;This technique is very general, so there&amp;rsquo;s nothing stopping you from
implementing it with your preferred method of automation. Come up with a
structure that best suits your needs!&lt;/p&gt;</content:encoded></item><item><title>Managing assets locally</title><link>https://anaminus.github.io/blog/posts/managing-assets-locally/</link><pubDate>Wed, 23 Nov 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/managing-assets-locally/</guid><description>Keeping your Roblox assets on your computer.</description><content:encoded>&lt;p&gt;If you&amp;rsquo;re not indoctrinated into the cult of The Cloud™, then managing assets on
Roblox can be a pain. The assumption seems to be that you&amp;rsquo;re meant to upload
everything and subject it to moderation whether it&amp;rsquo;s ready or not.&lt;/p&gt;
&lt;p&gt;I prefer to keep assets local for as long as possible. Roblox Studio has an
option to hot-reload assets that live on the local file system, which is
absolutely invaluable for fast iteration. Uploading a million variations of
textures that I&amp;rsquo;ll never use ever again doesn&amp;rsquo;t make any sense.&lt;/p&gt;
&lt;p&gt;The problem with locally-sourced assets is that there aren&amp;rsquo;t many locations that
Studio will read assets from. One of them is Roblox&amp;rsquo;s content folder, which is
referred to using the &lt;code&gt;rbxasset://&lt;/code&gt; scheme. This contains most of the assets
Roblox uses for their user interfaces, plugins, and whatnot. Unfortunately, it&amp;rsquo;s
annoying for developers to use for their own assets, because the location
changes every time Roblox updates.&lt;/p&gt;
&lt;p&gt;This could be worked around with some tooling, but Studio does have an
additional folder that is more persistent. It&amp;rsquo;s located in the same place where
settings are stored. On Windows, this is the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;%LocalAppData%\Roblox\LocalAssets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This folder behaves like the content folder. Files in here can be referred to
using the same &lt;code&gt;rbxasset://&lt;/code&gt; scheme. Studio sort of merges this with the content
folder, checking the other folder if a file was not found in the first.&lt;/p&gt;
&lt;p&gt;Studio also has a hidden setting that controls the location of this folder. In
the same place as LocalAssets (&lt;code&gt;%LocalAppData%\Roblox&lt;/code&gt;), there is the
&lt;code&gt;GlobalSettings_13.xml&lt;/code&gt; file (the numeric suffix may vary). Within this file is
the &amp;ldquo;Studio&amp;rdquo; class. Within the Studio class is a &amp;ldquo;LocalAssetsFolder&amp;rdquo; setting
that doesn&amp;rsquo;t appear in the normal settings list. This setting determines which
folder local assets will be read from.&lt;/p&gt;
&lt;p&gt;The problem with this folder is that it&amp;rsquo;s only &lt;em&gt;one&lt;/em&gt; folder. Us developers, we
tend to make many projects. And having to keep project-specific assets outside
of the project isn&amp;rsquo;t fun to deal with.&lt;/p&gt;
&lt;p&gt;My go-to solution is to use symbolic links, which is (very fortunately)
supported by Studio. The idea is to have a folder in your project that is used
for assets (e.g. &lt;code&gt;project/assets&lt;/code&gt;). A link to this folder is then made in the
LocalAssets folder, using the project&amp;rsquo;s name as the name of the link.&lt;/p&gt;
&lt;p&gt;Windows has the &lt;code&gt;mklink&lt;/code&gt; command for making symbolic links:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-batch" data-lang="batch"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;%LocalAppData%&lt;/span&gt;\Roblox\LocalAssets
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;mklink&lt;/span&gt; /D project path\to\project\assets
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will make a directory link called &amp;ldquo;project&amp;rdquo; in the LocalAssets folder. Now
if I have the texture &lt;code&gt;project/assets/foobar.png&lt;/code&gt;, I can refer to it in Studio
as &lt;code&gt;rbxasset://project/foobar.png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve simplified this process with a &lt;code&gt;.bat&lt;/code&gt; script that makes it possible to drag
a project&amp;rsquo;s asset folder into the script file, and the symbolic link is created
automatically:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-batch" data-lang="batch"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; off
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;: Replace with location configured by LocalAssetsFolder.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;%LocalAppData%&lt;/span&gt;\Roblox\LocalAssets
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="se"&gt;%%&lt;/span&gt;a &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;%~p1&lt;/span&gt;&lt;span class="s2"&gt;.&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;x=&lt;/span&gt;&lt;span class="se"&gt;%%&lt;/span&gt;&lt;span class="s2"&gt;~nxa&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;mklink&lt;/span&gt; /D &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;%x%&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="nv"&gt;%1&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;pause&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that this assumes the asset folder is located in the root of the project.
The script looks at the name of the parent directory of the given folder to get
the project name, which is used to name the link.&lt;/p&gt;
&lt;p&gt;As demonstrated, some tooling is required to manage assets locally, but at least
it only needs to be run once, at the start of a new project.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m still working out the best way to deal with turning local assets into The
Cloud™ assets. I have some ideas, but I&amp;rsquo;ll save it for another post.&lt;/p&gt;</content:encoded></item><item><title>Unordered RBXL</title><link>https://anaminus.github.io/blog/briefs/202211211053/</link><pubDate>Mon, 21 Nov 2022 10:53:09 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211211053/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;ve been thinking about an implementation of the binary rbxl format where
chunks can decode in any order, and empty space is allowed between chunks, which
would enable efficient partial modifications to files.&lt;/p&gt;</content:encoded></item><item><title>Exclusive replication</title><link>https://anaminus.github.io/blog/posts/exclusive-replication/</link><pubDate>Sun, 20 Nov 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/exclusive-replication/</guid><description>Getting Roblox to replicate things only to certain clients.</description><content:encoded>&lt;p&gt;Instances in Roblox &lt;strong&gt;replicate&lt;/strong&gt;. That is, a particular instance on the server
will have a copy of itself on each client, and all aspects of this instance are
kept synchronized, including what children it has. In almost all cases, this
replication occurs in one direction only, from server to client.&lt;/p&gt;
&lt;p&gt;Say the server has a red brick in the Workspace. This brick will be replicated
to all clients. When the server changes the brick&amp;rsquo;s color to blue, this change
will be replicated to each client, making their local copy of the brick also
blue. However, when a client tries to change the color of its brick to green,
this change is &lt;em&gt;not&lt;/em&gt; replicated back to the server or any other client. The
change remains local to the client. Moreover, because only changes are
replicated, the server wont constantly be trying to update the brick&amp;rsquo;s color
back to red, so it will remain green, at least until the server changes the
color again.&lt;/p&gt;
&lt;p&gt;A problem with most instances is that they have only two replication behaviors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;All&lt;/strong&gt;: The instance is replicated to all clients.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;None&lt;/strong&gt;: The instance is not replicated to any client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be annoying if we have an instance that we want to show only to one
client. Or if we want to keep network usage down, we want to replicate only
relevant instances instead of absolutely everything.&lt;/p&gt;
&lt;p&gt;Note that I said &amp;ldquo;most&amp;rdquo; instances. There is in fact exactly &lt;em&gt;one&lt;/em&gt; instance that
has a different behavior. If you look at the &lt;a href="https://create.roblox.com/docs/reference/engine/classes/PlayerGui"&gt;documentation page for
PlayerGui&lt;/a&gt;, you will see that it has a curious tag called &lt;code&gt;Player Replicated&lt;/code&gt;. The tag&amp;rsquo;s tooltip says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This object’s replication behavior is dependent on the player who owns it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What this means is that the PlayerGui replicates only to one client.
Specifically, PlayerGui&amp;rsquo;s parent Player instance.&lt;/p&gt;
&lt;p&gt;It makes sense in context. GUIs are rendered locally on the client only for the
one player. It doesn&amp;rsquo;t make sense to render everyone else&amp;rsquo;s GUIs, so there&amp;rsquo;s no
point in replicating them either.&lt;/p&gt;
&lt;p&gt;We can use this as a solution to our problems. To replicate an instance
exclusively to one client, we can copy the instance to the client&amp;rsquo;s PlayerGui.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/exclusive-replication/fig1.png" width="526" height="238" loading="lazy"&gt;&lt;figcaption&gt;You can put anything under the PlayerGui.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;I use the term &amp;ldquo;exclusive&amp;rdquo; here rather than &amp;ldquo;selective&amp;rdquo;, because this technique
doesn&amp;rsquo;t actually let us select which clients a specific instance is replicated
to. Instead, we have to make a copy of the instance on the server for each
client we want to replicate to. It&amp;rsquo;s possible to write a module that manages all
of this for us, at which point the module could be called selective. But the
underlying technique is exclusive.&lt;/p&gt;
&lt;p&gt;Anyway, we can now choose which clients to replicate to, but there are some new
problems to take care of. Because we are using the PlayerGui, we have to
consider its other behaviors. Namely, that it renders ScreenGuis placed under
it. We want to be able to exclusively replicate a ScreenGui without
unintentionally rendering it. We could make an exception, such as forcing
&lt;code&gt;ScreenGui.Enabled&lt;/code&gt; to false before replicating, but there&amp;rsquo;s a more general
solution.&lt;/p&gt;
&lt;p&gt;Remember how I said that changes on the client do not replicate back to the
server? This includes moving the instance around. An instance on the server is
matched to an instance on the client by the instance itself, rather than its
location. So, on the client, as long as the instance stays under the DataModel,
it will continue to receive changes from the server no matter where it is
located.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/exclusive-replication/fig2.png" width="1162" height="770" loading="lazy"&gt;&lt;figcaption&gt;Moving an instance is considered a distinct unit of change, like setting a
property or adding a new child. That is, whenever some other change occurs,
there isn&amp;rsquo;t going to be an additional check to make sure the instance in
question is in the right place. The Parent property of the instance will only be
replicated when it actually changes on the server.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;Instead of putting instances directly in the PlayerGui, let&amp;rsquo;s put them in a
Folder that is located under the PlayerGui. On the server, the Folder must
always stay here. On the client however, it can be moved to anywhere we want. By
moving it outside of the PlayerGui, the replication behavior is retained, while
the GUI-rendering behavior is dropped.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/exclusive-replication/fig3.png" width="610" height="433" loading="lazy"&gt;&lt;figcaption&gt;Changes to the Container on the server are still replicated to the Container
on the client, no matter where it is located. ServerStorage is perfectly usable
on the client, and makes for a good location to store the Container.&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;There is only one more problem now: by default, all instances under the
PlayerGui will be removed before the player&amp;rsquo;s character respawns. For
ScreenGuis, this can be prevented with the ResetOnSpawn property, but Folders do
not have this. Fortunately, there is the
&lt;a href="https://create.roblox.com/docs/reference/engine/classes/StarterGui#ResetPlayerGuiOnSpawn"&gt;StarterGui.ResetPlayerGuiOnSpawn&lt;/a&gt; property. While this
is listed as deprecated, it can still be used just fine. However, it is also
hidden from the properties panel in Studio, so the command bar is needed in
order to change it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;game.StarterGui&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResetPlayerGuiOnSpawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting this property to false will prevent any instance under the PlayerGui
from being removed when the character respawns. Note that this does change
StarterGui behavior, so we&amp;rsquo;ll have to adjust accordingly.&lt;/p&gt;
&lt;p&gt;Overall, this is a very hacky workaround. But hopefully it justifies the
addition of some kind of &amp;ldquo;PlayerStorage&amp;rdquo; container, whose only purposes is to
replicate its descendants to one player at a time. There are other more
complicated solutions to selective replication, but I feel like this would be a
good and very simple intermediate step.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/exclusive-replication/fig4.png" width="241" height="177" loading="lazy"&gt;&lt;figcaption&gt;Get an icon ready!&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;We might be tempted to do this right now; instead of putting the Container under
ServerStorage, we could call it &amp;ldquo;PlayerStorage&amp;rdquo; and put it directly under the
Player. However, if Roblox does add their own PlayerStorage container, then it
will conflict with ours, and things will likely break. Personally, I really like
the idea of PlayerStorage, and wouldn&amp;rsquo;t want to do anything that would
discourage Roblox from implementing it as-is. So, I would either put the
container somewhere else, or at least give it a different name.&lt;/p&gt;</content:encoded></item><item><title>Maid pattern</title><link>https://anaminus.github.io/blog/briefs/202211141900/</link><pubDate>Mon, 14 Nov 2022 19:00:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211141900/</guid><content:encoded>&lt;p&gt;Janitor/Maid/etc are different conveniences built on the same core principal:
finalization is established near initialization. I continue to assert that maid
is a pattern, so the best solution is to either roll your own, or pick whatever
best suits your needs.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my implementation, which represents my current theory on the matter:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/Maid"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/Maid&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As for memory leaks, no library will save you from having the wrong mindset
about memory management. Maids and Janitors are just one of the many possible
answers to &amp;ldquo;What am I going to do about this thing I just created once I no
longer need it?&amp;rdquo;&lt;/p&gt;</content:encoded></item><item><title>Case convention</title><link>https://anaminus.github.io/blog/briefs/202211140846/</link><pubDate>Mon, 14 Nov 2022 08:46:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211140846/</guid><content:encoded>&lt;p&gt;I normally do PascalCase for public, and camelCase for private. But since
Roblox&amp;rsquo;s convention for modules is module.camelCase, I match that instead. So
the difference becomes unexportedFunction vs module.exportedFunction, and
PascalCase just isn&amp;rsquo;t used for top-level functions.&lt;/p&gt;</content:encoded></item><item><title>Roact</title><link>https://anaminus.github.io/blog/briefs/202211021007/</link><pubDate>Wed, 02 Nov 2022 10:07:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211021007/</guid><content:encoded>&lt;p&gt;my favorite part of roact is how you can instantly tell when it&amp;rsquo;s being used by
the complete lack of keyboard support and the general feeling of sluggishness&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202211021007/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;It would run much better with a proper component implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, but it wasn&amp;rsquo;t done that way. Why not? Maybe it&amp;rsquo;s because Roact makes
it easy to do the wrong thing. Or hard to do the right thing. Or both.&lt;/p&gt;</content:encoded></item><item><title>Module packages</title><link>https://anaminus.github.io/blog/briefs/202211012005/</link><pubDate>Tue, 01 Nov 2022 20:05:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202211012005/</guid><content:encoded>&lt;p&gt;I feel like a problem with modules is that a module&amp;rsquo;s namespace can&amp;rsquo;t be divided
further than one ModuleScript. It would be nice if there were some kind of
Package object, where all child ModuleScripts shared the same environment.&lt;/p&gt;</content:encoded></item><item><title>Binstruct rewrite</title><link>https://anaminus.github.io/blog/briefs/202210301223/</link><pubDate>Sun, 30 Oct 2022 12:23:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210301223/</guid><content:encoded>&lt;p&gt;Rewriting Binstruct to be more ergonomic. Also added support for recursive type
definitions, which is implemented in the VM as subroutines. Continues to be my
favorite module to write.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/00.png" width="1200" height="831" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Rewrote Binstruct&amp;rsquo;s union type to work like an if statement. Here&amp;rsquo;s what parsing
a value for serialized attributes looks like.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/01.png" width="1200" height="759" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Because type definitions in Binstruct are just tables, it&amp;rsquo;s really easy to
create abstractions to make defining types more ergonomic. This is an example of
a builder that allows advanced functions to be added to a definition more
easily.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/02.png" width="542" height="497" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;The builder in action. The decode/encode functions convert between a finalized
value and an intermediate representation that is more easily digested by the
codec, though this representation is often useful enough on its own.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/03.png" width="702" height="409" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;All good data formats have a version number. Here&amp;rsquo;s a constructor that applies
versioning to any type. It uses a union to match a version to one of a number of
types. The version is also available as a &amp;ldquo;global&amp;rdquo;, allowing the value to be
inspected from anywhere in the structure.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210301223/04.png" width="822" height="479" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Type smuggling</title><link>https://anaminus.github.io/blog/briefs/202210261007/</link><pubDate>Wed, 26 Oct 2022 10:07:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210261007/</guid><content:encoded>&lt;p&gt;Type smuggling:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(...))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Allows you to get types from a module without requiring it. Does not work with
exported types.&lt;/p&gt;
&lt;p&gt;To get around exporting, types can be smuggled through the returned table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Innocent module stuff.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;export&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Some types. Must require&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- the module in order to get.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Smuggle them through&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- the returned table.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export._Foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;export._Bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;any&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Bar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;export&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;This is incredibly useful for smuggling types from a server module in a client
module so the data the client is going to receive from the server via a remote
can be fully typed.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/fewkz/status/1590230560764760065"&gt;@fewkz, 6:31 AM · Nov 9, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So nothing breaks on the client even though the modules containing the server
types aren’t replicated, because types don’t matter at runtime. Interesting
approach.&lt;/p&gt;</content:encoded></item><item><title>Fusion predicates</title><link>https://anaminus.github.io/blog/briefs/202210171302/</link><pubDate>Mon, 17 Oct 2022 13:02:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210171302/</guid><content:encoded>&lt;p&gt;I was thinking of a Fusion-like way to select children based on a predicate
function.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210171302/00.png" width="632" height="357" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;More tasteful syntax:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202210171302/01.png" width="621" height="279" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Rx</title><link>https://anaminus.github.io/blog/briefs/202210162211/</link><pubDate>Sun, 16 Oct 2022 22:11:37 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210162211/</guid><content:encoded>&lt;p&gt;Ripped a standalone version of @Quenty&amp;rsquo;s Rx module out of Nevermore. Looks very
very promising.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202210162211/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Interfacing with Fusion&amp;rsquo;s Value objects is really easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nc"&gt;Rxf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Fusion.Value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Rx.Observer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Rx.observer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Rx.Subscriber&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="n"&gt;Maid.Task&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Fusion.Observer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="n"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;			&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;How&amp;rsquo;s performance? I&amp;rsquo;ve been looking to write a version of what you&amp;rsquo;re writing
here for a while, but query performance seems scary.&lt;/p&gt;
&lt;p&gt;Using RxInstanceUtils for now, but this is looking a lot cleaner.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/Quenty/status/1582087487610302464"&gt;@Quenty, 7:13 PM · Oct 17, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I haven&amp;rsquo;t deliberately optimized anything, but it&amp;rsquo;s not the worst. I might be
comfortable with one query that updates every frame, for example. It&amp;rsquo;s a mess,
but you can &lt;a href="https://gist.github.com/Anaminus/1f31af4e5280b9333f3f58e13840c670"&gt;play with it here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;hey wait a minute, arent you not a fan of observing any kind of behavior on
instances that enter the data model?&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/Kampfkarren/status/1582087755311349760"&gt;@Kampfkarren, 7:14 PM · Oct 17, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s right. Which is why Rx is great, because it simplifies a bunch of
boilerplate that would otherwise be need to ensure that an observation is
correct.&lt;/p&gt;</content:encoded></item><item><title>Metatables suck</title><link>https://anaminus.github.io/blog/briefs/202210160957/</link><pubDate>Sun, 16 Oct 2022 09:57:29 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210160957/</guid><content:encoded>&lt;p&gt;&lt;em&gt;In response to &lt;a href="https://elttob.medium.com/metatables-suck-473f1fe5afc2"&gt;Metatables suck.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metatables:&lt;/strong&gt; I use metatables to signal the separation of data and behavior.
Data goes in the table, behavior goes in the metatable. Great for debugging; the
debugger isn&amp;rsquo;t cluttered with a bunch of methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Encapsulation:&lt;/strong&gt; I don&amp;rsquo;t actually want true encapsulation, because it&amp;rsquo;s harder
to debug. Unlike local variables, private fields can be tapped into, and I don&amp;rsquo;t
have to hunt them down in the debugger. Also makes writing tests easier.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Overloading:&lt;/strong&gt; I agree in principal, but in practice, sometimes the
convenience is too much to pass up. To reconcile this, I always accompany a
non-obvious metamethod behavior with an equivalent method.&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s worth noting that metamethods are harder to debug, because they don&amp;rsquo;t
allow yielding, so you can&amp;rsquo;t set breakpoints in them. That&amp;rsquo;s why it&amp;rsquo;s good to
have a regular method-based equivalent.&lt;/p&gt;</content:encoded></item><item><title>For the Roblox iceberg</title><link>https://anaminus.github.io/blog/briefs/202210141109/</link><pubDate>Fri, 14 Oct 2022 11:09:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210141109/</guid><content:encoded>&lt;p&gt;In no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lens flares&lt;/li&gt;
&lt;li&gt;lowercase archivable property&lt;/li&gt;
&lt;li&gt;hidden attribute types&lt;/li&gt;
&lt;li&gt;data transfer over physics&lt;/li&gt;
&lt;li&gt;Instance.Lock/Unlock&lt;/li&gt;
&lt;li&gt;/sc == ROOT&lt;/li&gt;
&lt;li&gt;DebugId can overflow&lt;/li&gt;
&lt;li&gt;UniqueId epoch&lt;/li&gt;
&lt;li&gt;roblox.xsd&lt;/li&gt;
&lt;li&gt;&amp;lt;External&amp;gt; tag&lt;/li&gt;
&lt;li&gt;true purpose of Geometry service&lt;/li&gt;
&lt;li&gt;preliminary status&lt;/li&gt;
&lt;li&gt;preprocessor syntax&lt;/li&gt;
&lt;li&gt;editable object browser summaries&lt;/li&gt;
&lt;li&gt;GC only collects instance&amp;rsquo;s userdata&lt;/li&gt;
&lt;li&gt;comic sans ui&lt;/li&gt;
&lt;li&gt;runaway wait() throttling&lt;/li&gt;
&lt;li&gt;property names can have any character&lt;/li&gt;
&lt;li&gt;userdata keys in global environment&lt;/li&gt;
&lt;li&gt;undead Authoring class&lt;/li&gt;
&lt;li&gt;fast child removal&lt;/li&gt;
&lt;li&gt;GuiText&lt;/li&gt;
&lt;li&gt;GuiMain&lt;/li&gt;
&lt;li&gt;GuiRoot/GuiItem&lt;/li&gt;
&lt;li&gt;LoadingGui&lt;/li&gt;
&lt;li&gt;PlayerHUD&lt;/li&gt;
&lt;li&gt;PseudoPlayer&lt;/li&gt;
&lt;li&gt;ParallelRampPart&lt;/li&gt;
&lt;li&gt;PrisimPart&lt;/li&gt;
&lt;li&gt;PyramidPart&lt;/li&gt;
&lt;li&gt;RightAngleRampPart&lt;/li&gt;
&lt;li&gt;QDir/QFont types&lt;/li&gt;
&lt;li&gt;SystemAddress type&lt;/li&gt;
&lt;li&gt;__gc attack vector&lt;/li&gt;
&lt;li&gt;string.rep attack vector&lt;/li&gt;
&lt;li&gt;debug.loadmodule&lt;/li&gt;
&lt;li&gt;gameserver.ashx&lt;/li&gt;
&lt;li&gt;DeployHistory.txt&lt;/li&gt;
&lt;li&gt;WritePlayerSecurity&lt;/li&gt;
&lt;li&gt;BasePart.siz&lt;/li&gt;
&lt;li&gt;DraggingV1&lt;/li&gt;
&lt;li&gt;MouseButton1DownConnectionCount&lt;/li&gt;
&lt;li&gt;.mesh girl&lt;/li&gt;
&lt;li&gt;application/x-roblox-studio&lt;/li&gt;
&lt;li&gt;loadfile security context&lt;/li&gt;
&lt;li&gt;bytecode environment injection&lt;/li&gt;
&lt;li&gt;connectFirst/connectLast&lt;/li&gt;
&lt;li&gt;studio verbs&lt;/li&gt;
&lt;li&gt;TextBox.Confidential&lt;/li&gt;
&lt;li&gt;OverrideCoreScripts&lt;/li&gt;
&lt;li&gt;DefaultWaitTime&lt;/li&gt;
&lt;li&gt;ypcall&lt;/li&gt;
&lt;li&gt;NaN FoV void&lt;/li&gt;
&lt;li&gt;self-returning modules leak&lt;/li&gt;
&lt;li&gt;DataModel.Loaded conflict&lt;/li&gt;
&lt;li&gt;overloaded ScriptContext.AddCoreScript&lt;/li&gt;
&lt;li&gt;extra KeyCode.KeypadEquals enum items&lt;/li&gt;
&lt;li&gt;second CameraMode enum&lt;/li&gt;
&lt;li&gt;second Pages class&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Property&amp;rdquo; type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;preprocessor syntax:&lt;/strong&gt; In older versions of studio, having a &lt;code&gt;$&lt;/code&gt; at the start
of a script would highlight the first line in red. Later, when custom highlight
colors were added, this was referenced with the &lt;a href="https://robloxapi.github.io/ref/class/Studio.html#member-Preprocessor%20Color"&gt;Preprocessor Color&lt;/a&gt;
property, even though it was unused.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;self-returning modules leak:&lt;/strong&gt; If a module returns a value that contains a
reference to the module (&lt;code&gt;return script&lt;/code&gt;, return &lt;code&gt;{script}&lt;/code&gt;, etc), then it will
never be GC&amp;rsquo;d.&lt;/p&gt;</content:encoded></item><item><title>New game metrics</title><link>https://anaminus.github.io/blog/briefs/202210122320/</link><pubDate>Wed, 12 Oct 2022 23:20:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210122320/</guid><content:encoded>&lt;p&gt;How poorly do metrics have to be misinterpreted to reach the conclusion that a
developer is creating an entire new game from scratch every single time they
open the baseplate?&lt;/p&gt;</content:encoded></item><item><title>Not invented here</title><link>https://anaminus.github.io/blog/briefs/202210111600/</link><pubDate>Tue, 11 Oct 2022 16:00:58 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210111600/</guid><content:encoded>&lt;p&gt;Today on roblox dev: everyone learns the difference between inventions and
discoveries.&lt;/p&gt;</content:encoded></item><item><title>Cancelable delays</title><link>https://anaminus.github.io/blog/briefs/202210111423/</link><pubDate>Tue, 11 Oct 2022 14:23:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210111423/</guid><content:encoded>&lt;p&gt;Protip: &lt;code&gt;task.delay&lt;/code&gt; returns the delayed thread, making cancelable delays
trivial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;task.delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;Hi!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;task.wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;task.cancel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Maid connect</title><link>https://anaminus.github.io/blog/briefs/202210111420/</link><pubDate>Tue, 11 Oct 2022 14:20:26 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202210111420/</guid><content:encoded>&lt;p&gt;Justifying a Connect method on maids.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-luau" data-lang="luau"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Regular method.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;maid.heartbeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RunService.Heartbeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;delta time&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Method if your name is Max.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid.heartbeat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Alive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;RunService.Heartbeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;delta time&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;-- Connect method.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;heartbeat&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RunService.Heartbeat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;delta time&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Foliage</title><link>https://anaminus.github.io/blog/briefs/202209292251/</link><pubDate>Thu, 29 Sep 2022 22:51:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209292251/</guid><content:encoded>&lt;p&gt;Playing with foliage. Here we have the same texture, triangle count, and
triangle size, but different scaling of the base shape, which is a sphere in
this case. Unfortunately, it&amp;rsquo;s hard to get something that looks good without
fine-tuning each of these parameters.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202209292251/00.jpg" width="1200" height="675" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Probably</title><link>https://anaminus.github.io/blog/briefs/202209260940/</link><pubDate>Mon, 26 Sep 2022 09:40:12 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209260940/</guid><content:encoded>&lt;p&gt;&lt;strong&gt;Probably&lt;/strong&gt;, a Roblox Studio plugin for displaying the probability
distributions of functions, is now available!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/1996506"&gt;https://devforum.roblox.com/t/1996506&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Cartridge</title><link>https://anaminus.github.io/blog/briefs/202209240907/</link><pubDate>Sat, 24 Sep 2022 09:07:49 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209240907/</guid><content:encoded>&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202209240907/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Tiny UVs</title><link>https://anaminus.github.io/blog/posts/tiny-uv/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/tiny-uv/</guid><description>Making minimal and efficient UVs in Blender for Roblox.</description><content:encoded>&lt;p&gt;You want to produce meshes with simple, solid color textures. Because the colors
are solid, you should be able to get away with using small textures. Tiny
textures. Single-digit resolution textures. Possible, right?&lt;/p&gt;
&lt;p&gt;The problem: Roblox applies linear interpolation to its textures. Here is a
2-by-1 Decal, where the left pixel is white, and the right pixel is black:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig1.png" width="300" height="200" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Indeed, the left side is white, and the right side is black, but in between,
there is a smooth, linear interpolation from one pixel to the other.&lt;/p&gt;
&lt;p&gt;When constructing UVs for a mesh, we&amp;rsquo;ll have to find a way around this. Let&amp;rsquo;s
head over to Blender, and work on a simple plane mesh:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig2.png" width="997" height="618" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;The interpolation of the texture should be set to &lt;strong&gt;Linear&lt;/strong&gt;, and the extension
should be set to &lt;strong&gt;Repeat&lt;/strong&gt;. This will match how Roblox renders textures on
MeshParts. When we import it into Roblox, it looks mostly similar:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig3.png" width="300" height="200" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Notably, the left side begins to fade towards black, while the right side fades
towards white, which proves that the texture repeats. So we&amp;rsquo;ll be able to use
Blender to get a rough idea of what Roblox will render.&lt;/p&gt;
&lt;p&gt;So how do we produce solid colors? We can&amp;rsquo;t just cover the whole pixel with a
face, because half of the pixel is always interpolating to its neighbor:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig4.png" width="997" height="618" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;To get a solid color, the coordinates have to be in the exact center of the
pixel:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig5.png" width="997" height="618" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Two faces, each using one color:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig6.png" width="997" height="618" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;But does it work in Roblox?&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig7.png" width="830" height="508" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Indeed! To compare the colors, the top squares are regular Parts, while the
bottom squares are the mesh.&lt;/p&gt;
&lt;p&gt;UV coordinates are reused for SurfaceAppearance textures, so this technique can
be used to set the roughness and metalness of surfaces as well:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/posts/tiny-uv/fig8.png" width="830" height="508" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; To set the coordinates of many faces at once, select all the faces, use
the scale tool, and set the scale amounts to 0. This will move all vertices to a
single location, which you can then move to the center of the desired pixel.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/posts/tiny-uv/fig9.webm" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Another interesting idea: Because colors are interpolated, we could set the
coordinates to somewhere besides a pixel center, in order to get more colors.
For example, the simple 2-by-1 white-to-black texture can also be used to get
any shade of gray.&lt;/p&gt;</content:encoded></item><item><title>Plugin UX</title><link>https://anaminus.github.io/blog/briefs/202209172306/</link><pubDate>Sat, 17 Sep 2022 23:06:51 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209172306/</guid><content:encoded>&lt;p&gt;Plugin development should share the same UX as games. Specifically asset
management.&lt;/p&gt;</content:encoded></item><item><title>Creation</title><link>https://anaminus.github.io/blog/briefs/202209172049/</link><pubDate>Sat, 17 Sep 2022 20:49:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209172049/</guid><content:encoded>&lt;p&gt;&amp;gt;&amp;ldquo;creator&amp;rdquo; dashboard&lt;/p&gt;
&lt;p&gt;&amp;gt;can&amp;rsquo;t create assets&lt;/p&gt;</content:encoded></item><item><title>Icons</title><link>https://anaminus.github.io/blog/briefs/202209161714/</link><pubDate>Fri, 16 Sep 2022 17:14:28 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209161714/</guid><content:encoded>&lt;p&gt;When you don&amp;rsquo;t feel like uploading icons.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202209161714/00.jpg" width="949" height="720" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Plugin windows</title><link>https://anaminus.github.io/blog/briefs/202209151701/</link><pubDate>Thu, 15 Sep 2022 17:01:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209151701/</guid><content:encoded>&lt;p&gt;UI refresh allows plugin windows to be docked to the center area. +10000 points.&lt;/p&gt;</content:encoded></item><item><title>Plugin dock positions</title><link>https://anaminus.github.io/blog/briefs/202209151658/</link><pubDate>Thu, 15 Sep 2022 16:58:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209151658/</guid><content:encoded>&lt;p&gt;Last update fixed problems with studio forgetting plugin dock positions. UI
refresh is 100% better now.&lt;/p&gt;</content:encoded></item><item><title>Probability plugin</title><link>https://anaminus.github.io/blog/briefs/202209142100/</link><pubDate>Wed, 14 Sep 2022 21:00:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202209142100/</guid><content:encoded>&lt;p&gt;Plugin that displays probability curves of functions.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202209142100/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Improvements.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202209142100/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>Gamejam</title><link>https://anaminus.github.io/blog/briefs/202208281404/</link><pubDate>Sun, 28 Aug 2022 14:04:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208281404/</guid><content:encoded>&lt;p&gt;Not at RDC, but I thought I&amp;rsquo;d gamejam anyway. Didn&amp;rsquo;t finish, but I still had
fun. Here&amp;rsquo;s what would have been the thumbnail:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202208281404/00.jpg" width="1024" height="1024" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;If you&amp;rsquo;re going to solojam, try to use existing assets as much as possible. I
modeled the car, sun, and skybox from scratch, which was fun to do, but sunk way
too much time.&lt;/p&gt;</content:encoded></item><item><title>Studio cookies</title><link>https://anaminus.github.io/blog/briefs/202208171639/</link><pubDate>Wed, 17 Aug 2022 16:39:35 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208171639/</guid><content:encoded>&lt;p&gt;If you have tooling that makes use of Studio&amp;rsquo;s cookies, Roblox recently changed
how they work in Windows. Cookies are no longer stored in the registry, and are
instead stored as Credentials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Studio stores the &lt;code&gt;https://www.roblox.com:RobloxStudioAuthCookies&lt;/code&gt; credential.&lt;/li&gt;
&lt;li&gt;Its value is a &lt;code&gt;;&lt;/code&gt; separated list of cookie names (rather, each name has a &lt;code&gt;;&lt;/code&gt;
appended, note the trailing &lt;code&gt;;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The value of each cookie is stored as a credential named
&lt;code&gt;https://www.roblox.com:RobloxStudioAuth&lt;/code&gt; + the cookie name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tooling will still be able to access these cookies just fine. There&amp;rsquo;s a winapi
for it, so most languages will likely have a library for it. I listed some in
another tweet.&lt;/p&gt;
&lt;p&gt;Relevant libraries for some random languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust: &lt;a href="https://crates.io/crates/wincredentials"&gt;https://crates.io/crates/wincredentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Go: &lt;a href="https://github.com/danieljoos/wincred"&gt;https://github.com/danieljoos/wincred&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Archivable</title><link>https://anaminus.github.io/blog/briefs/202208171044/</link><pubDate>Wed, 17 Aug 2022 10:44:34 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208171044/</guid><content:encoded>&lt;p&gt;Boring Facts: The lowercase &amp;ldquo;archivable&amp;rdquo; property can be used within a model or
place file to load an instance with Archivable set to false.&lt;/p&gt;</content:encoded></item><item><title>Ice cream</title><link>https://anaminus.github.io/blog/briefs/202208112219/</link><pubDate>Thu, 11 Aug 2022 22:19:09 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202208112219/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;Your cashier gives you three dimes and a nickel as your change. Do you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put it in the tip jar&lt;/li&gt;
&lt;li&gt;Put it in the charity bin&lt;/li&gt;
&lt;li&gt;Put it in a locked safe because it&amp;rsquo;s so much money you can&amp;rsquo;t imagine
spending it even on something you use every day&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/BoatbomberRBLX/status/1557918024299991045"&gt;@BoatbomberRBLX, 2:32 AM · Aug 12, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;??? it goes in the paper cup where it is eventually used to extract exact change
when buying ice cream at the drive thru&lt;/p&gt;
&lt;p&gt;More accurately:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Buy plugin&lt;/li&gt;
&lt;li&gt;It turns out to be shit&lt;/li&gt;
&lt;li&gt;Could have been ice cream&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title>Grass</title><link>https://anaminus.github.io/blog/briefs/202207111221/</link><pubDate>Mon, 11 Jul 2022 12:21:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207111221/</guid><content:encoded>&lt;p&gt;Physically simulated grass.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Single triangle rigged with two bones. Lower bone is attached to a colliding
part via BallSocket. Upper bone has a VectorForce to keep the whole thing
upright, and an AngularVelocity to introduce some instability that simulates
wind.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Some translucency can be simulated by rotating the upper bone by 180 degrees,
which also rotates the normal of the top vertex.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/02.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;One MeshPart can be rigged to fit up to 128 grass units, whereas Beams would
have to be 1:1. But in terms of visuals, Beams have much more to offer than
Decals.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/03.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;A texture can be used, but artifacts occur on the upper edge because the texture
wraps around and repeats.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202207111221/04.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;you can get around this using the TextureLength property&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/ChrythmDev/status/1547708323180343296"&gt;@ChrythmDev, 10:23 PM · Jul 14, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I guess that works, but the texture has to be upside down.&lt;/p&gt;
&lt;p&gt;On whether using beams is practical: disregarding physics, most of the time goes
into updating beam logic. Actual rendering is sub-optimal, but it isn&amp;rsquo;t the
bottleneck. Not sure what causes LOD cutoff (it&amp;rsquo;s not affected by graphics
settings). Might be a memory thing.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202207111221/05.jpg" width="1200" height="675" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Rigging</title><link>https://anaminus.github.io/blog/briefs/202207081638/</link><pubDate>Fri, 08 Jul 2022 16:38:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207081638/</guid><content:encoded>&lt;p&gt;I rigged a mesh that has 85 completely independent triangles. Used it for
efficiently generating light rays:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.roblox.com/library/9287415204"&gt;https://www.roblox.com/library/9287415204&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I also rigged one for 256 independent squares:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.roblox.com/library/9288565775"&gt;https://www.roblox.com/library/9288565775&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>RemoteEvents</title><link>https://anaminus.github.io/blog/briefs/202207081127/</link><pubDate>Fri, 08 Jul 2022 11:27:36 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207081127/</guid><content:encoded>&lt;p&gt;RemoteEvents will happily receive a giant dictionary from the client, happily
deserialize it, and happily reflect it to Lua. This seems like it would be bad,
but in practice, the client gets disconnected before it has a chance to send
concerning amounts of data.&lt;/p&gt;</content:encoded></item><item><title>NaN preservation</title><link>https://anaminus.github.io/blog/briefs/202207081124/</link><pubDate>Fri, 08 Jul 2022 11:24:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207081124/</guid><content:encoded>&lt;p&gt;Boring Facts: Roblox preserves NaN values across network boundaries.&lt;/p&gt;</content:encoded></item><item><title>MeshID</title><link>https://anaminus.github.io/blog/briefs/202207051712/</link><pubDate>Tue, 05 Jul 2022 17:12:18 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202207051712/</guid><content:encoded>&lt;p&gt;Roblox serizes both the &lt;code&gt;MeshID&lt;/code&gt; and &lt;code&gt;MeshId&lt;/code&gt; properties.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;Content&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;MeshID&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;null&amp;gt;&amp;lt;/null&amp;gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nt"&gt;&amp;lt;Content&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;MeshId&amp;#34;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;null&amp;gt;&amp;lt;/null&amp;gt;&amp;lt;/Content&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both have CanLoad and CanSave set. Does studio just let one override the other?
Answer: Yes. The property that appears after overrides the one that appears
before.&lt;/p&gt;</content:encoded></item><item><title>Particle grass</title><link>https://anaminus.github.io/blog/briefs/202206291048/</link><pubDate>Wed, 29 Jun 2022 10:48:24 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206291048/</guid><content:encoded>&lt;p&gt;Infeasible particle grass.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202206291048/00.jpg" width="1097" height="630" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Unreliable physics</title><link>https://anaminus.github.io/blog/briefs/202206261949/</link><pubDate>Sun, 26 Jun 2022 19:49:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206261949/</guid><content:encoded>&lt;p&gt;Stupid idea: send/receive unreliable data by encoding it in physics.&lt;/p&gt;</content:encoded></item><item><title>Ownership problem</title><link>https://anaminus.github.io/blog/briefs/202206250031/</link><pubDate>Sat, 25 Jun 2022 00:31:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206250031/</guid><content:encoded>&lt;p&gt;The Ownership Problem: A vaguely formed idea involving the fact that instances
in the game tree can be accessed by anything at any time. If I knew what I was
talking about, I&amp;rsquo;d write a post about it.&lt;/p&gt;</content:encoded></item><item><title>Source of truth</title><link>https://anaminus.github.io/blog/briefs/202206200809/</link><pubDate>Mon, 20 Jun 2022 08:09:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202206200809/</guid><content:encoded>&lt;p&gt;The DataModel as the single source of truth is an awful one, because the engine
calls all the shots, while scripts are second-class.&lt;/p&gt;
&lt;p&gt;Because the engine can be made to do nothing by default, I get around this by
conceptualizing my collective codebase as a server, with the data model as a
client. This does create two sources of truth, but the data model is usually a
good little client that behaves as it should.&lt;/p&gt;
&lt;p&gt;A consequence is that this &amp;ldquo;server&amp;rdquo; must be considered as a whole, so libraries
must be made compatible with this model. But this is fine, because any 3rd-party
library is already going to be incompatible in some way no matter what.&lt;/p&gt;
&lt;p&gt;Assuming Roact doesn&amp;rsquo;t expose its own source of truth to be incorporated into
the &amp;ldquo;server&amp;rdquo;, it could just be treated as another &amp;ldquo;client&amp;rdquo; instead.&lt;/p&gt;</content:encoded></item><item><title>UpdateAsync</title><link>https://anaminus.github.io/blog/briefs/202205291414/</link><pubDate>Sun, 29 May 2022 14:14:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205291414/</guid><content:encoded>&lt;p&gt;If UpdateAsync calls the update function again, the result of the previous call
is discarded.&lt;/p&gt;
&lt;p&gt;Because this is so simple to understand, the docs choose to not mention it
anywhere. The result for me is years of UpdateAsync never quite clicking. One
tiny sentence is all it takes.&lt;/p&gt;</content:encoded></item><item><title>From scratch</title><link>https://anaminus.github.io/blog/briefs/202205081446/</link><pubDate>Sun, 08 May 2022 14:46:10 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205081446/</guid><content:encoded>&lt;p&gt;Making from scratch isn&amp;rsquo;t as fun. Better to take an existing thing and make it
do something else. My first experience with Roblox Lua was turning a jetpack
into a sword.&lt;/p&gt;</content:encoded></item><item><title>Diagram</title><link>https://anaminus.github.io/blog/briefs/202205012351/</link><pubDate>Sun, 01 May 2022 23:51:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202205012351/</guid><content:encoded>&lt;p&gt;Yet another out of context diagram.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202205012351/00.png" width="782" height="421" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Monkey paw</title><link>https://anaminus.github.io/blog/briefs/202204272223/</link><pubDate>Wed, 27 Apr 2022 22:23:08 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204272223/</guid><content:encoded>&lt;p&gt;Monkey Paw:&lt;/p&gt;
&lt;p&gt;Devs: Exploits are a big problem.&lt;/p&gt;
&lt;p&gt;Roblox: k DRM time lol&lt;/p&gt;</content:encoded></item><item><title>Dump builds</title><link>https://anaminus.github.io/blog/briefs/202204202134/</link><pubDate>Wed, 20 Apr 2022 21:34:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204202134/</guid><content:encoded>&lt;p&gt;Added builds for rbxfile-dump/dcomp.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/RobloxAPI/rbxfile/releases/tag/v0.5.1"&gt;https://github.com/RobloxAPI/rbxfile/releases/tag/v0.5.1&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Remodel vs rbxmk</title><link>https://anaminus.github.io/blog/briefs/202204152310/</link><pubDate>Fri, 15 Apr 2022 23:10:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204152310/</guid><content:encoded>&lt;p&gt;If you use Remodel and are interested in rbxmk, I wrote a document comparing the
two:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/remodel/README.md"&gt;https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/remodel/README.md&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>rbxmk release</title><link>https://anaminus.github.io/blog/briefs/202204151302/</link><pubDate>Fri, 15 Apr 2022 13:02:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204151302/</guid><content:encoded>&lt;p&gt;rbxmk v0.9.1 is released.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/releases/tag/v0.9.1"&gt;https://github.com/Anaminus/rbxmk/releases/tag/v0.9.1&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Greedy skinned meshes</title><link>https://anaminus.github.io/blog/briefs/202204051312/</link><pubDate>Tue, 05 Apr 2022 13:12:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202204051312/</guid><content:encoded>&lt;p&gt;Using skinned meshes instead of parts to reduce the part count for Boatbomber&amp;rsquo;s
&lt;a href="https://github.com/boatbomber/ViewportCanvas"&gt;ViewportCanvas&lt;/a&gt;. Unfortunately, the initial rendering takes way too long to
be feasible.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202204051312/00.jpg" width="1003" height="519" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>rbxl tools</title><link>https://anaminus.github.io/blog/briefs/202203242022/</link><pubDate>Thu, 24 Mar 2022 20:22:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203242022/</guid><content:encoded>&lt;p&gt;If you don&amp;rsquo;t mind compiling them yourself, I have two tools for working with
binary rbxl/rbxm files. The dump tool dumps the contents of a file in a readable
format. The dcomp tool receives a file and outputs the same file with
uncompressed chunks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/RobloxAPI/rbxfile/tree/master/cmd"&gt;https://github.com/RobloxAPI/rbxfile/tree/master/cmd&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Specifications</title><link>https://anaminus.github.io/blog/briefs/202203231453/</link><pubDate>Wed, 23 Mar 2022 14:53:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203231453/</guid><content:encoded>&lt;p&gt;A repository for specifications of Roblox&amp;rsquo;s file formats. Featuring a mostly
complete draft of the rbxl format.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/RobloxAPI/spec"&gt;https://github.com/RobloxAPI/spec&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Unions</title><link>https://anaminus.github.io/blog/briefs/202203231449/</link><pubDate>Wed, 23 Mar 2022 14:49:49 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203231449/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;d love to see how many garbage union assets Studio has uploaded on my behalf.&lt;/p&gt;</content:encoded></item><item><title>UniqueId</title><link>https://anaminus.github.io/blog/briefs/202203181756/</link><pubDate>Fri, 18 Mar 2022 17:56:42 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203181756/</guid><content:encoded>&lt;p&gt;The format of the UniqueId type for rbxl and rbxlx files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Binary format.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;UniqueId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;struct&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="c1"&gt;// All big-endian.&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;Sequence&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;Timestamp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;uint32&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;	&lt;/span&gt;&lt;span class="nx"&gt;Random&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int64&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Zigzag encoded&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Interleaved&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// XML hash&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// [random ][time ][seq ]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;// 0123456789abcdef0123456789abcdef&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="c1"&gt;//
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// Not zigzag encoded!&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>UniqueId sequence</title><link>https://anaminus.github.io/blog/briefs/202203181207/</link><pubDate>Fri, 18 Mar 2022 12:07:38 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203181207/</guid><content:encoded>&lt;p&gt;Boring Facts: UniqueId has one more sequential component that increments every
time an instance is created. If this value manages to overflow, the timestamp
component is updated. To generate a duplicate ID, you would have to produce over
4 billion instances within 1 second.&lt;/p&gt;</content:encoded></item><item><title>GetDebugId</title><link>https://anaminus.github.io/blog/briefs/202203181139/</link><pubDate>Fri, 18 Mar 2022 11:39:23 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203181139/</guid><content:encoded>&lt;p&gt;Boring Facts: The number returned by GetDebugId is a signed 32-bit integer that
will overflow if more than 2^31 instances have been created.&lt;/p&gt;</content:encoded></item><item><title>UniqueId randomness</title><link>https://anaminus.github.io/blog/briefs/202203180801/</link><pubDate>Fri, 18 Mar 2022 08:01:30 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203180801/</guid><content:encoded>&lt;p&gt;Boring Facts: The UniqueId type also contains an apparently random sequence of
bytes. However, between serialization in the binary and XML formats, there is a
shift by one bit. &lt;del&gt;It is possible that this is an implementation error.&lt;/del&gt; There
turns out to be no errors. When naively comparing the bytes of the two formats,
they appear to be shifted by one bit. The reason is that, in XML, the random
portion is converted directly to bytes. But in the binary format, zigzag
encoding is used.&lt;/p&gt;</content:encoded></item><item><title>UniqueId timestamp</title><link>https://anaminus.github.io/blog/briefs/202203180739/</link><pubDate>Fri, 18 Mar 2022 07:39:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203180739/</guid><content:encoded>&lt;p&gt;Boring Facts: The UniqueId type found in Roblox place files contains a timestamp
with the epoch set at 2021-01-01. This can be used to determine when an instance
was created, per studio session.&lt;/p&gt;</content:encoded></item><item><title>Ancestor</title><link>https://anaminus.github.io/blog/briefs/202203171934/</link><pubDate>Thu, 17 Mar 2022 19:34:46 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203171934/</guid><content:encoded>&lt;p&gt;Quick way to grab the nearest ScreenGui from a descendant script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;FindFirstAncestorWhichIsA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;ScreenGui&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>rbxmk documentation</title><link>https://anaminus.github.io/blog/briefs/202203161631/</link><pubDate>Wed, 16 Mar 2022 16:31:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203161631/</guid><content:encoded>&lt;p&gt;Very excited about how rbxmk documentation is coming together. All of it is
compiled with the program, so it can be explored from the terminal. The endgame
is to be able to export the entire collection of files to be used for generating
a documentation website.&lt;/p&gt;</content:encoded></item><item><title>Font licensing</title><link>https://anaminus.github.io/blog/briefs/202203141454/</link><pubDate>Mon, 14 Mar 2022 14:54:39 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203141454/</guid><content:encoded>&lt;p&gt;I hear font licensing is even worse than music licensing. Can&amp;rsquo;t wait for custom
fonts!&lt;/p&gt;</content:encoded></item><item><title>rbxmk documentation</title><link>https://anaminus.github.io/blog/briefs/202203121307/</link><pubDate>Sat, 12 Mar 2022 13:07:50 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203121307/</guid><content:encoded>&lt;p&gt;With this commit, built-in rbxmk documentation is finally readable again.
Formatting text is frustrating. There&amp;rsquo;s lots of comments because I barely know
how it works.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/commit/857c0dac32b1dbace20ddcb370563f2d0824b16a"&gt;https://github.com/Anaminus/rbxmk/commit/857c0dac32b1dbace20ddcb370563f2d0824b16a&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I could do a release, but I&amp;rsquo;m kind of waiting for Go 1.18 to drop.&lt;/p&gt;</content:encoded></item><item><title>MIDI Circulation</title><link>https://anaminus.github.io/blog/briefs/202203092258/</link><pubDate>Wed, 09 Mar 2022 22:58:56 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203092258/</guid><content:encoded>&lt;p&gt;I spent 1/10 uploads on this. You&amp;rsquo;d better appreciate it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.roblox.com/library/9057654433/MIDI-Circulation"&gt;https://www.roblox.com/library/9057654433/MIDI-Circulation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>LocalAssetsFolder</title><link>https://anaminus.github.io/blog/briefs/202203092220/</link><pubDate>Wed, 09 Mar 2022 22:20:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203092220/</guid><content:encoded>&lt;p&gt;Protip: Search for GlobalSettings_13.xml in your file system. This contains
settings for Studio. If you set the &amp;ldquo;LocalAssetsFolder&amp;rdquo; setting to a directory,
files in that directory can be accessed through &lt;code&gt;rbxasset://&lt;/code&gt;. Use this to work
on audio before uploading it.&lt;/p&gt;</content:encoded></item><item><title>Download audio</title><link>https://anaminus.github.io/blog/briefs/202203091938/</link><pubDate>Wed, 09 Mar 2022 19:38:33 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203091938/</guid><content:encoded>&lt;p&gt;Wrote a quick and dirty rbxmk script to download a list of audio assets:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/download-audio.rbxmk.lua"&gt;https://github.com/Anaminus/rbxmk/blob/imperative/doc/examples/download-audio.rbxmk.lua&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Megaphone</title><link>https://anaminus.github.io/blog/briefs/202203091824/</link><pubDate>Wed, 09 Mar 2022 18:24:15 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203091824/</guid><content:encoded>&lt;p&gt;There goes my carefully curated list of Arsenal megaphone spam.&lt;/p&gt;</content:encoded></item><item><title>RBXM to RBXMX</title><link>https://anaminus.github.io/blog/briefs/202203071611/</link><pubDate>Mon, 07 Mar 2022 16:11:37 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202203071611/</guid><content:encoded>&lt;p&gt;If you&amp;rsquo;re having trouble getting rbxmk to covert rbxm to rbxmx correctly, it&amp;rsquo;s
probably to do with Roblox&amp;rsquo;s API dump missing certain serialized properties.
I&amp;rsquo;ve created a patch file that will add such properties back to the dump.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/rbxmk/tree/imperative/doc/examples/dump-patch"&gt;https://github.com/Anaminus/rbxmk/tree/imperative/doc/examples/dump-patch&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Sun rays Mk II</title><link>https://anaminus.github.io/blog/briefs/202202211845/</link><pubDate>Mon, 21 Feb 2022 18:45:36 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202211845/</guid><content:encoded>&lt;p&gt;Sun rays with much better performance.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202211845/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Lot to unpack here. Each ray is a triangle within a MeshPart. Each MeshPart
groups together 85 triangles. Each vertex has a corresponding Bone, so the
triangles can be positioned independently and arbitrarily. Rays are produced by
allocating tris from the 85-tri meshes. A new MeshPart is created once all the
tris from the previous MeshPart are used.&lt;/p&gt;
&lt;p&gt;The ForceField material is utilized here. As previously mentioned, the
orientation of vertex normals affects the appearance of the force field. Each
vertex corresponds to a bone. For each tri, one of the bones is designated as a
&amp;ldquo;roller&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The roller bone is moved out of the MeshPart into a separate Part that is
attached with a BallSocketConstraint at the original location. This part has
another attachment with a randomized orientation. This randomized attachment is
assigned to an AlignOrientation.&lt;/p&gt;
&lt;p&gt;The other end of the AlignOrientation is assigned to a single attachment. The
brick in the video contains this attachment. The rotation of this brick is
directly controlling the &amp;ldquo;movement&amp;rdquo; of the rays.&lt;/p&gt;
&lt;p&gt;The extra attachment with the randomized orientation is necessary so that the
appearance of force fields are spread out and unaligned. Assemblies with
BallSockets are necessary so that the bones are detected correctly while
allowing free orientation.&lt;/p&gt;
&lt;p&gt;Now that I think about, the whole thing is driven entirely by physics. The only
script running continuously is to rotate the brick, but that&amp;rsquo;s only because the
AngularVelocity constraint was being finicky.&lt;/p&gt;
&lt;p&gt;Driving the control brick through physics doesn&amp;rsquo;t work well, because the rollers
seem to fall asleep or otherwise get stuck. Updating it via script seems to keep
them awake.&lt;/p&gt;</content:encoded></item><item><title>Sun rays</title><link>https://anaminus.github.io/blog/briefs/202202201547/</link><pubDate>Sun, 20 Feb 2022 15:47:20 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202201547/</guid><content:encoded>&lt;p&gt;Sun rays.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202201547/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Each ray is just a stretched cube mesh with an almost transparent ForceField
material. The mesh is just for surface smoothing, so a simple Union could be
used as well, though it&amp;rsquo;s less convenient to resize. Each part is rotated
continuously.&lt;/p&gt;
&lt;p&gt;Rays are cast from a defined plane using GetSunDirection, so some occlusion can
be achieved.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202201547/02.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;In practice, it seems like using meshes and ForceFields is excessive. Regular
transparent parts seem to produce more or less the same effect.&lt;/p&gt;
&lt;p&gt;Retrying with a simple triangle mesh has much better performance. An interesting
side-effect of using a mesh with bones is that the shape and appearance of the
ForceField can be controlled by the vertex normals.&lt;/p&gt;
&lt;p&gt;Rotating the vertex normals instead of the part produces a subtle
rolling-fog-like effect. Not sure if it will show up in the video, but it&amp;rsquo;s
really cool. Unfortunately, the performance is awful. Bone modification doesn&amp;rsquo;t
seem to be as optimized as it could be.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202201547/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;According to the profiler, modifying a Bone&amp;rsquo;s CFrame once involves 27 instances
of &amp;ldquo;Loader&amp;rdquo;, each involving a call to &amp;ldquo;IsA&amp;rdquo;. Definitely doesn&amp;rsquo;t seem right.&lt;/p&gt;
&lt;p&gt;Apparently the ForceField material can be affected by vertex color alphas, but
Blender doesn&amp;rsquo;t support them???&lt;/p&gt;
&lt;p&gt;A further optimization is to have multiple triangles per MeshPart. A mesh can
have up to 256 bones, which amounts to 85 triangles. This reduces the above
scene of ~400 parts down to just 6.&lt;/p&gt;</content:encoded></item><item><title>Plugin marketplace</title><link>https://anaminus.github.io/blog/briefs/202202152348/</link><pubDate>Tue, 15 Feb 2022 23:48:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202152348/</guid><content:encoded>&lt;p&gt;It&amp;rsquo;s fine to put pressure on Roblox for the plugin marketplace, but you have no
business being angry about it. Its financial viability was questioned from the
moment it was introduced.&lt;/p&gt;
&lt;p&gt;It has been around two years with no action from Roblox. A very short time to
coordinate a multitude of features across a variety of systems and teams while
also juggling other priorities. Especially considering the happenings during
those two particular years. My impression is that they&amp;rsquo;re working on it. Give
the feature the time it deserves.&lt;/p&gt;
&lt;p&gt;Moving to &lt;a href="http://itch.io"&gt;http://itch.io&lt;/a&gt; is an excellent way to apply pressure and get Roblox to
reevaluate their priorities. I just think that being upset about it comes off as
entitled.&lt;/p&gt;</content:encoded></item><item><title>coroutine.close</title><link>https://anaminus.github.io/blog/briefs/202202152139/</link><pubDate>Tue, 15 Feb 2022 21:39:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202152139/</guid><content:encoded>&lt;p&gt;The new &lt;code&gt;coroutine.close&lt;/code&gt; doesn&amp;rsquo;t cause the thread to be removed from the
scheduler, so it&amp;rsquo;s still sitting around in memory. Proper delay cancellation
remains unsolved.&lt;/p&gt;</content:encoded></item><item><title>Plugin marketplace category</title><link>https://anaminus.github.io/blog/briefs/202202111213/</link><pubDate>Fri, 11 Feb 2022 12:13:56 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202111213/</guid><content:encoded>&lt;p&gt;Just now I discovered that the devforum has a private category specifically for
the plugin marketplace, created only a few months ago. Maybe something&amp;rsquo;s up.&lt;/p&gt;</content:encoded></item><item><title>Plugin running</title><link>https://anaminus.github.io/blog/briefs/202202101444/</link><pubDate>Thu, 10 Feb 2022 14:44:21 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202101444/</guid><content:encoded>&lt;p&gt;Plugins run a lot earlier than you&amp;rsquo;d think. If you need to depend on the game
running, you can do the following to block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;RunService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;IsRunning&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;RunService.Stepped&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>select bug</title><link>https://anaminus.github.io/blog/briefs/202202091515/</link><pubDate>Wed, 09 Feb 2022 15:15:19 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202091515/</guid><content:encoded>&lt;p&gt;If you&amp;rsquo;re getting errors from my studio plugins, it&amp;rsquo;s because the select
function is being unruly again.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://devforum.roblox.com/t/1652975/7"&gt;https://devforum.roblox.com/t/1652975/7&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Money</title><link>https://anaminus.github.io/blog/briefs/202202061847/</link><pubDate>Sun, 06 Feb 2022 18:47:14 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202061847/</guid><content:encoded>&lt;blockquote&gt;
&lt;p&gt;A player reaches out to you for support on your Roblox game (data loss). While
gathering information you realize they ran exploits. Do you continue with
their request?&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/Ozzypig/status/1490454687539150853"&gt;Ozzypig, 10:37 PM · Feb 6, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Assuming my game has already isolated them from non-exploiters, the answer
depends on whether they&amp;rsquo;re making me money.&lt;/p&gt;</content:encoded></item><item><title>Ripples</title><link>https://anaminus.github.io/blog/briefs/202202022336/</link><pubDate>Wed, 02 Feb 2022 23:36:29 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202022336/</guid><content:encoded>&lt;p&gt;Tried a ripple effect.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202022336/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;</content:encoded></item><item><title>CFrames</title><link>https://anaminus.github.io/blog/briefs/202202011854/</link><pubDate>Tue, 01 Feb 2022 18:54:55 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202011854/</guid><content:encoded>&lt;p&gt;Attributes are not allowed to be CFrames. Why.&lt;/p&gt;
&lt;p&gt;Moreover, since Roblox&amp;rsquo;s inception they haven&amp;rsquo;t displayed CFrames in the
properties panel. Instead we&amp;rsquo;ve been getting things like Position/Orientation
pseudo-representations for select properties.&lt;/p&gt;
&lt;p&gt;Roblox could have done this years ago:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202202011854/00.png" width="368" height="206" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>ContentQueue</title><link>https://anaminus.github.io/blog/briefs/202202011201/</link><pubDate>Tue, 01 Feb 2022 12:01:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202011201/</guid><content:encoded>&lt;p&gt;ContentQueue: ordered preloading of assets.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/tree/master/modules/ContentQueue"&gt;https://github.com/Anaminus/roblox-library/tree/master/modules/ContentQueue&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title>Production logos</title><link>https://anaminus.github.io/blog/briefs/202202011022/</link><pubDate>Tue, 01 Feb 2022 10:22:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202202011022/</guid><content:encoded>&lt;p&gt;Production logo sequencer.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202202011022/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;First logo is actually 3D to avoid loading assets. On the other hand, the next
logo loads over 500 assets; the previous logo will wait until the next logo is
finished loading. The second run of the sequence demonstrates skipping via user
input.&lt;/p&gt;</content:encoded></item><item><title>Maid outfits</title><link>https://anaminus.github.io/blog/briefs/202201300125/</link><pubDate>Sun, 30 Jan 2022 01:25:57 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201300125/</guid><content:encoded>&lt;p&gt;Maid objects are just tables in maid outfits.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202201300125/00.jpg" width="909" height="1200" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>Maid pattern</title><link>https://anaminus.github.io/blog/briefs/202201300109/</link><pubDate>Sun, 30 Jan 2022 01:09:27 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201300109/</guid><content:encoded>&lt;p&gt;Maids are a pattern.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-lua" data-lang="lua"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;maid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pairs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;		&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;table.clear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button.Activated&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid.activated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;instance.Parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;maid.instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Destroy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;otherMaid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;otherMaid.maid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;otherMaid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title>Blender modernity</title><link>https://anaminus.github.io/blog/briefs/202201242346/</link><pubDate>Mon, 24 Jan 2022 23:46:45 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201242346/</guid><content:encoded>&lt;p&gt;After working with Blender for a while, Studio&amp;rsquo;s UI is really starting to feel
primitive.&lt;/p&gt;</content:encoded></item><item><title>Query plugin</title><link>https://anaminus.github.io/blog/briefs/202201191349/</link><pubDate>Wed, 19 Jan 2022 13:49:40 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201191349/</guid><content:encoded>&lt;p&gt;Lately I&amp;rsquo;ve been getting a lot of mileage out this selection querying plugin I
made:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Anaminus/roblox-library/blob/master/plugins/Utilities/q.lua"&gt;https://github.com/Anaminus/roblox-library/blob/master/plugins/Utilities/q.lua&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s based on Lua expressions (with some extra syntax), so it&amp;rsquo;s very versatile.&lt;/p&gt;</content:encoded></item><item><title>Cloth physics</title><link>https://anaminus.github.io/blog/briefs/202201122039/</link><pubDate>Wed, 12 Jan 2022 20:39:04 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201122039/</guid><content:encoded>&lt;p&gt;Here&amp;rsquo;s cloth physics via RodConstraints. Cloth is a MeshPart deformed by bones.
Bone positions are matched to node positions by a script. An AngularVelocity
dampens each node, since their rotations like to go crazy for some reason.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Bones have to be parented to a MeshPart to work, so a script is necessary. It
would be neat if they could refer to a mesh instead, so that they could be
placed inside different parts.&lt;/p&gt;
&lt;p&gt;Seems to run surprisingly well. Like capes-for-everyone might be viable, at
least for a low player count.&lt;/p&gt;
&lt;p&gt;The MeshPart is anchored, but its appearance is deformed using bones. A script
updates the positions of the bones every frame to match the positions of the red
balls, which are simulated with Roblox’s physics.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s cloth with SpringConstraints instead of rods. LinearVelocity dampens
movement. VectorForce negates gravity to reduce weight. Spring Stiffness makes
the cloth more or less stretchy.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/01.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;RodConstraints are much better for less stretchy material, but the
LinearVelocity force has to be increased to compensate for the increased
rigidity:&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/02.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Apparently the orientation of bones affects the vertex normals of meshes, so I
can&amp;rsquo;t really get away with just ignoring it. No good way using constraints, so
I&amp;rsquo;ll have to calculate it in Luau.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/03.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;hr&gt;
&lt;p&gt;What am I doing with my life.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/04.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;So, yes, it is possible to control bones with other parts, but it requires
certain constraint types to work. BallAndSocket is the most versatile, so I&amp;rsquo;ll
see if I can construct cloth out of that. Until then, it&amp;rsquo;s floppy rigatoni.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;hey tony, rig me a pasta noodle&amp;rdquo;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll have to rig-a-toni. Hahaha HAHAHAHAA AAAAAAAAAAAAAAAAAAAAAAAAA&lt;/p&gt;
&lt;p&gt;&amp;mdash; Me (utterly deranged)&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Think I have a general theory of how skinned meshes work. Two bones are merged
if and only if they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have the same Name.&lt;/li&gt;
&lt;li&gt;are under the same Model.&lt;/li&gt;
&lt;li&gt;are a part of the same assembly via compatible joints (JointInstance,
BallSocketConstraint, HingeConstraint).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If more than two bones meet these criteria, only one pair is merged. It&amp;rsquo;s not
clear which pair is selected, but it&amp;rsquo;s probably undefined.&lt;/p&gt;
&lt;p&gt;Bones usually exist internally in a mesh. The Bone instance can be thought of as
creating a virtual internal bone that is then merged as usual.&lt;/p&gt;
&lt;p&gt;Some examples of valid skinned mesh configurations (I forgot to update the
compatible joint list; any JointInstance is allowed, not just Motor6Ds and
Welds):&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202201122039/05.png" width="800" height="880" loading="lazy"&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;We variously called them “skinning islands” or “skeletons” instead of
assemblies (can span multiple assemblies or just a subset of one), but that’s
pretty much it. Bones don’t have to be child of mesh at all.&lt;/p&gt;
&lt;p&gt;This is how skinned avatars work. Parts link up, internal bones linked to the
respective parts. Using Parts instead of Bones but it’s all using the same
logic.&lt;/p&gt;
&lt;p&gt;&amp;mdash; &lt;a href="https://twitter.com/ContextLostRBX/status/1482992805953736704"&gt;@ContextLostRBX, 8:26 AM · Jan 17, 2022&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Here&amp;rsquo;s cloth driven entirely by physics. No scripts. Vertex normals are still a
problem because the BallSockets are allowed to twist. But if twist limits are
enabled, they start vibrating for some reason. Maybe the attachments are
oriented wrong.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/06.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Constructed in a zigzag because I had trouble getting the mesh to merge to the
assembly any other way. Either it only merges into one branch of an assembly, or
it&amp;rsquo;s something to do with the attachments. Doesn&amp;rsquo;t seem to care about the
direction of the connections, though.&lt;/p&gt;
&lt;p&gt;BallSockets have a sort of stiffness property that can be used to dampen the
motion, but this only works well for stiffer cloths. LinearVelocity will be
better for lighter cloth because it simulates air resistance.&lt;/p&gt;
&lt;p&gt;The horizontal red lines are Rods. It would actually be better to make these
parts with BallSockets on each end, so that all joints can have stiffness
applied to them. I&amp;rsquo;m not sure how that would affect the &amp;ldquo;branchiness&amp;rdquo; of the
assembly, though.&lt;/p&gt;
&lt;p&gt;Tried a new skeleton consisting of rows of chains of bones, which correspond to
chains of BallSockets. Each joint is then connected by a Rod. The problem now is
that character movement is way too aggressive. Maybe increasing the cloth weight
will help?&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/07.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;What happens when I enable collisions:&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/08.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;Nuking appears to be caused by cloth joints getting under the Humanoid. So,
instead of colliding with the Default group, a separate &amp;ldquo;ClothExclusion&amp;rdquo; group
is used (in red). Lowering the UpperAngle of the BallSockets reduces flailing
and tangling. Limb clipping still a problem.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202201122039/09.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The problem with limbs is that the Humanoid forces them to have no collisions.
Could be resolved by attaching ClothExclusion parts to each limb. Not sure how
badly that will affect flailing, though, if they even collide correctly.&lt;/p&gt;
&lt;p&gt;Something to try is to attach an AlignPosition with a weak force to the end of
each chain, aligning to the expected resting position of the end relative to the
character. It may also be possible to alter them dynamically to improve air
resistance simulation.&lt;/p&gt;
&lt;p&gt;Another problem is that something is interfering with jumping, leading to the
character being pushed horizontally. Also, landing wrong can cause the cloth to
detonate.&lt;/p&gt;
&lt;p&gt;The jumping problem is caused by the cloth joints affecting the inertia of the
character. Simply moving the cloth outside of the character model solved the
problem.&lt;/p&gt;
&lt;p&gt;Tried this, but it works rather poorly. The cloth doesn&amp;rsquo;t respond to limb
movement very well, so it still clips right through. A combination of reducing
limb animation and increasing the number of chains might help.&lt;/p&gt;</content:encoded></item><item><title>Export</title><link>https://anaminus.github.io/blog/briefs/202201090825/</link><pubDate>Sun, 09 Jan 2022 08:25:17 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202201090825/</guid><content:encoded>&lt;p&gt;One pattern I&amp;rsquo;ve been using lately is naming the table returned by modules
&amp;ldquo;export&amp;rdquo; instead of the module name. This creates a similarity to exporting
types, and also frees up the module name to be used for something else (usually
a metatable).&lt;/p&gt;</content:encoded></item><item><title>Reactive graphs</title><link>https://anaminus.github.io/blog/briefs/202112291451/</link><pubDate>Wed, 29 Dec 2021 14:51:06 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112291451/</guid><content:encoded>&lt;p&gt;Thinking about APIs.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/00.jpg" width="861" height="1059" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;One idea was using add/sub to compose sets of symbol types, such as &lt;code&gt;Prop &amp;quot;Name&amp;quot;-Set&lt;/code&gt; for a read-only property node, or &lt;code&gt;Receiver+Signal &amp;quot;Activated&amp;quot;&lt;/code&gt; for
a signal with a receiver. The Get/Set symbols would then be usable with Nodes to
control direction. I&amp;rsquo;m not sure how I feel about it, because it would enable
weird things like &lt;code&gt;Prop &amp;quot;Foo&amp;quot; + Attr &amp;quot;Bar&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Prototyping. Nothing actually graphy yet. &amp;ldquo;Prop&amp;rdquo; does get repetitive, so it
definitely needs a &amp;ldquo;Properties&amp;rdquo; tag that receives a dictionary.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/01.png" width="724" height="687" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Inst isn&amp;rsquo;t built in the to core (&amp;ldquo;Graf&amp;rdquo;). Instead, the core defines interfaces,
and Inst is just an implementation that operates on instances. Bind does the
heavy lifting of making data flow.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/02.png" width="717" height="209" loading="lazy"&gt;&lt;/figure&gt;&lt;p&gt;Bind returns the instance, along with a list of tasks to be finalized somewhere.
Schedule just sets these tasks to be finalized when the instance is destroyed.
Context returns a resolver that converts things like &lt;code&gt;Prop&amp;quot;Name&amp;quot;&lt;/code&gt; into actual
state.&lt;/p&gt;
&lt;p&gt;Implementing recursion. A context can resolve a sink (stuff on the left) into
another context, which must receive a map as a source (stuff on the right). In
this example, Properties becomes a context that converts string sinks into
property setters in addition to the usual stuff.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202112291451/03.png" width="558" height="342" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item><item><title>NFTs</title><link>https://anaminus.github.io/blog/briefs/202112282023/</link><pubDate>Tue, 28 Dec 2021 20:23:11 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112282023/</guid><content:encoded>&lt;p&gt;An NFT is a string of bytes. Some authority invented out of thin air then makes
the unenforceable claim that these bytes are associated with something else in a
vain attempt to give them value. After that it&amp;rsquo;s just the usual trading of fake
items in a fake market with fake money.&lt;/p&gt;
&lt;p&gt;Given that the value of these items hinge completely on this authority anyway,
the blockchain part (and all the dumb shit that goes with it) can be skipped
entirely. This is how Roblox works.&lt;/p&gt;
&lt;p&gt;The real point of interest is whether the fake money can be exchanged for real
money. In Roblox&amp;rsquo;s case, the fake money earned from the sales of fake items
cannot be exchanged for real money. However, it can be used indirectly towards
earning &amp;ldquo;clean&amp;rdquo; money that can be exchanged.&lt;/p&gt;</content:encoded></item><item><title>Collision detection</title><link>https://anaminus.github.io/blog/briefs/202112130043/</link><pubDate>Mon, 13 Dec 2021 00:43:31 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112130043/</guid><content:encoded>&lt;p&gt;Continuous collision detection. Very happy to finally have this working. No
raycasts. All Luau and a bunch of maths.&lt;/p&gt;
&lt;figure&gt;&lt;video src="https://anaminus.github.io/blog/briefs/202112130043/00.mp4" controls loop&gt;&lt;/video&gt;&lt;/figure&gt;&lt;p&gt;The position of the yellow ball is the white ball plus its velocity. The green
ball is the yellow ball plus the new velocity.&lt;/p&gt;
&lt;p&gt;It only does spheres vs triangles since that’s all I need, but it’s based off of
&lt;a href="https://github.com/davideberly/GeometricTools"&gt;GeometricTools&lt;/a&gt;, which has a number of different shapes.&lt;/p&gt;</content:encoded></item><item><title>Check for updates</title><link>https://anaminus.github.io/blog/briefs/202112030724/</link><pubDate>Fri, 03 Dec 2021 07:24:44 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202112030724/</guid><content:encoded>&lt;p&gt;Really annoyed by plugins that roll their own update checker. Especially ones
that don&amp;rsquo;t let me disable it. Apparently the Plugin Management panel doesn&amp;rsquo;t get
in my face enough for the author&amp;rsquo;s liking.&lt;/p&gt;</content:encoded></item><item><title>Roblox tough guy</title><link>https://anaminus.github.io/blog/briefs/202111300348/</link><pubDate>Tue, 30 Nov 2021 03:48:36 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202111300348/</guid><content:encoded>&lt;p&gt;I&amp;rsquo;ll set your Parent property to nil. I&amp;rsquo;ll call Destroy on your ass. You must
weigh a singleton, because you&amp;rsquo;re nothing but Debris to me. Your family better
connect to your Died event, because I&amp;rsquo;ll set your Health to 0. You better
BindToClose, because I&amp;rsquo;m about to shut you down.&lt;/p&gt;
&lt;p&gt;No need to set BreakJointsOnDeath, I&amp;rsquo;ll just call BreakJoints directly. We
better update your Transparency, because you&amp;rsquo;re about to become a ghost. Your
ancestry is about to change, kiddo. You&amp;rsquo;re no longer gonna be a descendant of
this DataModel when I&amp;rsquo;m through with you.&lt;/p&gt;
&lt;p&gt;And don&amp;rsquo;t think you&amp;rsquo;re coming back, because I&amp;rsquo;m setting your RespawnLocation to
nil. You&amp;rsquo;re gonna be FallingDown, but you wont be GettingUp, because I disabled
that Humanoid state. Your thread is suspended, and I&amp;rsquo;m calling coroutine.close
on you. No need to defer THIS task.&lt;/p&gt;
&lt;p&gt;The Garbage Collector&amp;rsquo;ll need several cycles to clean YOU away. Calling
GetFriendsOnline on you always returns an empty array. I&amp;rsquo;ll set your HeadLocked
and max out your NearPlaneZ. By the way these insults are licensed under MIT.&lt;/p&gt;</content:encoded></item><item><title>Loadstring</title><link>https://anaminus.github.io/blog/briefs/202111130955/</link><pubDate>Sat, 13 Nov 2021 09:55:48 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202111130955/</guid><content:encoded>&lt;p&gt;If you&amp;rsquo;re writing a plugin and want to avoid optimization penalties associated
with loadstring, you can just create a ModuleScript, set the Source, then
require it.&lt;/p&gt;</content:encoded></item><item><title>Downtime lore</title><link>https://anaminus.github.io/blog/briefs/202110300030/</link><pubDate>Sat, 30 Oct 2021 00:30:03 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110300030/</guid><content:encoded>&lt;p&gt;You don&amp;rsquo;t need Studio to expand your game&amp;rsquo;s lore.&lt;/p&gt;</content:encoded></item><item><title>Downtime</title><link>https://anaminus.github.io/blog/briefs/202110190855/</link><pubDate>Tue, 19 Oct 2021 08:55:52 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110190855/</guid><content:encoded>&lt;p&gt;Remember, time spent without access to Studio could be time spent singing
praises of The Cloud.&lt;/p&gt;</content:encoded></item><item><title>ReflectionMetadata</title><link>https://anaminus.github.io/blog/briefs/202110071042/</link><pubDate>Thu, 07 Oct 2021 10:42:00 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202110071042/</guid><content:encoded>&lt;p&gt;Roblox engineers definitely modify ReflectionMetadata manually.&lt;/p&gt;</content:encoded></item><item><title>MemoryStoreService</title><link>https://anaminus.github.io/blog/briefs/202109210922/</link><pubDate>Tue, 21 Sep 2021 09:22:32 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202109210922/</guid><content:encoded>&lt;p&gt;The documentation for the new MemoryStoreService is, of course, lacking. I&amp;rsquo;m
still able answer most of my own questions, but it&amp;rsquo;s a lot of extra work that
shouldn&amp;rsquo;t be necessary.&lt;/p&gt;</content:encoded></item><item><title>Long-hauling</title><link>https://anaminus.github.io/blog/briefs/202109121431/</link><pubDate>Sun, 12 Sep 2021 14:31:53 +0000</pubDate><guid>https://anaminus.github.io/blog/briefs/202109121431/</guid><content:encoded>&lt;p&gt;Developing on Roblox.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://anaminus.github.io/blog/briefs/202109121431/00.jpg" width="400" height="300" loading="lazy"&gt;&lt;/figure&gt;</content:encoded></item></channel></rss>