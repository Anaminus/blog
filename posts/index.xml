<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Anaminus.Blog</title><link>https://anaminus.github.io/blog/posts/</link><description>Recent content in Posts on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 07 Mar 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Safe cron minutes</title><link>https://anaminus.github.io/blog/posts/safe-cron-minutes/</link><pubDate>Thu, 07 Mar 2024 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/safe-cron-minutes/</guid><description>When is the best time to run your workflow?</description><content:encoded>&lt;pre>&lt;code>06 07 08 09 11 12 13 17
18 19 21 22 23 24 26 27
33 34 36 37 38 39 41 42
43 47 48 49 51 52 53 54
&lt;/code>&lt;/pre>
&lt;h2 id="theory">Theory&lt;/h2>
&lt;p>Everyone runs their scheduled jobs at simple minute steps like 60, 30, 15, or 5.&lt;/p>
&lt;pre>&lt;code> 0 * * * *
*/30 * * * *
*/15 * * * *
*/ 5 * * * *
&lt;/code>&lt;/pre>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Cron aligns minutes to the clock, leading to huge spikes of usage at those
intervals, as the hourly jobs, half-hourly jobs, etc, all run at once.&lt;/p>
&lt;pre>&lt;code>| | | |
| | | | | | |
| | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
&lt;/code>&lt;/pre>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;p>Use random, unusual minutes to distribute the load. Exclude the most common
minutes, and nearby minutes based on prevalence.&lt;/p>
&lt;pre>&lt;code>7 * * * *
26 */2 * * *
34,53 * * * *
&lt;/code>&lt;/pre>
&lt;h2 id="rules">Rules&lt;/h2>
&lt;p>Begin with the set of all minutes in the hour.&lt;/p>
&lt;ol>
&lt;li>Exclude 5 minute intervals.&lt;/li>
&lt;li>Exclude 15 minute intervals and nearest 1 minutes.&lt;/li>
&lt;li>Exclude 30 minute intervals and nearest 2 minutes.&lt;/li>
&lt;li>Exclude 60 minute intervals and nearest 4 minutes.&lt;/li>
&lt;li>Select minutes randomly from the remaining set.&lt;/li>
&lt;/ol>
&lt;!-- -->
&lt;pre>&lt;code>1.	2.	3.	4.	5.

00
	01
		02
			03
			04
05
				06 &amp;lt;
				07 &amp;lt;
				08 &amp;lt;
				09 &amp;lt;
10
				11 &amp;lt;
				12 &amp;lt;
				13 &amp;lt;
	14
15
	16
				17 &amp;lt;
				18 &amp;lt;
				19 &amp;lt;
20
				21 &amp;lt;
				22 &amp;lt;
				23 &amp;lt;
				24 &amp;lt;
25
				26 &amp;lt;
				27 &amp;lt;
		28
	29
30
	31
		32
				33 &amp;lt;
				34 &amp;lt;
35
				36 &amp;lt;
				37 &amp;lt;
				38 &amp;lt;
				39 &amp;lt;
40
				41 &amp;lt;
				42 &amp;lt;
				43 &amp;lt;
	44
45
	46
				47 &amp;lt;
				48 &amp;lt;
				49 &amp;lt;
50
				51 &amp;lt;
				52 &amp;lt;
				53 &amp;lt;
				54 &amp;lt;
55
			56
			57
		58
	59
00
&lt;/code>&lt;/pre>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>Is this really problem? Probably not; better solutions have likely taken care of
it.&lt;/p>
&lt;p>Don&amp;rsquo;t take &lt;code>19 * * * *&lt;/code>, though. I&amp;rsquo;m using it.&lt;/p></content:encoded></item><item><title>How the Plugin Marketplace actually works</title><link>https://anaminus.github.io/blog/posts/plugin-marketplace/</link><pubDate>Thu, 22 Jun 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/plugin-marketplace/</guid><content:encoded>&lt;h2 id="part-i---the-plugin-compensation-model">Part I - The Plugin Compensation Model&lt;/h2>
&lt;p>You are &lt;strong>developing a game&lt;/strong> on Roblox. Some aspect of your workflow is
lacking, so you write a Studio plugin. This plugin improves the workflow of the
&lt;strong>development of your game&lt;/strong>. You rejoice, as you are able to &lt;strong>develop your
game&lt;/strong> better. The hours put into the development of the plugin are compensated
by the increase in revenue deriving from the plugin allowing you to push out
updates and fixes to your game faster and more efficiently.&lt;/p>
&lt;p>Compensation for hours worked are derived from &lt;strong>your game&lt;/strong>, so putting in work
that doesn&amp;rsquo;t improve &lt;strong>your game&lt;/strong> is wasted work. If you are improving a plugin
that does not result in an improvement to your game, then &lt;strong>you will not be
compensated for your work&lt;/strong>. Thus, if there is no game, but you are still doing
work on plugins, then you are not being compensated.&lt;/p>
&lt;h2 id="part-ii---arent-developers-just-peachy">Part II - Aren&amp;rsquo;t developers just peachy?&lt;/h2>
&lt;p>Out of the goodness of your heart, you release this plugin for use by other
developers. You have no obligation to do this, nor are you beholden to any other
users of your plugin. You&amp;rsquo;ve already been compensated (by your game), so this is
entirely a charitable gesture. If you&amp;rsquo;re smart, you either maintain it as a
hobby, or just let it sit there while you do more important things.&lt;/p>
&lt;h2 id="part-iii---here-comes-the-money">Part III - Here comes the money&lt;/h2>
&lt;p>&lt;a href="https://devforum.roblox.com/t/400582">Roblox decides&lt;/a> to implement the option to put plugins on sale.
They do this either because they mistake how the Plugin Compensation Model
works, or they think developers&amp;rsquo; charity should be rewarded with some petty
cash.&lt;/p>
&lt;p>Regardless, this attracts developers to do work purely on plugins. As we know,
because they have no game backing their work, they are compensated only with
enough to buy a nice virtual hat or something. That is, no money.&lt;/p>
&lt;h2 id="conclusions---this-isnt-a-part">Conclusions - This isn&amp;rsquo;t a part&lt;/h2>
&lt;p>To summarize, without a game backing your plugin:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Make plugin -&amp;gt; ??? -&amp;gt; No money&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>With a game:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>Make plugin -&amp;gt; Improve game -&amp;gt; Yes money&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>This is how the Plugin Compensation Model has worked since the inception of
plugins, and this is how it continues to work to this day, despite what everyone
thinks, and despite Roblox&amp;rsquo;s apparent efforts to make it look like plugins can
bring in yes money independently. Don&amp;rsquo;t be fooled.&lt;/p>
&lt;p>Assuming that this model does not change:&lt;/p>
&lt;ul>
&lt;li>The &amp;ldquo;marketplace&amp;rdquo; should be abolished. That is, all plugins should be free.
Allowing a price to be put on plugins tricks developers into believing that
they are a possible source of yes money.&lt;/li>
&lt;li>If you&amp;rsquo;re a plugin developer, make games instead. Make UGC. Make something
that can be serviced by plugins. Or, secure patrons. Seek contracting or
employment by one of the many studios sprouting up. Make plugins directly in
service of &lt;em>their&lt;/em> content while making them pay you definite yes money.&lt;/li>
&lt;li>Whatever it is you &lt;span title="oh baby a triple">&lt;em>do&lt;/em> do, do&lt;/span> not
expect compensation for work done on a plugin that isn&amp;rsquo;t directly in service
of a game or other UGC. At best, expect no money.&lt;/li>
&lt;/ul></content:encoded></item><item><title>CFrame mnemonics</title><link>https://anaminus.github.io/blog/posts/cframe-mnemonics/</link><pubDate>Tue, 31 Jan 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/cframe-mnemonics/</guid><description>A way to remember how CFrames are used.</description><content:encoded>&lt;h2 id="methods">Methods&lt;/h2>
&lt;p>Certain methods on CFrame have an equivalent operator-based expression, which
can be useful for understanding how they work:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Method&lt;/th>
 &lt;th>Expression&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>A:ToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A * (B::CFrame)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:ToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse() * (B::CFrame)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:PointToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:PointToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse() * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:VectorToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A.Rotation * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:VectorToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse().Rotation * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="space-conversion-analogy">Space-conversion analogy&lt;/h2>
&lt;p>CFrame multiplication is not equivalent to addition. However, certain aspects
can be reused in order to remember how it works.&lt;/p>
&lt;p>Pretend that &lt;code>A * B&lt;/code> is analogous to &lt;code>B + A&lt;/code>. Also pretend that &lt;code>A:Inverse()&lt;/code> is
analogous to &lt;code>-A&lt;/code>. There is no subtraction, but the formula &lt;code>B - A&lt;/code> can be
rewritten as &lt;code>-A + B&lt;/code>. So, when we see the expression &lt;code>A:Inverse() * B&lt;/code>, it can
be thought of as a sort of &lt;code>B - A&lt;/code>.&lt;/p>
&lt;p>This explains ToObjectSpace. It &amp;ldquo;subtracts&amp;rdquo; the origin &lt;code>A&lt;/code> from the subject &lt;code>B&lt;/code>
to get the location of &lt;code>B&lt;/code> relative to &lt;code>A&lt;/code>. ToWorldSpace is the reverse; the
origin is added back to the subject to get the real world location.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Method&lt;/th>
 &lt;th style="text-align: right">Analogy&lt;/th>
 &lt;th style="text-align: right">Rewritten&lt;/th>
 &lt;th>Actual&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>A:ToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td style="text-align: right">&lt;code>B + A&lt;/code>&lt;/td>
 &lt;td style="text-align: right">&lt;code>A + B&lt;/code>&lt;/td>
 &lt;td>&lt;code>A * B&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:ToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td style="text-align: right">&lt;code>B - A&lt;/code>&lt;/td>
 &lt;td style="text-align: right">&lt;code>-A + B&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse() * B&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table></content:encoded></item><item><title>On CFrame vectors</title><link>https://anaminus.github.io/blog/posts/cframe-vectors/</link><pubDate>Sun, 29 Jan 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/cframe-vectors/</guid><description>Correcting documentation on CFrames.</description><content:encoded>&lt;p>In Roblox, the &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame">CFrame&lt;/a> type has several &amp;ldquo;Vector&amp;rdquo; fields representing
the directions of various axes of the CFrame. There are two sets of 3 vectors:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#RightVector">RightVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#UpVector">UpVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#LookVector">LookVector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#XVector">XVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#YVector">YVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#ZVector">ZVector&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Roblox&amp;rsquo;s documentation claims that these fields represent the rows and columns
of the CFrame&amp;rsquo;s rotation matrix. The X, Y, Z fields are the rows, and the Right,
Up, Look fields are the columns. &lt;strong>This is very significantly incorrect&lt;/strong>.
Inspecting the values of each component reveals it so:&lt;/p>
&lt;pre>&lt;code>CFrame.identity:GetComponents()
	0 0 0 1 0 0 0 1 0 0 0 1

CFrame.identity.Position
	0 0 0

CFrame.identity.XVector
	1 0 0

CFrame.identity.YVector
	0 1 0

CFrame.identity.ZVector
	0 0 1

CFrame.identity.RightVector
	1 0 0

CFrame.identity.UpVector
	0 1 0

CFrame.identity.LookVector
	-0 -0 -1
&lt;/code>&lt;/pre>
&lt;p>What we can see is that the X-, Y- and ZVector fields correspond directly to the
components:&lt;/p>
&lt;pre>&lt;code>Fields [Position][XVector][YVector][ZVector]
Components 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1
&lt;/code>&lt;/pre>
&lt;p>We also notice some other things:&lt;/p>
&lt;ul>
&lt;li>RightVector and UpVector appear to be redundant with XVector and YVector.&lt;/li>
&lt;li>LookVector always equal to -ZVector.&lt;/li>
&lt;/ul>
&lt;p>Why would it be like this? Is the implementation incorrect?&lt;/p>
&lt;p>Nope. The explanation is that the X-, Y-, and ZVector fields represent the raw
components of the CFrame matrix, while the Right-, Up- and LookVector fields
represent more practical values.&lt;/p>
&lt;p>Originally, CFrames had only the LookVector field (stylized as &lt;code>lookVector&lt;/code>). It
represents the most interesting vector, being the &amp;ldquo;front&amp;rdquo; face of the CFrame, or
the direction the CFrame was &amp;ldquo;looking&amp;rdquo;. Very useful for getting things to look
at or move towards other things. For whatever reason, Roblox defined the front
face to be the &lt;em>complement&lt;/em> of the Z direction.&lt;/p>
&lt;p>Eventually, the other vector fields were added. RightVector and UpVector were
added as counterparts to LookVector. However, to correctly derive the raw
components from these vectors, one would have to remember to invert the
LookVector.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cframe.RightVector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">up&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cframe.UpVector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">lookaway&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">cframe.LookVector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">r00&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r02&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">right.X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right.Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">right.Z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">r10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r12&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">up.X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">up.Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">up.Z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">r20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r21&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r22&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">lookaway.X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lookaway.Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">lookaway.Z&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Because this would be confusing and easy to forget, the ZVector field was added
to represent the raw Z direction, along with XVector and YVector as
counterparts. This explains the redundancy of XVector/RightVector and
YVector/UpVector.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cframe.XVector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cframe.YVector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cframe.ZVector&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">r00&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r02&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x.X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x.Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x.Z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">r10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r12&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">y.X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y.Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y.Z&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">r20&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r21&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r22&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">z.X&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z.Y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z.Z&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To summarize, RightVector is always equal to XVector, UpVector is always equal
to YVector, and LookVector is always equal to the complement of ZVector. And
don&amp;rsquo;t let the documentation let you think otherwise.&lt;/p>
&lt;pre>&lt;code>RightVector == XVector
UpVector == YVector
LookVector == -ZVector
&lt;/code>&lt;/pre></content:encoded></item><item><title>Rojo wrangling</title><link>https://anaminus.github.io/blog/posts/rojo-wrangling/</link><pubDate>Mon, 19 Dec 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/rojo-wrangling/</guid><description>Getting Rojo to fit your project's structure.</description><content:encoded>&lt;p>I have particular preferences about how I want my projects to be structured, and
I will bend my tools to make it work. This time, the tool being flexed is
&lt;a href="https://rojo.space/">Rojo&lt;/a>.&lt;/p>
&lt;p>I want related modules to be grouped together into one &amp;ldquo;package&amp;rdquo;. If a package
has a server component and a client component, I want those two files to live
next to each other under the same folder. However, there are two problems that
make this structure difficult to have.&lt;/p>
&lt;p>Problem #1 is how Roblox handles replication. The client component has to be in
one location in order to replicate to clients, while the server component has to
be in a different location in order to be isolated from clients. They inherently
cannot be together (how dramatic).&lt;/p>
&lt;p>There &lt;em>is&lt;/em> the new &lt;a href="https://robloxapi.github.io/ref/enum/RunContext.html">RunContext&lt;/a> property that might solve this
problem, but I haven&amp;rsquo;t explored its uses in full, and I&amp;rsquo;m somewhat skeptical of
its utility. More importantly, it doesn&amp;rsquo;t have first-class support in Rojo, so
it&amp;rsquo;s not terribly easy to use.&lt;/p>
&lt;p>Problem #2 is that the default structure for Rojo projects is rather literal: a
file corresponds to an instance. With a simple tree definition, Rojo causes the
file structure to correspond mostly to the DataModel structure, which means
DataModel problems become file system problems.&lt;/p>
&lt;p>There is an out, though. In Rojo, projects are recursive. While traversing the
project tree, if a &lt;code>project.json&lt;/code> file is encountered, it will be turned into a
node by evaluating the content as a sort of sub-project. The rules for how this
works turns out to be very relaxed. Enough so that it&amp;rsquo;s possible to get Rojo to
build just about any project structure if you put in the effort.&lt;/p>
&lt;p>To generalize this concept, I introduce what I call &amp;ldquo;pointer files&amp;rdquo;. These are
just regular &lt;code>project.json&lt;/code> files, but they have barest minimum content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;NAME&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;tree&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>&lt;span class="nt">&amp;#34;$path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;REFERENT&amp;#34;&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>NAME&lt;/code> defines the name of the node, and &lt;code>REFERENT&lt;/code> defines a path to the
file to be used as the node, relative to the project file. If you give each
pointer file a different name, then you can create any number of pointers in the
same folder.&lt;/p>
&lt;h2 id="packages-example">Packages example&lt;/h2>
&lt;p>As an example, let&amp;rsquo;s say I have a &lt;code>pkg&lt;/code> folder that I use to contain packages.
Each subfolder is one package, and &amp;ldquo;server&amp;rdquo; and &amp;ldquo;client&amp;rdquo; files within are the
respective components:&lt;/p>
&lt;ul>
&lt;li>&lt;code>pkg/foo/server.lua&lt;/code>&lt;/li>
&lt;li>&lt;code>pkg/foo/client.lua&lt;/code>&lt;/li>
&lt;li>&lt;code>pkg/bar/server.lua&lt;/code>&lt;/li>
&lt;li>&lt;code>pkg/bar/client.lua&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Then I have a separate &lt;code>game&lt;/code> folder, which contains a literal representation of
the DataModel:&lt;/p>
&lt;ul>
&lt;li>&lt;code>game/ServerScriptService&lt;/code>: Contains server components.&lt;/li>
&lt;li>&lt;code>game/ReplicatedStorage&lt;/code>: Contains client components.&lt;/li>
&lt;/ul>
&lt;p>I can &amp;ldquo;unpack&amp;rdquo; my packages by creating a number of pointer files under the
&lt;code>game&lt;/code> folder that point to files in the &lt;code>pkg&lt;/code> folder:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">game/ServerScriptService/foo.project.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;name&amp;#34;:&amp;#34;foo&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/foo/server.lua&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">game/ServerScriptService/bar.project.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;name&amp;#34;:&amp;#34;bar&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/bar/server.lua&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">game/ReplicatedStorage/foo.project.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;name&amp;#34;:&amp;#34;foo&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/foo/client.lua&amp;#34;}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">game/ReplicatedStorage/bar.project.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {&amp;#34;name&amp;#34;:&amp;#34;bar&amp;#34;,&amp;#34;tree&amp;#34;:{&amp;#34;$path&amp;#34;:&amp;#34;../../pkg/bar/client.lua&amp;#34;}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Finally, the root &lt;code>default.project.json&lt;/code> points to the &lt;code>game&lt;/code> folder, so that
building the project builds everything from there.&lt;/p>
&lt;h2 id="cloning-example">Cloning example&lt;/h2>
&lt;p>This technique is surprisingly versatile. Here&amp;rsquo;s another example: I have two
scripts that are used as the entrypoints for the server and client,
respectively. They both share a common &amp;ldquo;maid&amp;rdquo; module. The normal solution is to
have common modules stored under ReplicatedStorage. But I want the client
entrypoint to be snappy, so depending on modules outside of ReplicatedFirst is
not allowed. Instead, I have the structure set up as the following:&lt;/p>
&lt;ul>
&lt;li>&lt;code>core/bootstrap.client/init.client.lua&lt;/code>&lt;/li>
&lt;li>&lt;code>core/bootstrap.client/maid.project.json&lt;/code>&lt;/li>
&lt;li>&lt;code>core/bootstrap.server/init.server.lua&lt;/code>&lt;/li>
&lt;li>&lt;code>core/bootstrap.server/maid.project.json&lt;/code>&lt;/li>
&lt;li>&lt;code>core/maid.lua&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Both &lt;code>maid.project.json&lt;/code> files have the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>&lt;span class="nt">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;maid&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nt">&amp;#34;tree&amp;#34;&lt;/span>&lt;span class="p">:{&lt;/span>&lt;span class="nt">&amp;#34;$path&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;../maid.lua&amp;#34;&lt;/span>&lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then I have the usual pointers under the game tree to move the scripts to their
proper locations under ReplicatedFirst and ServerScriptService.&lt;/p>
&lt;p>What&amp;rsquo;s interesting is that, when Rojo builds the project, it creates a copy of
the &lt;code>maid.lua&lt;/code> module under each bootstrap script. This allows me to have just
one file as the source of two separate modules! I&amp;rsquo;m sure this definitely wont
backfire in some subtle way!&lt;/p>
&lt;h2 id="automation">Automation&lt;/h2>
&lt;p>While my project is still in its infancy, I&amp;rsquo;m creating, removing, and renaming
files left and right. Manually keeping the pointer files up to date is an
exercise in futility, so I automate the whole thing with an &lt;a href="https://github.com/anaminus/rbxmk">rbxmk&lt;/a>
script instead. This script defines how to map files around, while the
&lt;a href="https://gist.github.com/Anaminus/135999033fa01a3b1491b0d0e54b6f68">Build.rbxmk.lua&lt;/a> library does the heavy lifting. An example
script might look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Require the Build library.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">Build&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rbxmk.runFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">path.expand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;$sd/lib/Build.rbxmk.lua&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Map package components to their respective locations.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Build.package&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/pkg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="n">boot&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;game/ReplicatedFirst&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="n">server&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;game/ServerScriptService&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="n">client&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;game/ReplicatedStorage/client&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="n">shared&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;game/ReplicatedStorage/shared&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="n">internal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;game/ReplicatedStorage/internal&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Map bootstrap scripts.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Build.ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;core/bootstrap.client&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;game/ReplicatedFirst/bootstrap&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Build.ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;core/bootstrap.server&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;game/ServerScriptService/bootstrap&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- Remove any files that haven&amp;#39;t been touched by this build script, which&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">-- accounts for renames/removals/etc.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Build.clean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;game&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unfortunately, the script requires the latest unreleased version of rbxmk, so
you&amp;rsquo;ll have to build it yourself if you want to use this (sorry!). This post is
more to showcase the technique of abusing Rojo&amp;rsquo;s project files to do crazy
things anyway.&lt;/p>
&lt;p>This technique is very general, so there&amp;rsquo;s nothing stopping you from
implementing it with your preferred method of automation. Come up with a
structure that best suits your needs!&lt;/p></content:encoded></item><item><title>Managing assets locally</title><link>https://anaminus.github.io/blog/posts/managing-assets-locally/</link><pubDate>Wed, 23 Nov 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/managing-assets-locally/</guid><description>Keeping your Roblox assets on your computer.</description><content:encoded>&lt;p>If you&amp;rsquo;re not indoctrinated into the cult of The Cloud™, then managing assets on
Roblox can be a pain. The assumption seems to be that you&amp;rsquo;re meant to upload
everything and subject it to moderation whether it&amp;rsquo;s ready or not.&lt;/p>
&lt;p>I prefer to keep assets local for as long as possible. Roblox Studio has an
option to hot-reload assets that live on the local file system, which is
absolutely invaluable for fast iteration. Uploading a million variations of
textures that I&amp;rsquo;ll never use ever again doesn&amp;rsquo;t make any sense.&lt;/p>
&lt;p>The problem with locally-sourced assets is that there aren&amp;rsquo;t many locations that
Studio will read assets from. One of them is Roblox&amp;rsquo;s content folder, which is
referred to using the &lt;code>rbxasset://&lt;/code> scheme. This contains most of the assets
Roblox uses for their user interfaces, plugins, and whatnot. Unfortunately, it&amp;rsquo;s
annoying for developers to use for their own assets, because the location
changes every time Roblox updates.&lt;/p>
&lt;p>This could be worked around with some tooling, but Studio does have an
additional folder that is more persistent. It&amp;rsquo;s located in the same place where
settings are stored. On Windows, this is the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>%LocalAppData%\Roblox\LocalAssets
&lt;/code>&lt;/pre>&lt;p>This folder behaves like the content folder. Files in here can be referred to
using the same &lt;code>rbxasset://&lt;/code> scheme. Studio sort of merges this with the content
folder, checking the other folder if a file was not found in the first.&lt;/p>
&lt;p>Studio also has a hidden setting that controls the location of this folder. In
the same place as LocalAssets (&lt;code>%LocalAppData%\Roblox&lt;/code>), there is the
&lt;code>GlobalSettings_13.xml&lt;/code> file (the numeric suffix may vary). Within this file is
the &amp;ldquo;Studio&amp;rdquo; class. Within the Studio class is a &amp;ldquo;LocalAssetsFolder&amp;rdquo; setting
that doesn&amp;rsquo;t appear in the normal settings list. This setting determines which
folder local assets will be read from.&lt;/p>
&lt;p>The problem with this folder is that it&amp;rsquo;s only &lt;em>one&lt;/em> folder. Us developers, we
tend to make many projects. And having to keep project-specific assets outside
of the project isn&amp;rsquo;t fun to deal with.&lt;/p>
&lt;p>My go-to solution is to use symbolic links, which is (very fortunately)
supported by Studio. The idea is to have a folder in your project that is used
for assets (e.g. &lt;code>project/assets&lt;/code>). A link to this folder is then made in the
LocalAssets folder, using the project&amp;rsquo;s name as the name of the link.&lt;/p>
&lt;p>Windows has the &lt;code>mklink&lt;/code> command for making symbolic links:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="k">cd&lt;/span> &lt;span class="nv">%LocalAppData%&lt;/span>\Roblox\LocalAssets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">mklink&lt;/span> /D project path\to\project\assets
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will make a directory link called &amp;ldquo;project&amp;rdquo; in the LocalAssets folder. Now
if I have the texture &lt;code>project/assets/foobar.png&lt;/code>, I can refer to it in Studio
as &lt;code>rbxasset://project/foobar.png&lt;/code>.&lt;/p>
&lt;p>I&amp;rsquo;ve simplified this process with a &lt;code>.bat&lt;/code> script that makes it possible to drag
a project&amp;rsquo;s asset folder into the script file, and the symbolic link is created
automatically:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-batch" data-lang="batch">&lt;span class="line">&lt;span class="cl">&lt;span class="p">@&lt;/span>&lt;span class="k">echo&lt;/span> off
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">:&lt;/span>&lt;span class="c1">: Replace with location configured by LocalAssetsFolder.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">cd&lt;/span> &lt;span class="nv">%LocalAppData%&lt;/span>\Roblox\LocalAssets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="se">%%&lt;/span>a &lt;span class="k">in&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">%~p1&lt;/span>&lt;span class="s2">.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="k">set&lt;/span> &lt;span class="s2">&amp;#34;x=&lt;/span>&lt;span class="se">%%&lt;/span>&lt;span class="s2">~nxa&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">mklink&lt;/span> /D &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">%x%&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">%1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">pause&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that this assumes the asset folder is located in the root of the project.
The script looks at the name of the parent directory of the given folder to get
the project name, which is used to name the link.&lt;/p>
&lt;p>As demonstrated, some tooling is required to manage assets locally, but at least
it only needs to be run once, at the start of a new project.&lt;/p>
&lt;p>I&amp;rsquo;m still working out the best way to deal with turning local assets into The
Cloud™ assets. I have some ideas, but I&amp;rsquo;ll save it for another post.&lt;/p></content:encoded></item><item><title>Exclusive replication</title><link>https://anaminus.github.io/blog/posts/exclusive-replication/</link><pubDate>Sun, 20 Nov 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/exclusive-replication/</guid><description>Getting Roblox to replicate things only to certain clients.</description><content:encoded>&lt;p>Instances in Roblox &lt;strong>replicate&lt;/strong>. That is, a particular instance on the server
will have a copy of itself on each client, and all aspects of this instance are
kept synchronized, including what children it has. In almost all cases, this
replication occurs in one direction only, from server to client.&lt;/p>
&lt;p>Say the server has a red brick in the Workspace. This brick will be replicated
to all clients. When the server changes the brick&amp;rsquo;s color to blue, this change
will be replicated to each client, making their local copy of the brick also
blue. However, when a client tries to change the color of its brick to green,
this change is &lt;em>not&lt;/em> replicated back to the server or any other client. The
change remains local to the client. Moreover, because only changes are
replicated, the server wont constantly be trying to update the brick&amp;rsquo;s color
back to red, so it will remain green, at least until the server changes the
color again.&lt;/p>
&lt;p>A problem with most instances is that they have only two replication behaviors:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>All&lt;/strong>: The instance is replicated to all clients.&lt;/li>
&lt;li>&lt;strong>None&lt;/strong>: The instance is not replicated to any client.&lt;/li>
&lt;/ul>
&lt;p>This can be annoying if we have an instance that we want to show only to one
client. Or if we want to keep network usage down, we want to replicate only
relevant instances instead of absolutely everything.&lt;/p>
&lt;p>Note that I said &amp;ldquo;most&amp;rdquo; instances. There is in fact exactly &lt;em>one&lt;/em> instance that
has a different behavior. If you look at the &lt;a href="https://create.roblox.com/docs/reference/engine/classes/PlayerGui">documentation page for
PlayerGui&lt;/a>, you will see that it has a curious tag called &lt;code>Player Replicated&lt;/code>. The tag&amp;rsquo;s tooltip says the following:&lt;/p>
&lt;blockquote>
&lt;p>This object’s replication behavior is dependent on the player who owns it.&lt;/p>&lt;/blockquote>
&lt;p>What this means is that the PlayerGui replicates only to one client.
Specifically, PlayerGui&amp;rsquo;s parent Player instance.&lt;/p>
&lt;p>It makes sense in context. GUIs are rendered locally on the client only for the
one player. It doesn&amp;rsquo;t make sense to render everyone else&amp;rsquo;s GUIs, so there&amp;rsquo;s no
point in replicating them either.&lt;/p>
&lt;p>We can use this as a solution to our problems. To replicate an instance
exclusively to one client, we can copy the instance to the client&amp;rsquo;s PlayerGui.&lt;/p>
&lt;figure>
&lt;img src="fig1.png">
&lt;figcaption>
You can put anything under the PlayerGui.
&lt;/figcaption>
&lt;/figure>
&lt;p>I use the term &amp;ldquo;exclusive&amp;rdquo; here rather than &amp;ldquo;selective&amp;rdquo;, because this technique
doesn&amp;rsquo;t actually let us select which clients a specific instance is replicated
to. Instead, we have to make a copy of the instance on the server for each
client we want to replicate to. It&amp;rsquo;s possible to write a module that manages all
of this for us, at which point the module could be called selective. But the
underlying technique is exclusive.&lt;/p>
&lt;p>Anyway, we can now choose which clients to replicate to, but there are some new
problems to take care of. Because we are using the PlayerGui, we have to
consider its other behaviors. Namely, that it renders ScreenGuis placed under
it. We want to be able to exclusively replicate a ScreenGui without
unintentionally rendering it. We could make an exception, such as forcing
&lt;code>ScreenGui.Enabled&lt;/code> to false before replicating, but there&amp;rsquo;s a more general
solution.&lt;/p>
&lt;p>Remember how I said that changes on the client do not replicate back to the
server? This includes moving the instance around. An instance on the server is
matched to an instance on the client by the instance itself, rather than its
location. So, on the client, as long as the instance stays under the DataModel,
it will continue to receive changes from the server no matter where it is
located.&lt;/p>
&lt;figure>
&lt;img src="fig2.png">
&lt;figcaption>
Moving an instance is considered a distinct unit of change, like setting a
property or adding a new child. That is, whenever some other change occurs,
there isn't going to be an additional check to make sure the instance in
question is in the right place. The Parent property of the instance will only be
replicated when it actually changes on the server.
&lt;/figcaption>
&lt;/figure>
&lt;p>Instead of putting instances directly in the PlayerGui, let&amp;rsquo;s put them in a
Folder that is located under the PlayerGui. On the server, the Folder must
always stay here. On the client however, it can be moved to anywhere we want. By
moving it outside of the PlayerGui, the replication behavior is retained, while
the GUI-rendering behavior is dropped.&lt;/p>
&lt;figure>
&lt;img src="fig3.png">
&lt;figcaption>
Changes to the Container on the server are still replicated to the Container on
the client, no matter where it is located. ServerStorage is perfectly usable on
the client, and makes for a good location to store the Container.
&lt;/figcaption>
&lt;/figure>
&lt;p>There is only one more problem now: by default, all instances under the
PlayerGui will be removed before the player&amp;rsquo;s character respawns. For
ScreenGuis, this can be prevented with the ResetOnSpawn property, but Folders do
not have this. Fortunately, there is the
&lt;a href="https://create.roblox.com/docs/reference/engine/classes/StarterGui#ResetPlayerGuiOnSpawn">StarterGui.ResetPlayerGuiOnSpawn&lt;/a> property. While this
is listed as deprecated, it can still be used just fine. However, it is also
hidden from the properties panel in Studio, so the command bar is needed in
order to change it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="n">game.StarterGui&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ResetPlayerGuiOnSpawn&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Setting this property to false will prevent any instance under the PlayerGui
from being removed when the character respawns. Note that this does change
StarterGui behavior, so we&amp;rsquo;ll have to adjust accordingly.&lt;/p>
&lt;p>Overall, this is a very hacky workaround. But hopefully it justifies the
addition of some kind of &amp;ldquo;PlayerStorage&amp;rdquo; container, whose only purposes is to
replicate its descendants to one player at a time. There are other more
complicated solutions to selective replication, but I feel like this would be a
good and very simple intermediate step.&lt;/p>
&lt;figure>
&lt;img src="fig4.png">
&lt;figcaption>
Get an icon ready!
&lt;/figcaption>
&lt;/figure>
&lt;p>We might be tempted to do this right now; instead of putting the Container under
ServerStorage, we could call it &amp;ldquo;PlayerStorage&amp;rdquo; and put it directly under the
Player. However, if Roblox does add their own PlayerStorage container, then it
will conflict with ours, and things will likely break. Personally, I really like
the idea of PlayerStorage, and wouldn&amp;rsquo;t want to do anything that would
discourage Roblox from implementing it as-is. So, I would either put the
container somewhere else, or at least give it a different name.&lt;/p></content:encoded></item><item><title>Considering options</title><link>https://anaminus.github.io/blog/posts/considering-options/</link><pubDate>Thu, 10 Nov 2022 06:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/considering-options/</guid><description>How to implement an Optional type in Go.</description><content:encoded>&lt;p>I&amp;rsquo;m in the middle of rewriting &lt;a href="https://github.com/robloxapi/rbxfile">rbxfile&lt;/a>. A rewrite gives the
opportunity to right any wrongs.&lt;/p>
&lt;p>One of the wrongs was my approach to Optional types. That is not to say that it
was incorrect, but it perhaps wasn&amp;rsquo;t considered as carefully as it could have
been. Moreover, Go didn&amp;rsquo;t have generics at the time, so there were fewer good
options available.&lt;/p>
&lt;p>I currently have the Optional type implemented as a struct with a Type and a
Value field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Optional&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">typ&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">value&lt;/span> &lt;span class="nx">Value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A Type is an enum representing a limited set of data types. A Value is an
interface containing a value of one of these types (a part of the contract is a
&lt;code>Type()&lt;/code> method that returns the Type).&lt;/p>
&lt;p>The some-ness of the Optional is indicated by the Value being non-nil. When it
is nil, the additional Type field is included so that a none-y Optional still
has a type. These fields are encapsulated to prevent things from getting weird.&lt;/p>
&lt;p>Overall, pretty clunky. This is what we must do when generics aren&amp;rsquo;t a thing.&lt;/p>
&lt;p>Once generics landed, more possibilities became available. I tried grappling
with them a few months ago, but wasn&amp;rsquo;t able to settle on anything. Not only was
I still figuring out generics, but there were always questions of &amp;ldquo;What if this
implementation prevents me from using it in some necessary way? What if that
other implementation does the same thing, but for different requirements?&amp;rdquo; The
real problem was that the requirements were poorly understood.&lt;/p>
&lt;p>Now that I&amp;rsquo;m rewriting the whole thing, I&amp;rsquo;m able to take a step back and look at
the full picture. With a better view, I was able to come up with the following
requirement:&lt;/p>
&lt;ul>
&lt;li>I need to be able to type-switch over the inner type of an optional.&lt;/li>
&lt;/ul>
&lt;p>That is, once a type has been determined to be &lt;em>some kind&lt;/em> of Optional, I then
need to be able to determine that inner type. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">InspectValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">Value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">switch&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">String&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s a string!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">CFrame&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s a CFrame!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">Optional&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s optional!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Optional&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="k">if&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="nx">Optional&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">!&lt;/span>&lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">			&lt;span class="nf">InspectValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would recursively cover the following types:&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code>&lt;/li>
&lt;li>&lt;code>CFrame&lt;/code>&lt;/li>
&lt;li>&lt;code>Optional&amp;lt;String&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>Optional&amp;lt;CFrame&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>The keyword being &amp;ldquo;recursive&amp;rdquo;. It&amp;rsquo;s a lot easier if I don&amp;rsquo;t have to reimplement
cases for each type of Optional that might crop up.&lt;/p>
&lt;p>Once you have at least one requirement, it becomes infinitely easier to think
about the implementation. Whether it is good or bad can actually be answered.&lt;/p>
&lt;p>Additionally, the various possible implementations for Optional have had time to
gestate in my mind. I was able to determine that there are two separated
concerns: an interface for the optional, and the implementations of this
interface.&lt;/p>
&lt;h2 id="interfaces">Interfaces&lt;/h2>
&lt;p>On the interface side, there are two possibilities:&lt;/p>
&lt;ul>
&lt;li>Typed interface&lt;/li>
&lt;li>Untyped interface&lt;/li>
&lt;/ul>
&lt;h3 id="typed-interface">Typed interface&lt;/h3>
&lt;p>The typed interface has a method where the optional returns its inner type
directly. It can be defined like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">TypedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nf">TypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>That is, for an Optional with inner type T, the method returns a value of type
T.&lt;/p>
&lt;p>How does this fit into the requirements? Well, not very well. It isn&amp;rsquo;t possible
to have &lt;em>any kind&lt;/em> of optional as a case. The inner type of the optional must be
known beforehand. The inspector would have to look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">InspectValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">Value&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">switch&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">String&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s a string!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">CFrame&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s a CFrame!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">String&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s a string?&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Optional&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nf">InspectValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">case&lt;/span> &lt;span class="nx">Optional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">CFrame&lt;/span>&lt;span class="p">]:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it&amp;#39;s a CFrame?&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Optional&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="nf">InspectValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">v&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, if I did need this kind of switching, then this interface would be great
to have. For now, though, I&amp;rsquo;ll keep it off to the side.&lt;/p>
&lt;h3 id="untyped-interface">Untyped interface&lt;/h3>
&lt;p>The untyped interface has a similar method, except that the value is returned
through an empty interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">UntypedOptional&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nf">UntypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Unlike the typed variation, this meets the requirements quite nicely. The
interface has no type parameters, and the method returns an interface that can
be type-switched on.&lt;/p>
&lt;h2 id="implementations">Implementations&lt;/h2>
&lt;p>On the implementation side, there are also two possibilities:&lt;/p>
&lt;ul>
&lt;li>Unified&lt;/li>
&lt;li>Separated&lt;/li>
&lt;/ul>
&lt;p>Something to note is that both implementations can implement either kind of
interface.&lt;/p>
&lt;h3 id="unified-type">Unified type&lt;/h3>
&lt;p>The unified implementation consists of one type that embeds the state of the
Optional.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">Value&lt;/span> &lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">Ok&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Implementing each interface is straightforward:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">UntypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">TypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then I can create some constructors for each kind of optional. Two for Some and
None directly, and then another for specifying indirectly via boolean:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">UnifiedSome&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Ok&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">UnifiedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">]()&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="nx">Ok&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">UnifiedNewOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">UnifiedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">ok&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">UnifiedDirectSome&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">UnifiedSome&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">UnifiedDirectNone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">UnifiedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">UnifiedIndirectSome&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">UnifiedNewOptional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">UnifiedIndirectNone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">UnifiedNewOptional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="separated-types">Separated types&lt;/h3>
&lt;p>The separated implementation consists of separate types for Some and None:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">SeparatedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">SeparatedSome&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kd">struct&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">Value&lt;/span> &lt;span class="nx">T&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each type implements each interface:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">SeparatedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">UntypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="kd">var&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">SeparatedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">TypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="kd">var&lt;/span> &lt;span class="nx">v&lt;/span> &lt;span class="nx">T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">v&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">SeparatedSome&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">UntypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">SeparatedSome&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">TypedOptional&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">return&lt;/span> &lt;span class="nx">o&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Here, I only need one constructor, for specifying indirectly. Direct optionals
can be created via their respective composite literal:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nx">SeparatedNewOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">](&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="kt">bool&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">TypedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="k">if&lt;/span> &lt;span class="nx">ok&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="k">return&lt;/span> &lt;span class="nx">SeparatedSome&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]{&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">		&lt;span class="k">return&lt;/span> &lt;span class="nx">SeparatedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">SeparatedDirectSome&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">SeparatedSome&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">Value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">SeparatedDirectNone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">SeparatedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">]{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">SeparatedIndirectSome&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">SeparatedNewOptional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">SeparatedIndirectNone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">SeparatedNewOptional&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pick-something">Pick something&lt;/h2>
&lt;p>The separated implementation seems like the most elegant. It&amp;rsquo;s nice that the
state of the optional is stored in the type instead of as data.&lt;/p>
&lt;p>The drawback is that it wouldn&amp;rsquo;t work well with only the untyped interface. If I
wanted the option to assert specific types of optionals, like &lt;code>Optional[String]&lt;/code>
or &lt;code>Optional[CFrame]&lt;/code>, I wouldn&amp;rsquo;t be able to, because those types don&amp;rsquo;t exist. I
would have to assume the state of the optional as well as the type, such as
&lt;code>Some[String]&lt;/code> or &lt;code>None[CFrame]&lt;/code>.&lt;/p>
&lt;p>However, if I elect to have both the typed and untyped interfaces at the same
time, then this option remains open. Each interface requires a separate method,
and each type implements both methods. To assert, I just have to use the typed
interface instead of an implementation, such as &lt;code>TypedOptional[CFrame]&lt;/code>.
Interestingly, this still leaves the option of asserting specific states, too.&lt;/p>
&lt;p>Can you get anymore flexible? Yes, actually. There&amp;rsquo;s still the cases of
optionals with a specific state, but any type. This can be done by extending the
untyped interface with two more:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">SomeOptional&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">UntypedOptional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nf">Some&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">NoneOptional&lt;/span> &lt;span class="kd">interface&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nx">UntypedOptional&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">	&lt;span class="nf">None&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">SeparatedNone&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">None&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">o&lt;/span> &lt;span class="nx">SeparatedSome&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="nf">Some&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With these final additions, cases for all possible combinations can be made:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">switch&lt;/span> &lt;span class="nx">value&lt;/span>&lt;span class="p">.(&lt;/span>&lt;span class="kd">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">T&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">// T&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">// ?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">None&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1">// None&amp;lt;T&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">NoneOptional&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">// None&amp;lt;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">Some&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1">// Some&amp;lt;T&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">SomeOptional&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">// Some&amp;lt;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">TypedOptional&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">T&lt;/span>&lt;span class="p">]:&lt;/span> &lt;span class="c1">// Optional&amp;lt;T&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nx">UntypedOptional&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="c1">// Optional&amp;lt;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now the problem is simply deciding on actual names for all of thes-&lt;/p>
&lt;p>Maybe I&amp;rsquo;ll reconsider&amp;hellip;&lt;/p></content:encoded></item><item><title>Syncing things</title><link>https://anaminus.github.io/blog/posts/syncing-things/</link><pubDate>Sun, 06 Nov 2022 20:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/syncing-things/</guid><description>How to set up Git over Syncthing.</description><content:encoded>&lt;p>On my desktop, writings have to be technical, detailed, and correct. It&amp;rsquo;s hard
to write blog posts from there. I find it a lot easier to write casually if it&amp;rsquo;s
somewhere else, such as my laptop while sitting in a cushy chair.&lt;/p>
&lt;p>But the blog&amp;rsquo;s local repository is still on my desktop. How do I do things from
my laptop, then? It&amp;rsquo;s just Git, so it should be possible.&lt;/p>
&lt;p>Well, it is possible, but it&amp;rsquo;s a pain to get going, and there are two parts. The
first part involves setting up the &amp;ldquo;remote&amp;rdquo; repository as a bare repo somewhere
on the desktop. Then separate repositories are cloned from it, one on the
laptop, and another also on the desktop. These are just regular local
repositories, but instead of the remote being GitHub or something, it&amp;rsquo;s just
somewhere else on the desktop. There are some extra considerations, such as what
to do about syncing the &amp;ldquo;local remote&amp;rdquo; to the &amp;ldquo;remote remote&amp;rdquo; GitHub, but I
haven&amp;rsquo;t gotten that far, and don&amp;rsquo;t really care to.&lt;/p>
&lt;p>Anyway, the second part is that I need the laptop to be able to access the file
system of the desktop, in order to push to and pull from the &amp;ldquo;remote&amp;rdquo; repo. The
laptop is Linux, while the desktop is Windows, so there&amp;rsquo;s some finagling
required. I use a combination of &lt;a href="https://www.msys2.org/wiki/Setting-up-SSHd/">MSYS2 and SSHd&lt;/a> to get this done.&lt;/p>
&lt;p>I&amp;rsquo;ve used this setup for exactly one repository so far, and that was mainly to
test whether it was even viable. I think I would only use it if I needed to do
the usual deep-focus work. But I&amp;rsquo;ve found that it&amp;rsquo;s difficult to do that kind of
work on my laptop, so I&amp;rsquo;m not exactly enthusiastic about this setup.&lt;/p>
&lt;p>The alternative setup, and what I&amp;rsquo;m currently doing, is to use
&lt;a href="https://syncthing.net/">Syncthing&lt;/a>. I have Syncthing on both the laptop and desktop, and I
just configure the blog repository as a folder that syncs between them.&lt;/p>
&lt;p>Now, I suspect that Syncthing and Git wont play nice together. Some rudimentary
internet research says as much. To get around this, I just don&amp;rsquo;t sync the git
parts. There&amp;rsquo;s some other stuff that gets ignored, too. The exact patterns look
like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>.git* # No git files.
.git/ # No git directory.
*.sublime-workspace # Stop Sublime Text from getting weird.
*.lock # Hugo just drops this and leaves it lyin&amp;#39; around.
&lt;/code>&lt;/pre>&lt;p>On the desktop, the blog is a full repository, but from the perspective of the
laptop, it&amp;rsquo;s just a regular folder. I can still run Hugo on it, so that&amp;rsquo;s
nothing to worry about.&lt;/p>
&lt;p>I don&amp;rsquo;t get to do Git things from the laptop, but that&amp;rsquo;s fine. On the laptop,
the writing is the most important part. Proofreading and publishing can come
later, on the desktop. If anything, this setup is better, because it prevents me
from getting distracted.&lt;/p>
&lt;p>It&amp;rsquo;s interesting how I find it hard to do focused programming on my laptop, but
easy to do casual writing. While on the desktop, it&amp;rsquo;s the complete opposite. If
there&amp;rsquo;s anything to take away from this post, it&amp;rsquo;s to use different devices for
different contexts.&lt;/p></content:encoded></item><item><title>Securing secret branches</title><link>https://anaminus.github.io/blog/posts/secret-branch/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/secret-branch/</guid><description>How to make sure you don't git-push the wrong thing.</description><content:encoded>&lt;p>Most posts I write will never be published. But I still keep them around
locally, because they often contain useful bits that will likely find their way
into another post.&lt;/p>
&lt;p>The blog is managed by git. When I want to publish a new post, I just commit and
push (&amp;ldquo;pushlish&amp;rdquo;?). I keep drafts on a separate branch that stays local.&lt;/p>
&lt;p>But how do I make sure it stays local? I don&amp;rsquo;t want to accidentally push super
secret drafts to GitHub! Fortunately, GitHub has what are called &amp;ldquo;Protection
rules&amp;rdquo;.&lt;/p>
&lt;p>To set it up, first the branch needs to be on GitHub. It&amp;rsquo;s easy enough to create
a new branch on the website by going to the &lt;code>/branches&lt;/code> page.&lt;/p>
&lt;p>&lt;img src="fig1.png" alt="">&lt;/p>
&lt;p>The branch has to be based off of another one. I used the same branch as what my
local &lt;code>drafts&lt;/code> branch is based off of. This will make accidental pulls safe,
since git will just think the local branch is the latest.&lt;/p>
&lt;p>Next, I went to Settings, then Branches, and added a new Branch protection rule,
where the pattern matched the name of the branch:&lt;/p>
&lt;p>&lt;img src="fig2.png" alt="">&lt;/p>
&lt;p>Then I included the Lock branch rule. This will prevent me from pushing to it. I
also included the &amp;ldquo;Do not allow bypassing above settings&amp;rdquo;. Seems like a safe
thing to do.&lt;/p>
&lt;p>&lt;img src="fig3.png" alt="">&lt;/p>
&lt;p>Saved the rule, and that&amp;rsquo;s it.&lt;/p>
&lt;p>&lt;img src="fig4.png" alt="">&lt;/p>
&lt;p>Now when I try to push to the branch, GitHub will reject the attempt.&lt;/p>
&lt;p>&lt;img src="fig5.png" alt="">&lt;/p>
&lt;p>Notably, git still tries to upload everything, and the rejection comes
afterwards. I could add a local pre-push hook to prevent the uploading, but I&amp;rsquo;m
not worried about it. The point is to prevent the drafts from becoming public,
which has already been accomplished.&lt;/p></content:encoded></item><item><title>Tiny UVs</title><link>https://anaminus.github.io/blog/posts/tiny-uv/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/tiny-uv/</guid><description>Making minimal and efficient UVs in Blender for Roblox.</description><content:encoded>&lt;p>You want to produce meshes with simple, solid color textures. Because the colors
are solid, you should be able to get away with using small textures. Tiny
textures. Single-digit resolution textures. Possible, right?&lt;/p>
&lt;p>The problem: Roblox applies linear interpolation to its textures. Here is a
2-by-1 Decal, where the left pixel is white, and the right pixel is black:&lt;/p>
&lt;p>&lt;img src="fig1.png" alt="">&lt;/p>
&lt;p>Indeed, the left side is white, and the right side is black, but in between,
there is a smooth, linear interpolation from one pixel to the other.&lt;/p>
&lt;p>When constructing UVs for a mesh, we&amp;rsquo;ll have to find a way around this. Let&amp;rsquo;s
head over to Blender, and work on a simple plane mesh:&lt;/p>
&lt;p>&lt;img src="fig2.png" alt="">&lt;/p>
&lt;p>The interpolation of the texture should be set to &lt;strong>Linear&lt;/strong>, and the extension
should be set to &lt;strong>Repeat&lt;/strong>. This will match how Roblox renders textures on
MeshParts. When we import it into Roblox, it looks mostly similar:&lt;/p>
&lt;p>&lt;img src="fig3.png" alt="">&lt;/p>
&lt;p>Notably, the left side begins to fade towards black, while the right side fades
towards white, which proves that the texture repeats. So we&amp;rsquo;ll be able to use
Blender to get a rough idea of what Roblox will render.&lt;/p>
&lt;p>So how do we produce solid colors? We can&amp;rsquo;t just cover the whole pixel with a
face, because half of the pixel is always interpolating to its neighbor:&lt;/p>
&lt;p>&lt;img src="fig4.png" alt="">&lt;/p>
&lt;p>To get a solid color, the coordinates have to be in the exact center of the
pixel:&lt;/p>
&lt;p>&lt;img src="fig5.png" alt="">&lt;/p>
&lt;p>Two faces, each using one color:&lt;/p>
&lt;p>&lt;img src="fig6.png" alt="">&lt;/p>
&lt;p>But does it work in Roblox?&lt;/p>
&lt;p>&lt;img src="fig7.png" alt="">&lt;/p>
&lt;p>Indeed! To compare the colors, the top squares are regular Parts, while the
bottom squares are the mesh.&lt;/p>
&lt;p>UV coordinates are reused for SurfaceAppearance textures, so this technique can
be used to set the roughness and metalness of surfaces as well:&lt;/p>
&lt;p>&lt;img src="fig8.png" alt="">&lt;/p>
&lt;p>&lt;strong>Tip:&lt;/strong> To set the coordinates of many faces at once, select all the faces, use
the scale tool, and set the scale amounts to 0. This will move all vertices to a
single location, which you can then move to the center of the desired pixel.&lt;/p>
&lt;p>&lt;video src="fig9.webm" controls loop>&lt;/video>&lt;/p>
&lt;p>Another interesting idea: Because colors are interpolated, we could set the
coordinates to somewhere besides a pixel center, in order to get more colors.
For example, the simple 2-by-1 white-to-black texture can also be used to get
any shade of gray.&lt;/p></content:encoded></item><item><title>Stop linking to issues/new</title><link>https://anaminus.github.io/blog/posts/new-issues/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/new-issues/</guid><content:encoded>&lt;p>You have a neat software project. This project has a presence on GitHub. Maybe
you host the source code there, maybe you&amp;rsquo;re just leveraging the issue tracker.&lt;/p>
&lt;p>Your project also has a website. You know that your users will have problems
with your software, so you want to direct them from your website to your issue
tracker. You want them to have the most streamlined experience possible, so you
get the bright idea of linking to &lt;a>issues/new&lt;/a>. How convenient! One click,
and they&amp;rsquo;re able to start writing a report immediately! Except, that isn&amp;rsquo;t what
happens.&lt;/p>
&lt;figure>
&lt;img src="login.png" alt="An unsolicited GitHub login page.">
&lt;figcaption>
What actually happens when users click on your link.
&lt;/figcaption>
&lt;/figure>
&lt;p>Ugh. Don&amp;rsquo;t assume my intentions. All you had to do was link to the issue page.
It&amp;rsquo;s not like opening a new issue from there is hard.&lt;/p>
&lt;figure>
&lt;img src="new-issue.png" alt="New-issue button on GitHub's issue tracker page.">
&lt;figcaption>
Can't miss it.
&lt;/figcaption>
&lt;/figure>
&lt;p>Other reasons why you may not want to do this:&lt;/p>
&lt;ul>
&lt;li>Non-GitHub users are stonewalled from even viewing your tracker without
backtracking to find an alternate route.&lt;/li>
&lt;li>A user wants to check for an existing issue before submitting their own. Have
you been noticing a lot of duplicates?&lt;/li>
&lt;/ul>
&lt;p>If you &lt;em>are&lt;/em> going to pull this stunt, maybe you could at least link to the
issue tracker at the same time?&lt;/p>
&lt;hr>
&lt;p>&lt;em>Have a problem with this blog? &lt;a
href="https://www.youtube.com/watch?v=Jne9t8sHpUc">Submit a new issue&lt;/a>, or &lt;a
href="https://www.youtube.com/watch?v=dQw4w9WgXcQ">view all of them&lt;/a>. See?
That wasn&amp;rsquo;t so hard.&lt;/em>&lt;/p></content:encoded></item><item><title>The episode in which I make a blog</title><link>https://anaminus.github.io/blog/posts/first/</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/first/</guid><content:encoded>&lt;p>Found a &lt;a href="https://gohugo.io/">nice tool&lt;/a>, found a good workflow. Instead of long
chains of &lt;a href="https://twitter.com/Anaminus">tweets&lt;/a> and obscurely-located &lt;a href="https://devforum.roblox.com/u/anaminus">replies&lt;/a>, here we
have a proper place to write things.&lt;/p>
&lt;blockquote>
&lt;p>I would have written a shorter letter, but I did not have the time.
&amp;mdash; &lt;a href="https://en.wikipedia.org/wiki/Blaise_Pascal">Markus Twainicus&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>This post was originally much longer, but I had the time.&lt;/p></content:encoded></item></channel></rss>