<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Anaminus.Blog</title><link>https://anaminus.github.io/blog/posts/</link><description>Recent content in Posts on Anaminus.Blog</description><generator>Hugo</generator><language>en-US</language><lastBuildDate>Thu, 07 Mar 2024 12:00:00 +0000</lastBuildDate><atom:link href="https://anaminus.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Safe cron minutes</title><link>https://anaminus.github.io/blog/posts/safe-cron-minutes/</link><pubDate>Thu, 07 Mar 2024 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/safe-cron-minutes/</guid><description>&lt;pre>&lt;code>06 07 08 09 11 12 13 17
18 19 21 22 23 24 26 27
33 34 36 37 38 39 41 42
43 47 48 49 51 52 53 54
&lt;/code>&lt;/pre>
&lt;h2 id="theory">Theory&lt;/h2>
&lt;p>Everyone runs their scheduled jobs at simple minute steps like 60, 30, 15, or 5.&lt;/p>
&lt;pre>&lt;code> 0 * * * *
*/30 * * * *
*/15 * * * *
*/ 5 * * * *
&lt;/code>&lt;/pre>
&lt;h2 id="problem">Problem&lt;/h2>
&lt;p>Cron aligns minutes to the clock, leading to huge spikes of usage at those
intervals, as the hourly jobs, half-hourly jobs, etc, all run at once.&lt;/p></description></item><item><title>How the Plugin Marketplace actually works</title><link>https://anaminus.github.io/blog/posts/plugin-marketplace/</link><pubDate>Thu, 22 Jun 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/plugin-marketplace/</guid><description>&lt;h2 id="part-i---the-plugin-compensation-model">Part I - The Plugin Compensation Model&lt;/h2>
&lt;p>You are &lt;strong>developing a game&lt;/strong> on Roblox. Some aspect of your workflow is
lacking, so you write a Studio plugin. This plugin improves the workflow of the
&lt;strong>development of your game&lt;/strong>. You rejoice, as you are able to &lt;strong>develop your
game&lt;/strong> better. The hours put into the development of the plugin are compensated
by the increase in revenue deriving from the plugin allowing you to push out
updates and fixes to your game faster and more efficiently.&lt;/p></description></item><item><title>CFrame mnemonics</title><link>https://anaminus.github.io/blog/posts/cframe-mnemonics/</link><pubDate>Tue, 31 Jan 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/cframe-mnemonics/</guid><description>&lt;h2 id="methods">Methods&lt;/h2>
&lt;p>Certain methods on CFrame have an equivalent operator-based expression, which
can be useful for understanding how they work:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Method&lt;/th>
 &lt;th>Expression&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;code>A:ToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A * (B::CFrame)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:ToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse() * (B::CFrame)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:PointToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:PointToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse() * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:VectorToWorldSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A.Rotation * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;code>A:VectorToObjectSpace(B)&lt;/code>&lt;/td>
 &lt;td>&lt;code>A:Inverse().Rotation * (B::Vector3)&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h2 id="space-conversion-analogy">Space-conversion analogy&lt;/h2>
&lt;p>CFrame multiplication is not equivalent to addition. However, certain aspects
can be reused in order to remember how it works.&lt;/p>
&lt;p>Pretend that &lt;code>A * B&lt;/code> is analogous to &lt;code>B + A&lt;/code>. Also pretend that &lt;code>A:Inverse()&lt;/code> is
analogous to &lt;code>-A&lt;/code>. There is no subtraction, but the formula &lt;code>B - A&lt;/code> can be
rewritten as &lt;code>-A + B&lt;/code>. So, when we see the expression &lt;code>A:Inverse() * B&lt;/code>, it can
be thought of as a sort of &lt;code>B - A&lt;/code>.&lt;/p></description></item><item><title>On CFrame vectors</title><link>https://anaminus.github.io/blog/posts/cframe-vectors/</link><pubDate>Sun, 29 Jan 2023 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/cframe-vectors/</guid><description>&lt;p>In Roblox, the &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame">CFrame&lt;/a> type has several &amp;ldquo;Vector&amp;rdquo; fields representing
the directions of various axes of the CFrame. There are two sets of 3 vectors:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#RightVector">RightVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#UpVector">UpVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#LookVector">LookVector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#XVector">XVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#YVector">YVector&lt;/a>, &lt;a href="https://create.roblox.com/docs/reference/engine/datatypes/CFrame#ZVector">ZVector&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Roblox&amp;rsquo;s documentation claims that these fields represent the rows and columns
of the CFrame&amp;rsquo;s rotation matrix. The X, Y, Z fields are the rows, and the Right,
Up, Look fields are the columns. &lt;strong>This is very significantly incorrect&lt;/strong>.
Inspecting the values of each component reveals it so:&lt;/p></description></item><item><title>Rojo wrangling</title><link>https://anaminus.github.io/blog/posts/rojo-wrangling/</link><pubDate>Mon, 19 Dec 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/rojo-wrangling/</guid><description>&lt;p>I have particular preferences about how I want my projects to be structured, and
I will bend my tools to make it work. This time, the tool being flexed is
&lt;a href="https://rojo.space/">Rojo&lt;/a>.&lt;/p>
&lt;p>I want related modules to be grouped together into one &amp;ldquo;package&amp;rdquo;. If a package
has a server component and a client component, I want those two files to live
next to each other under the same folder. However, there are two problems that
make this structure difficult to have.&lt;/p></description></item><item><title>Managing assets locally</title><link>https://anaminus.github.io/blog/posts/managing-assets-locally/</link><pubDate>Wed, 23 Nov 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/managing-assets-locally/</guid><description>&lt;p>If you&amp;rsquo;re not indoctrinated into the cult of The Cloudâ„¢, then managing assets on
Roblox can be a pain. The assumption seems to be that you&amp;rsquo;re meant to upload
everything and subject it to moderation whether it&amp;rsquo;s ready or not.&lt;/p>
&lt;p>I prefer to keep assets local for as long as possible. Roblox Studio has an
option to hot-reload assets that live on the local file system, which is
absolutely invaluable for fast iteration. Uploading a million variations of
textures that I&amp;rsquo;ll never use ever again doesn&amp;rsquo;t make any sense.&lt;/p></description></item><item><title>Exclusive replication</title><link>https://anaminus.github.io/blog/posts/exclusive-replication/</link><pubDate>Sun, 20 Nov 2022 12:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/exclusive-replication/</guid><description>&lt;p>Instances in Roblox &lt;strong>replicate&lt;/strong>. That is, a particular instance on the server
will have a copy of itself on each client, and all aspects of this instance are
kept synchronized, including what children it has. In almost all cases, this
replication occurs in one direction only, from server to client.&lt;/p>
&lt;p>Say the server has a red brick in the Workspace. This brick will be replicated
to all clients. When the server changes the brick&amp;rsquo;s color to blue, this change
will be replicated to each client, making their local copy of the brick also
blue. However, when a client tries to change the color of its brick to green,
this change is &lt;em>not&lt;/em> replicated back to the server or any other client. The
change remains local to the client. Moreover, because only changes are
replicated, the server wont constantly be trying to update the brick&amp;rsquo;s color
back to red, so it will remain green, at least until the server changes the
color again.&lt;/p></description></item><item><title>Considering options</title><link>https://anaminus.github.io/blog/posts/considering-options/</link><pubDate>Thu, 10 Nov 2022 06:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/considering-options/</guid><description>&lt;p>I&amp;rsquo;m in the middle of rewriting &lt;a href="https://github.com/robloxapi/rbxfile">rbxfile&lt;/a>. A rewrite gives the
opportunity to right any wrongs.&lt;/p>
&lt;p>One of the wrongs was my approach to Optional types. That is not to say that it
was incorrect, but it perhaps wasn&amp;rsquo;t considered as carefully as it could have
been. Moreover, Go didn&amp;rsquo;t have generics at the time, so there were fewer good
options available.&lt;/p>
&lt;p>I currently have the Optional type implemented as a struct with a Type and a
Value field:&lt;/p></description></item><item><title>Syncing things</title><link>https://anaminus.github.io/blog/posts/syncing-things/</link><pubDate>Sun, 06 Nov 2022 20:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/syncing-things/</guid><description>&lt;p>On my desktop, writings have to be technical, detailed, and correct. It&amp;rsquo;s hard
to write blog posts from there. I find it a lot easier to write casually if it&amp;rsquo;s
somewhere else, such as my laptop while sitting in a cushy chair.&lt;/p>
&lt;p>But the blog&amp;rsquo;s local repository is still on my desktop. How do I do things from
my laptop, then? It&amp;rsquo;s just Git, so it should be possible.&lt;/p>
&lt;p>Well, it is possible, but it&amp;rsquo;s a pain to get going, and there are two parts. The
first part involves setting up the &amp;ldquo;remote&amp;rdquo; repository as a bare repo somewhere
on the desktop. Then separate repositories are cloned from it, one on the
laptop, and another also on the desktop. These are just regular local
repositories, but instead of the remote being GitHub or something, it&amp;rsquo;s just
somewhere else on the desktop. There are some extra considerations, such as what
to do about syncing the &amp;ldquo;local remote&amp;rdquo; to the &amp;ldquo;remote remote&amp;rdquo; GitHub, but I
haven&amp;rsquo;t gotten that far, and don&amp;rsquo;t really care to.&lt;/p></description></item><item><title>Securing secret branches</title><link>https://anaminus.github.io/blog/posts/secret-branch/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/secret-branch/</guid><description>&lt;p>Most posts I write will never be published. But I still keep them around
locally, because they often contain useful bits that will likely find their way
into another post.&lt;/p>
&lt;p>The blog is managed by git. When I want to publish a new post, I just commit and
push (&amp;ldquo;pushlish&amp;rdquo;?). I keep drafts on a separate branch that stays local.&lt;/p>
&lt;p>But how do I make sure it stays local? I don&amp;rsquo;t want to accidentally push super
secret drafts to GitHub! Fortunately, GitHub has what are called &amp;ldquo;Protection
rules&amp;rdquo;.&lt;/p></description></item><item><title>Tiny UVs</title><link>https://anaminus.github.io/blog/posts/tiny-uv/</link><pubDate>Sat, 24 Sep 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/tiny-uv/</guid><description>&lt;p>You want to produce meshes with simple, solid color textures. Because the colors
are solid, you should be able to get away with using small textures. Tiny
textures. Single-digit resolution textures. Possible, right?&lt;/p>
&lt;p>The problem: Roblox applies linear interpolation to its textures. Here is a
2-by-1 Decal, where the left pixel is white, and the right pixel is black:&lt;/p>
&lt;p>&lt;img src="fig1.png" alt="">&lt;/p>
&lt;p>Indeed, the left side is white, and the right side is black, but in between,
there is a smooth, linear interpolation from one pixel to the other.&lt;/p></description></item><item><title>Stop linking to issues/new</title><link>https://anaminus.github.io/blog/posts/new-issues/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/new-issues/</guid><description>&lt;p>You have a neat software project. This project has a presence on GitHub. Maybe
you host the source code there, maybe you&amp;rsquo;re just leveraging the issue tracker.&lt;/p>
&lt;p>Your project also has a website. You know that your users will have problems
with your software, so you want to direct them from your website to your issue
tracker. You want them to have the most streamlined experience possible, so you
get the bright idea of linking to &lt;a>issues/new&lt;/a>. How convenient! One click,
and they&amp;rsquo;re able to start writing a report immediately! Except, that isn&amp;rsquo;t what
happens.&lt;/p></description></item><item><title>The episode in which I make a blog</title><link>https://anaminus.github.io/blog/posts/first/</link><pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate><guid>https://anaminus.github.io/blog/posts/first/</guid><description>&lt;p>Found a &lt;a href="https://gohugo.io/">nice tool&lt;/a>, found a good workflow. Instead of long
chains of &lt;a href="https://twitter.com/Anaminus">tweets&lt;/a> and obscurely-located &lt;a href="https://devforum.roblox.com/u/anaminus">replies&lt;/a>, here we
have a proper place to write things.&lt;/p>
&lt;blockquote>
&lt;p>I would have written a shorter letter, but I did not have the time.
&amp;mdash; &lt;a href="https://en.wikipedia.org/wiki/Blaise_Pascal">Markus Twainicus&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>This post was originally much longer, but I had the time.&lt;/p></description></item></channel></rss>